

Microchip Technology PIC18 PRO Macro Assembler V1.34 build -361300703 
                                                                                               Sun Mar 26 20:21:43 2017

Microchip Technology Omniscient Code Generator (PRO mode) build 201502162209
     1                           	processor	18F2523
     2                           	fnconf	rparam,??,?,0
     3                           	opt	pw 120
     4                           	opt	pm
     5                           	psect	smallconst,global,reloc=2,class=SMALLCONST,delta=1
     6                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     7                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1
     8                           	psect	text0,global,reloc=2,class=CODE,delta=1
     9                           	psect	text1,global,reloc=2,class=CODE,delta=1
    10                           	psect	text2,global,reloc=2,class=CODE,delta=1
    11                           	psect	text3,global,reloc=2,class=CODE,delta=1
    12                           	psect	text4,global,reloc=2,class=CODE,delta=1
    13                           	psect	text5,global,reloc=2,class=CODE,delta=1
    14                           	psect	text6,global,reloc=2,class=CODE,delta=1
    15                           	psect	text7,global,reloc=2,class=CODE,delta=1
    16                           	psect	text8,global,reloc=2,class=CODE,delta=1
    17                           	psect	text9,global,reloc=2,class=CODE,delta=1
    18                           	psect	text10,global,reloc=2,class=CODE,delta=1
    19                           	psect	text11,global,reloc=2,class=CODE,delta=1
    20                           	psect	text12,global,reloc=2,class=CODE,delta=1
    21                           	psect	text13,global,reloc=2,class=CODE,delta=1
    22                           	psect	text14,global,reloc=2,class=CODE,delta=1
    23                           	psect	text15,global,reloc=2,class=CODE,delta=1
    24                           	psect	text16,global,reloc=2,class=CODE,delta=1
    25                           	psect	text17,global,reloc=2,class=CODE,delta=1
    26                           	psect	text18,global,reloc=2,class=CODE,delta=1
    27                           	psect	text19,global,reloc=2,class=CODE,delta=1
    28                           	psect	text20,global,reloc=2,class=CODE,delta=1
    29                           	psect	text21,global,reloc=2,class=CODE,delta=1
    30                           	psect	text22,global,reloc=2,class=CODE,delta=1
    31                           	psect	text23,global,reloc=2,class=CODE,delta=1
    32                           	psect	text24,global,reloc=2,class=CODE,delta=1
    33                           	psect	text25,global,reloc=2,class=CODE,delta=1
    34                           	psect	text26,global,reloc=2,class=CODE,delta=1
    35                           	psect	text27,global,reloc=2,class=CODE,delta=1
    36                           	psect	text28,global,reloc=2,class=CODE,delta=1
    37                           	psect	text29,global,reloc=2,class=CODE,delta=1
    38                           	psect	text30,global,reloc=2,class=CODE,delta=1
    39                           	psect	text31,global,reloc=2,class=CODE,delta=1
    40                           	psect	text32,global,reloc=2,class=CODE,delta=1
    41                           	psect	text33,global,reloc=2,class=CODE,delta=1
    42                           	psect	text34,global,reloc=2,class=CODE,delta=1
    43                           	psect	text35,global,reloc=2,class=CODE,delta=1
    44                           	psect	text36,global,reloc=2,class=CODE,delta=1
    45                           	psect	text37,global,reloc=2,class=CODE,delta=1
    46                           	psect	text38,global,reloc=2,class=CODE,delta=1
    47                           	psect	text39,global,reloc=2,class=CODE,delta=1
    48                           	psect	text40,global,reloc=2,class=CODE,delta=1
    49                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1
    50                           	psect	rparam,global,class=COMRAM,space=1,delta=1
    51                           	psect	pa_nodes,global,class=CODE,delta=1
    52  0000                     tblptru	equ	0xFF8
    53                           tblptrh	equ	0xFF7
    54                           tblptrl	equ	0xFF6
    55                           tablat	equ	0xFF5
    56                           prodh	equ	0xFF4
    57                           prodl	equ	0xFF3
    58                           indf0	equ	0xFEF
    59                           fsr0h	equ	0xFEA
    60                           fsr0l	equ	0xFE9
    61                           wreg	equ	0xFE8
    62                           indf2	equ	0xFDF
    63                           postinc2	equ	0xFDE
    64                           postdec2	equ	0xFDD
    65                           fsr2h	equ	0xFDA
    66                           fsr2l	equ	0xFD9
    67                           status	equ	0xFD8
    68                           
    69                           	psect	smallconst
    70  000600                     __psmallconst:
    71                           	opt stack 0
    72  000600  00                 	db	0
    73  000601                     __npowers_:
    74                           	opt stack 0
    75  000601  00                 	db	0
    76  000602  80                 	db	128
    77  000603  3F                 	db	63
    78  000604  CD                 	db	205
    79  000605  CC                 	db	204
    80  000606  3D                 	db	61
    81  000607  D7                 	db	215
    82  000608  23                 	db	35
    83  000609  3C                 	db	60
    84  00060A  12                 	db	18
    85  00060B  83                 	db	131
    86  00060C  3A                 	db	58
    87  00060D  B7                 	db	183
    88  00060E  D1                 	db	209
    89  00060F  38                 	db	56
    90  000610  C6                 	db	198
    91  000611  27                 	db	39
    92  000612  37                 	db	55
    93  000613  38                 	db	56
    94  000614  86                 	db	134
    95  000615  35                 	db	53
    96  000616  C0                 	db	192
    97  000617  D6                 	db	214
    98  000618  33                 	db	51
    99  000619  CC                 	db	204
   100  00061A  2B                 	db	43
   101  00061B  32                 	db	50
   102  00061C  70                 	db	112
   103  00061D  89                 	db	137
   104  00061E  30                 	db	48
   105  00061F  E7                 	db	231
   106  000620  DB                 	db	219
   107  000621  2E                 	db	46
   108  000622  E5                 	db	229
   109  000623  3C                 	db	60
   110  000624  1E                 	db	30
   111  000625  42                 	db	66
   112  000626  A2                 	db	162
   113  000627  0D                 	db	13
   114  000628                     __end_of__npowers_:
   115                           	opt stack 0
   116  000628                     __powers_:
   117                           	opt stack 0
   118  000628  00                 	db	0
   119  000629  80                 	db	128
   120  00062A  3F                 	db	63
   121  00062B  00                 	db	0
   122  00062C  20                 	db	32
   123  00062D  41                 	db	65
   124  00062E  00                 	db	0
   125  00062F  C8                 	db	200
   126  000630  42                 	db	66
   127  000631  00                 	db	0
   128  000632  7A                 	db	122
   129  000633  44                 	db	68
   130  000634  40                 	db	64
   131  000635  1C                 	db	28
   132  000636  46                 	db	70
   133  000637  50                 	db	80
   134  000638  C3                 	db	195
   135  000639  47                 	db	71
   136  00063A  24                 	db	36
   137  00063B  74                 	db	116
   138  00063C  49                 	db	73
   139  00063D  97                 	db	151
   140  00063E  18                 	db	24
   141  00063F  4B                 	db	75
   142  000640  BC                 	db	188
   143  000641  BE                 	db	190
   144  000642  4C                 	db	76
   145  000643  6B                 	db	107
   146  000644  6E                 	db	110
   147  000645  4E                 	db	78
   148  000646  03                 	db	3
   149  000647  15                 	db	21
   150  000648  50                 	db	80
   151  000649  79                 	db	121
   152  00064A  AD                 	db	173
   153  00064B  60                 	db	96
   154  00064C  F3                 	db	243
   155  00064D  49                 	db	73
   156  00064E  71                 	db	113
   157  00064F                     __end_of__powers_:
   158                           	opt stack 0
   159  00064F                     _dpowers:
   160                           	opt stack 0
   161  00064F  0001               	dw	1
   162  000651  0000               	dw	0
   163  000653  000A               	dw	10
   164  000655  0000               	dw	0
   165  000657  0064               	dw	100
   166  000659  0000               	dw	0
   167  00065B  03E8               	dw	1000
   168  00065D  0000               	dw	0
   169  00065F  2710               	dw	10000
   170  000661  0000               	dw	0
   171  000663  86A0               	dw	34464
   172  000665  0001               	dw	1
   173  000667  4240               	dw	16960
   174  000669  000F               	dw	15
   175  00066B  9680               	dw	38528
   176  00066D  0098               	dw	152
   177  00066F  E100               	dw	57600
   178  000671  05F5               	dw	1525
   179  000673  CA00               	dw	51712
   180  000675  3B9A               	dw	15258
   181  000677                     __end_of_dpowers:
   182                           	opt stack 0
   183  0000                     _ADCON1	set	4033
   184  0000                     _CMCON	set	4020
   185  0000                     _LATBbits	set	3978
   186  0000                     _PORTA	set	3968
   187  0000                     _PORTB	set	3969
   188  0000                     _PORTC	set	3970
   189  0000                     _SSPADD	set	4040
   190  0000                     _SSPBUF	set	4041
   191  0000                     _SSPCON1	set	4038
   192  0000                     _SSPCON1bits	set	4038
   193  0000                     _SSPCON2	set	4037
   194  0000                     _SSPCON2bits	set	4037
   195  0000                     _SSPSTAT	set	4039
   196  0000                     _SSPSTATbits	set	4039
   197  0000                     _TRISA	set	3986
   198  0000                     _TRISBbits	set	3987
   199  0000                     _TRISCbits	set	3988
   200  000677                     STR_1:
   201  000677  53                 	db	83	;'S'
   202  000678  65                 	db	101	;'e'
   203  000679  6E                 	db	110	;'n'
   204  00067A  73                 	db	115	;'s'
   205  00067B  6F                 	db	111	;'o'
   206  00067C  72                 	db	114	;'r'
   207  00067D  20                 	db	32
   208  00067E  4C                 	db	76	;'L'
   209  00067F  4D                 	db	77	;'M'
   210  000680  37                 	db	55	;'7'
   211  000681  35                 	db	53	;'5'
   212  000682  00                 	db	0
   213  000683                     STR_2:
   214  000683  54                 	db	84	;'T'
   215  000684  65                 	db	101	;'e'
   216  000685  6D                 	db	109	;'m'
   217  000686  70                 	db	112	;'p'
   218  000687  3D                 	db	61	;'='
   219  000688  00                 	db	0
   220  000689                     STR_3:
   221  000689  25                 	db	37
   222  00068A  33                 	db	51	;'3'
   223  00068B  2E                 	db	46
   224  00068C  31                 	db	49	;'1'
   225  00068D  66                 	db	102	;'f'
   226  00068E  00                 	db	0
   227  0000                     
   228                           ; #config settings
   229  00068F  00                 	db	0	; dummy byte at the end
   230  0000                     tblptru	equ	0xFF8
   231                           tblptrh	equ	0xFF7
   232                           tblptrl	equ	0xFF6
   233                           tablat	equ	0xFF5
   234                           prodh	equ	0xFF4
   235                           prodl	equ	0xFF3
   236                           indf0	equ	0xFEF
   237                           fsr0h	equ	0xFEA
   238                           fsr0l	equ	0xFE9
   239                           wreg	equ	0xFE8
   240                           indf2	equ	0xFDF
   241                           postinc2	equ	0xFDE
   242                           postdec2	equ	0xFDD
   243                           fsr2h	equ	0xFDA
   244                           fsr2l	equ	0xFD9
   245                           status	equ	0xFD8
   246                           
   247                           	psect	cinit
   248  001F66                     __pcinit:
   249                           	opt stack 0
   250  001F66                     start_initialization:
   251                           	opt stack 0
   252  001F66                     __initialization:
   253                           	opt stack 0
   254  001F66                     end_of_initialization:
   255                           	opt stack 0
   256  001F66                     __end_of__initialization:
   257                           	opt stack 0
   258  001F66  0E00               	movlw	low (__Lmediumconst shr (0+16))
   259  001F68  6EF8               	movwf	tblptru,c
   260  001F6A  0100               	movlb	0
   261  001F6C  EF41  F00C         	goto	_main	;jump to C main() function
   262                           tblptru	equ	0xFF8
   263                           tblptrh	equ	0xFF7
   264                           tblptrl	equ	0xFF6
   265                           tablat	equ	0xFF5
   266                           prodh	equ	0xFF4
   267                           prodl	equ	0xFF3
   268                           indf0	equ	0xFEF
   269                           fsr0h	equ	0xFEA
   270                           fsr0l	equ	0xFE9
   271                           wreg	equ	0xFE8
   272                           indf2	equ	0xFDF
   273                           postinc2	equ	0xFDE
   274                           postdec2	equ	0xFDD
   275                           fsr2h	equ	0xFDA
   276                           fsr2l	equ	0xFD9
   277                           status	equ	0xFD8
   278                           
   279                           	psect	cstackCOMRAM
   280  000001                     __pcstackCOMRAM:
   281                           	opt stack 0
   282  000001                     ??_Lcd_Delay5500us:
   283  000001                     ??_I2C_Idle:
   284  000001                     ??_isdigit:
   285  000001                     ?___wmul:
   286                           	opt stack 0
   287  000001                     ?___awmod:
   288                           	opt stack 0
   289  000001                     ?___ftpack:
   290                           	opt stack 0
   291  000001                     ?___ftneg:
   292                           	opt stack 0
   293  000001                     ?__tdiv_to_l_:
   294                           	opt stack 0
   295  000001                     ?__div_to_l_:
   296                           	opt stack 0
   297  000001                     ?___lldiv:
   298                           	opt stack 0
   299  000001                     ?___llmod:
   300                           	opt stack 0
   301  000001                     I2C_Init@clock_output:
   302                           	opt stack 0
   303  000001                     ___lbmod@divisor:
   304                           	opt stack 0
   305  000001                     Delay_ms@count:
   306                           	opt stack 0
   307  000001                     ___wmul@multiplier:
   308                           	opt stack 0
   309  000001                     ___awmod@dividend:
   310                           	opt stack 0
   311  000001                     __div_to_l_@f1:
   312                           	opt stack 0
   313  000001                     ___ftpack@arg:
   314                           	opt stack 0
   315  000001                     __tdiv_to_l_@f1:
   316                           	opt stack 0
   317  000001                     ___ftge@ff1:
   318                           	opt stack 0
   319  000001                     ___ftneg@f1:
   320                           	opt stack 0
   321  000001                     ___lldiv@dividend:
   322                           	opt stack 0
   323  000001                     ___llmod@dividend:
   324                           	opt stack 0
   325                           
   326                           ; 4 bytes @ 0x0
   327  000001                     	ds	1
   328  000002                     ??_Lcd_Command:
   329  000002                     ??_Lcd_CharCP:
   330  000002                     I2C_ReadByte@acknowledge:
   331                           	opt stack 0
   332  000002                     I2C_WriteByte@data_out:
   333                           	opt stack 0
   334  000002                     _isdigit$956:
   335                           	opt stack 0
   336  000002                     ___lbmod@dividend:
   337                           	opt stack 0
   338                           
   339                           ; 1 bytes @ 0x1
   340  000002                     	ds	1
   341  000003                     ??_Delay_ms:
   342  000003                     I2C_ReadByte@buffer_I2C:
   343                           	opt stack 0
   344  000003                     isdigit@c:
   345                           	opt stack 0
   346  000003                     ___lbmod@counter:
   347                           	opt stack 0
   348  000003                     ___wmul@multiplicand:
   349                           	opt stack 0
   350  000003                     ___awmod@divisor:
   351                           	opt stack 0
   352                           
   353                           ; 2 bytes @ 0x2
   354  000003                     	ds	1
   355  000004                     Lcd_CharCP@c:
   356                           	opt stack 0
   357  000004                     Lcd_Command@command:
   358                           	opt stack 0
   359  000004                     ___ftpack@exp:
   360                           	opt stack 0
   361  000004                     ___lbmod@rem:
   362                           	opt stack 0
   363  000004                     Delay_ms@i:
   364                           	opt stack 0
   365  000004                     __div_to_l_@f2:
   366                           	opt stack 0
   367  000004                     __tdiv_to_l_@f2:
   368                           	opt stack 0
   369  000004                     ___ftge@ff2:
   370                           	opt stack 0
   371                           
   372                           ; 3 bytes @ 0x3
   373  000004                     	ds	1
   374  000005                     Lcd_Init@data:
   375                           	opt stack 0
   376  000005                     Lcd_Text@x:
   377                           	opt stack 0
   378  000005                     ___awmod@counter:
   379                           	opt stack 0
   380  000005                     ___ftpack@sign:
   381                           	opt stack 0
   382  000005                     ___lbdiv@divisor:
   383                           	opt stack 0
   384  000005                     ___wmul@product:
   385                           	opt stack 0
   386  000005                     ___lldiv@divisor:
   387                           	opt stack 0
   388  000005                     ___llmod@divisor:
   389                           	opt stack 0
   390                           
   391                           ; 4 bytes @ 0x4
   392  000005                     	ds	1
   393  000006                     ??___ftpack:
   394  000006                     ___awmod@sign:
   395                           	opt stack 0
   396  000006                     ___lbdiv@dividend:
   397                           	opt stack 0
   398  000006                     Lcd_Text@buffer:
   399                           	opt stack 0
   400                           
   401                           ; 2 bytes @ 0x5
   402  000006                     	ds	1
   403  000007                     ??__tdiv_to_l_:
   404  000007                     ??___ftge:
   405  000007                     ?___awdiv:
   406                           	opt stack 0
   407  000007                     ___lbdiv@counter:
   408                           	opt stack 0
   409  000007                     ___awdiv@dividend:
   410                           	opt stack 0
   411  000007                     __div_to_l_@quot:
   412                           	opt stack 0
   413                           
   414                           ; 4 bytes @ 0x6
   415  000007                     	ds	1
   416  000008                     Lcd_Text@y:
   417                           	opt stack 0
   418  000008                     ___lbdiv@quotient:
   419                           	opt stack 0
   420                           
   421                           ; 1 bytes @ 0x7
   422  000008                     	ds	1
   423  000009                     ?___awtoft:
   424                           	opt stack 0
   425  000009                     ?___lltoft:
   426                           	opt stack 0
   427  000009                     Lcd_Text@data:
   428                           	opt stack 0
   429  000009                     ___llmod@counter:
   430                           	opt stack 0
   431  000009                     ___awdiv@divisor:
   432                           	opt stack 0
   433  000009                     ___awtoft@c:
   434                           	opt stack 0
   435  000009                     ___lldiv@quotient:
   436                           	opt stack 0
   437  000009                     ___lltoft@c:
   438                           	opt stack 0
   439                           
   440                           ; 4 bytes @ 0x8
   441  000009                     	ds	1
   442  00000A                     __tdiv_to_l_@quot:
   443                           	opt stack 0
   444                           
   445                           ; 4 bytes @ 0x9
   446  00000A                     	ds	1
   447  00000B                     ___awdiv@counter:
   448                           	opt stack 0
   449  00000B                     __div_to_l_@cntr:
   450                           	opt stack 0
   451                           
   452                           ; 1 bytes @ 0xA
   453  00000B                     	ds	1
   454  00000C                     ___awdiv@sign:
   455                           	opt stack 0
   456  00000C                     ___awtoft@sign:
   457                           	opt stack 0
   458  00000C                     __div_to_l_@exp1:
   459                           	opt stack 0
   460                           
   461                           ; 1 bytes @ 0xB
   462  00000C                     	ds	1
   463  00000D                     ??___lltoft:
   464  00000D                     ?___ftdiv:
   465                           	opt stack 0
   466  00000D                     ___lldiv@counter:
   467                           	opt stack 0
   468  00000D                     ___awdiv@quotient:
   469                           	opt stack 0
   470  00000D                     ___ftdiv@f1:
   471                           	opt stack 0
   472                           
   473                           ; 3 bytes @ 0xC
   474  00000D                     	ds	1
   475  00000E                     __tdiv_to_l_@cntr:
   476                           	opt stack 0
   477                           
   478                           ; 1 bytes @ 0xD
   479  00000E                     	ds	1
   480  00000F                     ?___ftmul:
   481                           	opt stack 0
   482  00000F                     __tdiv_to_l_@exp1:
   483                           	opt stack 0
   484  00000F                     ___ftmul@f1:
   485                           	opt stack 0
   486                           
   487                           ; 3 bytes @ 0xE
   488  00000F                     	ds	1
   489  000010                     ___ftdiv@f2:
   490                           	opt stack 0
   491                           
   492                           ; 3 bytes @ 0xF
   493  000010                     	ds	1
   494  000011                     ___lltoft@exp:
   495                           	opt stack 0
   496                           
   497                           ; 1 bytes @ 0x10
   498  000011                     	ds	1
   499  000012                     ___ftmul@f2:
   500                           	opt stack 0
   501                           
   502                           ; 3 bytes @ 0x11
   503  000012                     	ds	1
   504  000013                     ??___ftdiv:
   505                           
   506                           ; 0 bytes @ 0x12
   507  000013                     	ds	2
   508  000015                     ??___ftmul:
   509                           
   510                           ; 0 bytes @ 0x14
   511  000015                     	ds	1
   512  000016                     ___ftdiv@cntr:
   513                           	opt stack 0
   514                           
   515                           ; 1 bytes @ 0x15
   516  000016                     	ds	1
   517  000017                     ___ftdiv@f3:
   518                           	opt stack 0
   519                           
   520                           ; 3 bytes @ 0x16
   521  000017                     	ds	1
   522  000018                     ___ftmul@exp:
   523                           	opt stack 0
   524                           
   525                           ; 1 bytes @ 0x17
   526  000018                     	ds	1
   527  000019                     ___ftmul@f3_as_product:
   528                           	opt stack 0
   529                           
   530                           ; 3 bytes @ 0x18
   531  000019                     	ds	1
   532  00001A                     ___ftdiv@exp:
   533                           	opt stack 0
   534                           
   535                           ; 1 bytes @ 0x19
   536  00001A                     	ds	1
   537  00001B                     ___ftdiv@sign:
   538                           	opt stack 0
   539                           
   540                           ; 1 bytes @ 0x1A
   541  00001B                     	ds	1
   542  00001C                     ?_LM75_regdata2float:
   543                           	opt stack 0
   544  00001C                     ___ftmul@cntr:
   545                           	opt stack 0
   546  00001C                     LM75_regdata2float@regdata:
   547                           	opt stack 0
   548                           
   549                           ; 2 bytes @ 0x1B
   550  00001C                     	ds	1
   551  00001D                     ___ftmul@sign:
   552                           	opt stack 0
   553                           
   554                           ; 1 bytes @ 0x1C
   555  00001D                     	ds	1
   556  00001E                     ?_fround:
   557                           	opt stack 0
   558  00001E                     ?_scale:
   559                           	opt stack 0
   560                           
   561                           ; 3 bytes @ 0x1D
   562  00001E                     	ds	1
   563  00001F                     _LM75_regdata2float$1236:
   564                           	opt stack 0
   565                           
   566                           ; 3 bytes @ 0x1E
   567  00001F                     	ds	2
   568  000021                     ??_fround:
   569  000021                     ??_scale:
   570                           
   571                           ; 0 bytes @ 0x20
   572  000021                     	ds	1
   573  000022                     ?_LM75_Read_Temp:
   574                           	opt stack 0
   575                           
   576                           ; 3 bytes @ 0x21
   577  000022                     	ds	3
   578  000025                     ??_LM75_Read_Temp:
   579  000025                     _fround$1238:
   580                           	opt stack 0
   581  000025                     _scale$1239:
   582                           	opt stack 0
   583                           
   584                           ; 3 bytes @ 0x24
   585  000025                     	ds	2
   586  000027                     LM75_Read_Temp@word0:
   587                           	opt stack 0
   588                           
   589                           ; 2 bytes @ 0x26
   590  000027                     	ds	1
   591  000028                     scale@scl:
   592                           	opt stack 0
   593  000028                     _fround$1237:
   594                           	opt stack 0
   595                           
   596                           ; 3 bytes @ 0x27
   597  000028                     	ds	1
   598  000029                     ?___fttol:
   599                           	opt stack 0
   600  000029                     LM75_Read_Temp@LSB:
   601                           	opt stack 0
   602  000029                     ___fttol@f1:
   603                           	opt stack 0
   604                           
   605                           ; 3 bytes @ 0x28
   606  000029                     	ds	1
   607  00002A                     LM75_Read_Temp@MSB:
   608                           	opt stack 0
   609                           
   610                           ; 1 bytes @ 0x29
   611  00002A                     	ds	1
   612  00002B                     fround@prec:
   613                           	opt stack 0
   614                           
   615                           ; 1 bytes @ 0x2A
   616  00002B                     	ds	1
   617  00002C                     ?___ftadd:
   618                           	opt stack 0
   619  00002C                     ___ftadd@f1:
   620                           	opt stack 0
   621                           
   622                           ; 3 bytes @ 0x2B
   623  00002C                     	ds	1
   624  00002D                     ??___fttol:
   625                           
   626                           ; 0 bytes @ 0x2C
   627  00002D                     	ds	2
   628  00002F                     ___ftadd@f2:
   629                           	opt stack 0
   630                           
   631                           ; 3 bytes @ 0x2E
   632  00002F                     	ds	3
   633  000032                     ??___ftadd:
   634  000032                     ___fttol@sign1:
   635                           	opt stack 0
   636                           
   637                           ; 1 bytes @ 0x31
   638  000032                     	ds	1
   639  000033                     ___fttol@lval:
   640                           	opt stack 0
   641                           
   642                           ; 4 bytes @ 0x32
   643  000033                     	ds	2
   644  000035                     ___ftadd@sign:
   645                           	opt stack 0
   646                           
   647                           ; 1 bytes @ 0x34
   648  000035                     	ds	1
   649  000036                     ___ftadd@exp2:
   650                           	opt stack 0
   651                           
   652                           ; 1 bytes @ 0x35
   653  000036                     	ds	1
   654  000037                     ___ftadd@exp1:
   655                           	opt stack 0
   656  000037                     ___fttol@exp1:
   657                           	opt stack 0
   658                           
   659                           ; 1 bytes @ 0x36
   660  000037                     	ds	1
   661  000038                     ?___ftsub:
   662                           	opt stack 0
   663  000038                     ___ftsub@f1:
   664                           	opt stack 0
   665                           
   666                           ; 3 bytes @ 0x37
   667  000038                     	ds	3
   668  00003B                     ___ftsub@f2:
   669                           	opt stack 0
   670                           
   671                           ; 3 bytes @ 0x3A
   672  00003B                     	ds	3
   673  00003E                     ?_sprintf:
   674                           	opt stack 0
   675  00003E                     sprintf@f:
   676                           	opt stack 0
   677                           
   678                           ; 1 bytes @ 0x3D
   679  00003E                     	ds	4
   680  000042                     ??_sprintf:
   681                           
   682                           ; 0 bytes @ 0x41
   683  000042                     	ds	6
   684  000048                     _sprintf$1240:
   685                           	opt stack 0
   686                           
   687                           ; 3 bytes @ 0x47
   688  000048                     	ds	3
   689  00004B                     sprintf@ap:
   690                           	opt stack 0
   691                           
   692                           ; 1 bytes @ 0x4A
   693  00004B                     	ds	1
   694  00004C                     sprintf@val:
   695                           	opt stack 0
   696                           
   697                           ; 4 bytes @ 0x4B
   698  00004C                     	ds	4
   699  000050                     sprintf@flag:
   700                           	opt stack 0
   701                           
   702                           ; 2 bytes @ 0x4F
   703  000050                     	ds	2
   704  000052                     sprintf@width:
   705                           	opt stack 0
   706                           
   707                           ; 2 bytes @ 0x51
   708  000052                     	ds	2
   709  000054                     sprintf@tmpval:
   710                           	opt stack 0
   711                           
   712                           ; 4 bytes @ 0x53
   713  000054                     	ds	4
   714  000058                     sprintf@exp:
   715                           	opt stack 0
   716                           
   717                           ; 2 bytes @ 0x57
   718  000058                     	ds	2
   719  00005A                     sprintf@fval:
   720                           	opt stack 0
   721                           
   722                           ; 3 bytes @ 0x59
   723  00005A                     	ds	3
   724  00005D                     sprintf@sp:
   725                           	opt stack 0
   726                           
   727                           ; 1 bytes @ 0x5C
   728  00005D                     	ds	1
   729  00005E                     sprintf@prec:
   730                           	opt stack 0
   731                           
   732                           ; 2 bytes @ 0x5D
   733  00005E                     	ds	2
   734  000060                     sprintf@c:
   735                           	opt stack 0
   736                           
   737                           ; 1 bytes @ 0x5F
   738  000060                     	ds	1
   739  000061                     main@temp:
   740                           	opt stack 0
   741                           
   742                           ; 10 bytes @ 0x60
   743  000061                     	ds	10
   744                           tblptru	equ	0xFF8
   745                           tblptrh	equ	0xFF7
   746                           tblptrl	equ	0xFF6
   747                           tablat	equ	0xFF5
   748                           prodh	equ	0xFF4
   749                           prodl	equ	0xFF3
   750                           indf0	equ	0xFEF
   751                           fsr0h	equ	0xFEA
   752                           fsr0l	equ	0xFE9
   753                           wreg	equ	0xFE8
   754                           indf2	equ	0xFDF
   755                           postinc2	equ	0xFDE
   756                           postdec2	equ	0xFDD
   757                           fsr2h	equ	0xFDA
   758                           fsr2l	equ	0xFD9
   759                           status	equ	0xFD8
   760                           
   761 ;;
   762 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   763 ;;
   764 ;; *************** function _main *****************
   765 ;; Defined at:
   766 ;;		line 26 in file "main.c"
   767 ;; Parameters:    Size  Location     Type
   768 ;;		None
   769 ;; Auto vars:     Size  Location     Type
   770 ;;  temp           10   96[COMRAM] unsigned char [10]
   771 ;; Return value:  Size  Location     Type
   772 ;;		None               void
   773 ;; Registers used:
   774 ;;		wreg, fsr0l, fsr0h, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   775 ;; Tracked objects:
   776 ;;		On entry : 0/0
   777 ;;		On exit  : 0/0
   778 ;;		Unchanged: 0/0
   779 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   780 ;;      Params:         0       0       0       0       0       0       0
   781 ;;      Locals:        10       0       0       0       0       0       0
   782 ;;      Temps:          0       0       0       0       0       0       0
   783 ;;      Totals:        10       0       0       0       0       0       0
   784 ;;Total ram usage:       10 bytes
   785 ;; Hardware stack levels required when called:    4
   786 ;; This function calls:
   787 ;;		_Delay_ms
   788 ;;		_I2C_Close
   789 ;;		_I2C_Init
   790 ;;		_LM75_Read_Temp
   791 ;;		_Lcd_CharCP
   792 ;;		_Lcd_Command
   793 ;;		_Lcd_Init
   794 ;;		_Lcd_Text
   795 ;;		_sprintf
   796 ;; This function is called by:
   797 ;;		Startup code after reset
   798 ;; This function uses a non-reentrant model
   799 ;;
   800                           
   801                           	psect	text0
   802  001882                     __ptext0:
   803                           	opt stack 0
   804  001882                     _main:
   805                           	opt stack 27
   806                           
   807                           ;main.c: 28: unsigned char temp[10];
   808                           ;main.c: 30: ADCON1 = 0b00001111;
   809                           
   810                           ;incstack = 0
   811  001882  0E0F               	movlw	15
   812  001884  6EC1               	movwf	4033,c	;volatile
   813                           
   814                           ;main.c: 31: CMCON = 0b00000111;
   815  001886  0E07               	movlw	7
   816  001888  6EB4               	movwf	4020,c	;volatile
   817                           
   818                           ;main.c: 33: PORTA = 0b11111111;
   819  00188A  6880               	setf	3968,c	;volatile
   820                           
   821                           ;main.c: 34: PORTB = 0;
   822  00188C  6A81               	clrf	3969,c	;volatile
   823                           
   824                           ;main.c: 35: PORTC = 0;
   825  00188E  6A82               	clrf	3970,c	;volatile
   826                           
   827                           ;main.c: 36: TRISA = 0b00111111;
   828  001890  0E3F               	movlw	63
   829  001892  6E92               	movwf	3986,c	;volatile
   830                           
   831                           ;main.c: 38: CMCON = 0b00000111;
   832  001894  0E07               	movlw	7
   833  001896  6EB4               	movwf	4020,c	;volatile
   834                           
   835                           ;main.c: 40: I2C_Close();
   836  001898  ECB8  F00F         	call	_I2C_Close	;wreg free
   837                           
   838                           ;main.c: 42: I2C_Init(9);
   839  00189C  0E09               	movlw	9
   840  00189E  EC77  F00F         	call	_I2C_Init
   841                           
   842                           ;main.c: 44: Lcd_Init();
   843  0018A2  ECF1  F00B         	call	_Lcd_Init	;wreg free
   844                           
   845                           ;main.c: 45: Lcd_Command(1);
   846  0018A6  0E01               	movlw	1
   847  0018A8  ECA0  F009         	call	_Lcd_Command
   848                           
   849                           ;main.c: 46: Lcd_Command(12);
   850  0018AC  0E0C               	movlw	12
   851  0018AE  ECA0  F009         	call	_Lcd_Command
   852                           
   853                           ;main.c: 48: Lcd_Text(1, 1, "Sensor LM75");
   854  0018B2  0E01               	movlw	1
   855  0018B4  6E05               	movwf	Lcd_Text@x,c
   856  0018B6  0E77               	movlw	low STR_1
   857  0018B8  6E06               	movwf	Lcd_Text@buffer,c
   858  0018BA  5006               	movf	Lcd_Text@buffer,w,c
   859  0018BC  A4D8               	btfss	status,2,c
   860  0018BE  0E06               	movlw	high __smallconst
   861  0018C0  6E07               	movwf	Lcd_Text@buffer+1,c
   862  0018C2  0E01               	movlw	1
   863  0018C4  EC90  F00C         	call	_Lcd_Text
   864                           
   865                           ;main.c: 49: Lcd_Text(2, 1, "Temp=");
   866  0018C8  0E01               	movlw	1
   867  0018CA  6E05               	movwf	Lcd_Text@x,c
   868  0018CC  0E83               	movlw	low STR_2
   869  0018CE  6E06               	movwf	Lcd_Text@buffer,c
   870  0018D0  5006               	movf	Lcd_Text@buffer,w,c
   871  0018D2  A4D8               	btfss	status,2,c
   872  0018D4  0E06               	movlw	high __smallconst
   873  0018D6  6E07               	movwf	Lcd_Text@buffer+1,c
   874  0018D8  0E02               	movlw	2
   875  0018DA  EC90  F00C         	call	_Lcd_Text
   876  0018DE                     l3078:
   877                           
   878                           ;main.c: 51: {
   879                           ;main.c: 52: sprintf(temp, "%3.1f", LM75_Read_Temp());
   880  0018DE  0E89               	movlw	low STR_3
   881  0018E0  6E3E               	movwf	sprintf@f,c
   882  0018E2  ECF4  F00D         	call	_LM75_Read_Temp	;wreg free
   883  0018E6  C022  F03F         	movff	?_LM75_Read_Temp,?_sprintf+1
   884  0018EA  C023  F040         	movff	?_LM75_Read_Temp+1,?_sprintf+2
   885  0018EE  C024  F041         	movff	?_LM75_Read_Temp+2,?_sprintf+3
   886  0018F2  0E61               	movlw	main@temp& (0+255)
   887  0018F4  EC48  F003         	call	_sprintf
   888                           
   889                           ;main.c: 53: Lcd_Text(2, 6, temp);
   890  0018F8  0E06               	movlw	6
   891  0018FA  6E05               	movwf	Lcd_Text@x,c
   892  0018FC  0E61               	movlw	low main@temp
   893  0018FE  6E06               	movwf	Lcd_Text@buffer,c
   894  001900  6A07               	clrf	Lcd_Text@buffer+1,c
   895  001902  0E02               	movlw	2
   896  001904  EC90  F00C         	call	_Lcd_Text
   897                           
   898                           ;main.c: 54: Lcd_CharCP(178);
   899  001908  0EB2               	movlw	178
   900  00190A  EC35  F009         	call	_Lcd_CharCP
   901                           
   902                           ;main.c: 55: Lcd_CharCP('C');
   903  00190E  0E43               	movlw	67
   904  001910  EC35  F009         	call	_Lcd_CharCP
   905                           
   906                           ;main.c: 56: Delay_ms(100);
   907  001914  6A02               	clrf	Delay_ms@count+1,c
   908  001916  0E64               	movlw	100
   909  001918  6E01               	movwf	Delay_ms@count,c
   910  00191A  EC49  F00F         	call	_Delay_ms	;wreg free
   911  00191E  D7DF               	goto	l3078
   912  001920                     __end_of_main:
   913                           	opt stack 0
   914                           tblptru	equ	0xFF8
   915                           tblptrh	equ	0xFF7
   916                           tblptrl	equ	0xFF6
   917                           tablat	equ	0xFF5
   918                           prodh	equ	0xFF4
   919                           prodl	equ	0xFF3
   920                           indf0	equ	0xFEF
   921                           fsr0h	equ	0xFEA
   922                           fsr0l	equ	0xFE9
   923                           wreg	equ	0xFE8
   924                           indf2	equ	0xFDF
   925                           postinc2	equ	0xFDE
   926                           postdec2	equ	0xFDD
   927                           fsr2h	equ	0xFDA
   928                           fsr2l	equ	0xFD9
   929                           status	equ	0xFD8
   930                           
   931 ;; *************** function _sprintf *****************
   932 ;; Defined at:
   933 ;;		line 492 in file "D:\Arquivos de Programas\Microchip\xc8\v1.34\sources\common\doprnt.c"
   934 ;; Parameters:    Size  Location     Type
   935 ;;  sp              1    wreg     PTR unsigned char 
   936 ;;		 -> main@temp(10), 
   937 ;;  f               1   61[COMRAM] PTR const unsigned char 
   938 ;;		 -> STR_4(6), STR_3(6), 
   939 ;; Auto vars:     Size  Location     Type
   940 ;;  sp              1   92[COMRAM] PTR unsigned char 
   941 ;;		 -> main@temp(10), 
   942 ;;  tmpval          4   83[COMRAM] struct .
   943 ;;  val             4   75[COMRAM] unsigned long 
   944 ;;  fval            3   89[COMRAM] unsigned long 
   945 ;;  cp              3    0        PTR const unsigned char 
   946 ;;  prec            2   93[COMRAM] int 
   947 ;;  exp             2   87[COMRAM] int 
   948 ;;  width           2   81[COMRAM] int 
   949 ;;  flag            2   79[COMRAM] unsigned short 
   950 ;;  len             2    0        unsigned int 
   951 ;;  c               1   95[COMRAM] char 
   952 ;;  ap              1   74[COMRAM] PTR void [1]
   953 ;;		 -> ?_sprintf(2), 
   954 ;;  d               1    0        unsigned char 
   955 ;; Return value:  Size  Location     Type
   956 ;;                  2   61[COMRAM] int 
   957 ;; Registers used:
   958 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   959 ;; Tracked objects:
   960 ;;		On entry : 0/0
   961 ;;		On exit  : 0/0
   962 ;;		Unchanged: 0/0
   963 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   964 ;;      Params:         4       0       0       0       0       0       0
   965 ;;      Locals:        25       0       0       0       0       0       0
   966 ;;      Temps:          6       0       0       0       0       0       0
   967 ;;      Totals:        35       0       0       0       0       0       0
   968 ;;Total ram usage:       35 bytes
   969 ;; Hardware stack levels used:    1
   970 ;; Hardware stack levels required when called:    3
   971 ;; This function calls:
   972 ;;		___awdiv
   973 ;;		___ftadd
   974 ;;		___ftge
   975 ;;		___ftmul
   976 ;;		___ftneg
   977 ;;		___ftsub
   978 ;;		___fttol
   979 ;;		___lldiv
   980 ;;		___llmod
   981 ;;		___lltoft
   982 ;;		___wmul
   983 ;;		__div_to_l_
   984 ;;		__tdiv_to_l_
   985 ;;		_fround
   986 ;;		_isdigit
   987 ;;		_scale
   988 ;; This function is called by:
   989 ;;		_main
   990 ;; This function uses a non-reentrant model
   991 ;;
   992                           
   993                           	psect	text1
   994  000690                     __ptext1:
   995                           	opt stack 0
   996  000690                     _sprintf:
   997                           	opt stack 27
   998                           
   999                           ;incstack = 0
  1000                           ;sprintf@sp stored from wreg
  1001  000690  6E5D               	movwf	sprintf@sp,c
  1002                           
  1003                           ;doprnt.c: 494: va_list ap;
  1004                           ;doprnt.c: 499: signed char c;
  1005                           ;doprnt.c: 501: int width;
  1006                           ;doprnt.c: 504: int prec;
  1007                           ;doprnt.c: 508: unsigned short flag;
  1008                           ;doprnt.c: 515: char d;
  1009                           ;doprnt.c: 516: double fval;
  1010                           ;doprnt.c: 517: int exp;
  1011                           ;doprnt.c: 523: union {
  1012                           ;doprnt.c: 524: unsigned long vd;
  1013                           ;doprnt.c: 525: double integ;
  1014                           ;doprnt.c: 526: } tmpval;
  1015                           ;doprnt.c: 528: unsigned long val;
  1016                           ;doprnt.c: 529: unsigned len;
  1017                           ;doprnt.c: 530: const char * cp;
  1018                           ;doprnt.c: 533: *ap = __va_start();
  1019  000692  0E3F               	movlw	low (?_sprintf+1)
  1020  000694  6E4B               	movwf	sprintf@ap,c
  1021                           
  1022                           ;doprnt.c: 536: while(c = *f++) {
  1023  000696  D2EC               	goto	l3044
  1024  000698                     l2798:
  1025                           
  1026                           ;doprnt.c: 538: if(c != '%')
  1027  000698  0E25               	movlw	37
  1028  00069A  1860               	xorwf	sprintf@c,w,c
  1029  00069C  E007               	bz	l292
  1030                           
  1031                           ;doprnt.c: 540: {
  1032                           ;doprnt.c: 541: ((*sp++ = (c)));
  1033  00069E  505D               	movf	sprintf@sp,w,c
  1034  0006A0  6ED9               	movwf	fsr2l,c
  1035  0006A2  6ADA               	clrf	fsr2h,c
  1036  0006A4  C060  FFDF         	movff	sprintf@c,indf2
  1037  0006A8                     l2802:
  1038  0006A8  2A5D               	incf	sprintf@sp,f,c
  1039                           
  1040                           ;doprnt.c: 542: continue;
  1041  0006AA  D2E2               	goto	l3044
  1042  0006AC                     l292:
  1043                           
  1044                           ;doprnt.c: 543: }
  1045                           ;doprnt.c: 546: width = 0;
  1046  0006AC  6A52               	clrf	sprintf@width,c
  1047  0006AE  6A53               	clrf	sprintf@width+1,c
  1048                           
  1049                           ;doprnt.c: 548: flag = 0;
  1050  0006B0  6A50               	clrf	sprintf@flag,c
  1051  0006B2  6A51               	clrf	sprintf@flag+1,c
  1052                           
  1053                           ;doprnt.c: 597: if(isdigit((unsigned)*f)) {
  1054  0006B4  DB26               	call	PL12	;call to abstracted procedure
  1055  0006B6  EC5C  F00F         	call	_isdigit
  1056  0006BA  E322               	bnc	l2816
  1057                           
  1058                           ;doprnt.c: 598: width = 0;
  1059  0006BC  6A52               	clrf	sprintf@width,c
  1060  0006BE  6A53               	clrf	sprintf@width+1,c
  1061  0006C0                     l2808:
  1062                           
  1063                           ;doprnt.c: 600: width *= 10;
  1064  0006C0  C052  F001         	movff	sprintf@width,___wmul@multiplier
  1065  0006C4  C053  F002         	movff	sprintf@width+1,___wmul@multiplier+1
  1066  0006C8  6A04               	clrf	___wmul@multiplicand+1,c
  1067  0006CA  0E0A               	movlw	10
  1068  0006CC  6E03               	movwf	___wmul@multiplicand,c
  1069  0006CE  EC36  F00F         	call	___wmul	;wreg free
  1070  0006D2  C001  F052         	movff	?___wmul,sprintf@width
  1071  0006D6  C002  F053         	movff	?___wmul+1,sprintf@width+1
  1072                           
  1073                           ;doprnt.c: 601: width += *f++ - '0';
  1074  0006DA  0ED0               	movlw	208
  1075  0006DC  6E42               	movwf	??_sprintf& (0+255),c
  1076  0006DE  6843               	setf	(??_sprintf+1)& (0+255),c
  1077  0006E0  DB10               	call	PL12	;call to abstracted procedure
  1078  0006E2  6E44               	movwf	(??_sprintf+2)& (0+255),c
  1079  0006E4  6A45               	clrf	(??_sprintf+3)& (0+255),c
  1080  0006E6  5042               	movf	??_sprintf,w,c
  1081  0006E8  2644               	addwf	??_sprintf+2,f,c
  1082  0006EA  5043               	movf	??_sprintf+1,w,c
  1083  0006EC  2245               	addwfc	??_sprintf+3,f,c
  1084  0006EE  5044               	movf	??_sprintf+2,w,c
  1085  0006F0  2652               	addwf	sprintf@width,f,c
  1086  0006F2  5045               	movf	??_sprintf+3,w,c
  1087  0006F4  2253               	addwfc	sprintf@width+1,f,c
  1088  0006F6  2A3E               	incf	sprintf@f,f,c
  1089                           
  1090                           ;doprnt.c: 602: } while(isdigit((unsigned)*f));
  1091  0006F8  DB04               	call	PL12	;call to abstracted procedure
  1092  0006FA  EC5C  F00F         	call	_isdigit
  1093  0006FE  E2E0               	bc	l2808
  1094  000700                     l2816:
  1095                           
  1096                           ;doprnt.c: 608: }
  1097                           ;doprnt.c: 611: if(*f == '.') {
  1098  000700  DB00               	call	PL12	;call to abstracted procedure
  1099  000702  0A2E               	xorlw	46
  1100  000704  E11E               	bnz	l296
  1101                           
  1102                           ;doprnt.c: 612: flag |= 0x4000;
  1103  000706  8C51               	bsf	sprintf@flag+1,6,c
  1104                           
  1105                           ;doprnt.c: 613: f++;
  1106  000708  2A3E               	incf	sprintf@f,f,c
  1107                           
  1108                           ;doprnt.c: 620: {
  1109                           ;doprnt.c: 621: prec = 0;
  1110  00070A  6A5E               	clrf	sprintf@prec,c
  1111  00070C  6A5F               	clrf	sprintf@prec+1,c
  1112                           
  1113                           ;doprnt.c: 622: while(isdigit((unsigned)*f))
  1114  00070E  D014               	goto	l2826
  1115  000710                     l2822:
  1116                           
  1117                           ;doprnt.c: 623: prec = prec*10 + *f++ - '0';
  1118  000710  C05E  F001         	movff	sprintf@prec,___wmul@multiplier
  1119  000714  C05F  F002         	movff	sprintf@prec+1,___wmul@multiplier+1
  1120  000718  6A04               	clrf	___wmul@multiplicand+1,c
  1121  00071A  0E0A               	movlw	10
  1122  00071C  6E03               	movwf	___wmul@multiplicand,c
  1123  00071E  EC36  F00F         	call	___wmul	;wreg free
  1124  000722  DAEF               	call	PL12	;call to abstracted procedure
  1125  000724  2601               	addwf	?___wmul,f,c
  1126  000726  0E00               	movlw	0
  1127  000728  2202               	addwfc	?___wmul+1,f,c
  1128  00072A  0ED0               	movlw	208
  1129  00072C  2401               	addwf	?___wmul,w,c
  1130  00072E  6E5E               	movwf	sprintf@prec,c
  1131  000730  0EFF               	movlw	255
  1132  000732  2002               	addwfc	?___wmul+1,w,c
  1133  000734  6E5F               	movwf	sprintf@prec+1,c
  1134  000736  2A3E               	incf	sprintf@f,f,c
  1135  000738                     l2826:
  1136  000738  DAE4               	call	PL12	;call to abstracted procedure
  1137  00073A  EC5C  F00F         	call	_isdigit
  1138  00073E  E307               	bnc	l2834
  1139  000740  D7E7               	goto	l2822
  1140  000742                     l296:
  1141                           
  1142                           ;doprnt.c: 626: prec = 0;
  1143  000742  6A5E               	clrf	sprintf@prec,c
  1144  000744  6A5F               	clrf	sprintf@prec+1,c
  1145                           
  1146                           ;doprnt.c: 628: flag |= 0x1000;
  1147  000746  8851               	bsf	sprintf@flag+1,4,c
  1148  000748  D002               	goto	l2834
  1149  00074A                     l2830:
  1150                           
  1151                           ;doprnt.c: 663: flag |= 0x400;
  1152  00074A  8451               	bsf	sprintf@flag+1,2,c
  1153                           
  1154                           ;doprnt.c: 664: break;
  1155  00074C  D008               	goto	l2836
  1156  00074E                     l2834:
  1157  00074E  2A3E               	incf	sprintf@f,f,c
  1158  000750  043E               	decf	sprintf@f,w,c
  1159  000752  DADE               	call	PL20	;call to abstracted procedure
  1160                           
  1161                           ; Switch size 1, requested type "space"
  1162                           ; Number of cases is 2, Range of values is 0 to 102
  1163                           ; switch strategies available:
  1164                           ; Name         Instructions Cycles
  1165                           ; simple_byte            7     4 (average)
  1166                           ;	Chosen strategy is simple_byte
  1167  000754  E101 D291          	bz	l3046
  1168  000758  0A66               	xorlw	102	; case 102
  1169  00075A  E0F7               	bz	l2830
  1170  00075C  D289               	goto	l3044
  1171  00075E                     l2836:
  1172                           
  1173                           ;doprnt.c: 825: if(flag & (0x700)) {
  1174  00075E  0E07               	movlw	7
  1175  000760  1451               	andwf	sprintf@flag+1,w,c
  1176  000762  E101 D21A          	bz	l3000
  1177                           
  1178                           ;doprnt.c: 827: if(flag & 0x1000)
  1179  000766  A851               	btfss	sprintf@flag+1,4,c
  1180  000768  D003               	goto	l2842
  1181                           
  1182                           ;doprnt.c: 829: prec = 6;
  1183  00076A  6A5F               	clrf	sprintf@prec+1,c
  1184  00076C  0E06               	movlw	6
  1185  00076E  6E5E               	movwf	sprintf@prec,c
  1186  000770                     l2842:
  1187                           
  1188                           ;doprnt.c: 830: fval = (*(double *)__va_arg((*(double **)ap), (double)0));
  1189  000770  504B               	movf	sprintf@ap,w,c
  1190  000772  6ED9               	movwf	fsr2l,c
  1191  000774  6ADA               	clrf	fsr2h,c
  1192  000776  CFDE F05A          	movff	postinc2,sprintf@fval
  1193  00077A  CFDE F05B          	movff	postinc2,sprintf@fval+1
  1194  00077E  CFDD F05C          	movff	postdec2,sprintf@fval+2
  1195  000782  0E03               	movlw	3
  1196  000784  264B               	addwf	sprintf@ap,f,c
  1197                           
  1198                           ;doprnt.c: 831: if(fval < 0.0) {
  1199  000786  AE5C               	btfss	sprintf@fval+2,7,c
  1200  000788  D010               	goto	l2852
  1201                           
  1202                           ;doprnt.c: 832: fval = -fval;
  1203  00078A  C05A  F001         	movff	sprintf@fval,___ftneg@f1
  1204  00078E  C05B  F002         	movff	sprintf@fval+1,___ftneg@f1+1
  1205  000792  C05C  F003         	movff	sprintf@fval+2,___ftneg@f1+2
  1206  000796  EC6A  F00F         	call	___ftneg	;wreg free
  1207  00079A  C001  F05A         	movff	?___ftneg,sprintf@fval
  1208  00079E  C002  F05B         	movff	?___ftneg+1,sprintf@fval+1
  1209  0007A2  C003  F05C         	movff	?___ftneg+2,sprintf@fval+2
  1210                           
  1211                           ;doprnt.c: 833: flag |= 0x03;
  1212  0007A6  0E03               	movlw	3
  1213  0007A8  1250               	iorwf	sprintf@flag,f,c
  1214  0007AA                     l2852:
  1215                           
  1216                           ;doprnt.c: 834: }
  1217                           ;doprnt.c: 835: exp = 0;
  1218  0007AA  6A58               	clrf	sprintf@exp,c
  1219  0007AC  6A59               	clrf	sprintf@exp+1,c
  1220                           
  1221                           ;doprnt.c: 836: if( fval!=0) {
  1222  0007AE  505A               	movf	sprintf@fval,w,c
  1223  0007B0  105B               	iorwf	sprintf@fval+1,w,c
  1224  0007B2  105C               	iorwf	sprintf@fval+2,w,c
  1225  0007B4  E07C               	bz	l2880
  1226                           
  1227                           ;doprnt.c: 837: (void)(*(&exp) = ((*(unsigned long *)&fval >> 15) & 255) - 126);
  1228  0007B6  0E82               	movlw	130
  1229  0007B8  6E42               	movwf	??_sprintf& (0+255),c
  1230  0007BA  6843               	setf	(??_sprintf+1)& (0+255),c
  1231  0007BC  C05A  F044         	movff	sprintf@fval,??_sprintf+2
  1232  0007C0  C05B  F045         	movff	sprintf@fval+1,??_sprintf+3
  1233  0007C4  C05C  F046         	movff	sprintf@fval+2,??_sprintf+4
  1234  0007C8  C05D  F047         	movff	sprintf@fval+3,??_sprintf+5
  1235  0007CC  0E10               	movlw	16
  1236  0007CE  D005               	goto	u2870
  1237  0007D0                     u2875:
  1238  0007D0  90D8               	bcf	status,0,c
  1239  0007D2  3247               	rrcf	??_sprintf+5,f,c
  1240  0007D4  3246               	rrcf	??_sprintf+4,f,c
  1241  0007D6  3245               	rrcf	??_sprintf+3,f,c
  1242  0007D8  3244               	rrcf	??_sprintf+2,f,c
  1243  0007DA                     u2870:
  1244  0007DA  2EE8               	decfsz	wreg,f,c
  1245  0007DC  D7F9               	goto	u2875
  1246  0007DE  5044               	movf	??_sprintf+2,w,c
  1247  0007E0  2442               	addwf	??_sprintf,w,c
  1248  0007E2  6E58               	movwf	sprintf@exp,c
  1249  0007E4  0E00               	movlw	0
  1250  0007E6  2043               	addwfc	??_sprintf+1,w,c
  1251  0007E8  6E59               	movwf	sprintf@exp+1,c
  1252                           
  1253                           ;doprnt.c: 838: exp--;
  1254  0007EA  0658               	decf	sprintf@exp,f,c
  1255  0007EC  A0D8               	btfss	status,0,c
  1256  0007EE  0659               	decf	sprintf@exp+1,f,c
  1257                           
  1258                           ;doprnt.c: 839: exp *= 3;
  1259  0007F0  C058  F001         	movff	sprintf@exp,___wmul@multiplier
  1260  0007F4  C059  F002         	movff	sprintf@exp+1,___wmul@multiplier+1
  1261  0007F8  6A04               	clrf	___wmul@multiplicand+1,c
  1262  0007FA  0E03               	movlw	3
  1263  0007FC  6E03               	movwf	___wmul@multiplicand,c
  1264  0007FE  EC36  F00F         	call	___wmul	;wreg free
  1265  000802  C001  F058         	movff	?___wmul,sprintf@exp
  1266  000806  C002  F059         	movff	?___wmul+1,sprintf@exp+1
  1267                           
  1268                           ;doprnt.c: 840: exp /= 10;
  1269  00080A  C058  F007         	movff	sprintf@exp,___awdiv@dividend
  1270  00080E  C059  F008         	movff	sprintf@exp+1,___awdiv@dividend+1
  1271  000812  6A0A               	clrf	___awdiv@divisor+1,c
  1272  000814  0E0A               	movlw	10
  1273  000816  6E09               	movwf	___awdiv@divisor,c
  1274  000818  EC18  F00D         	call	___awdiv	;wreg free
  1275  00081C  C007  F058         	movff	?___awdiv,sprintf@exp
  1276  000820  C008  F059         	movff	?___awdiv+1,sprintf@exp+1
  1277                           
  1278                           ;doprnt.c: 841: if(exp < 0)
  1279  000824  AE59               	btfss	sprintf@exp+1,7,c
  1280  000826  D003               	goto	l2868
  1281                           
  1282                           ;doprnt.c: 842: exp--;
  1283  000828  0658               	decf	sprintf@exp,f,c
  1284  00082A  A0D8               	btfss	status,0,c
  1285  00082C  0659               	decf	sprintf@exp+1,f,c
  1286  00082E                     l2868:
  1287                           
  1288                           ;doprnt.c: 846: tmpval.integ = scale(-exp);
  1289  00082E  5058               	movf	sprintf@exp,w,c
  1290  000830  0800               	sublw	0
  1291  000832  ECAE  F006         	call	_scale
  1292  000836  C01E  F054         	movff	?_scale,sprintf@tmpval
  1293  00083A  C01F  F055         	movff	?_scale+1,sprintf@tmpval+1
  1294  00083E  C020  F056         	movff	?_scale+2,sprintf@tmpval+2
  1295                           
  1296                           ;doprnt.c: 847: tmpval.integ *= fval;
  1297  000842  C054  F00F         	movff	sprintf@tmpval,___ftmul@f1
  1298  000846  C055  F010         	movff	sprintf@tmpval+1,___ftmul@f1+1
  1299  00084A  C056  F011         	movff	sprintf@tmpval+2,___ftmul@f1+2
  1300  00084E  C05A  F012         	movff	sprintf@fval,___ftmul@f2
  1301  000852  C05B  F013         	movff	sprintf@fval+1,___ftmul@f2+1
  1302  000856  C05C  F014         	movff	sprintf@fval+2,___ftmul@f2+2
  1303  00085A  EC73  F00A         	call	___ftmul	;wreg free
  1304  00085E  C00F  F054         	movff	?___ftmul,sprintf@tmpval
  1305  000862  C010  F055         	movff	?___ftmul+1,sprintf@tmpval+1
  1306  000866  C011  F056         	movff	?___ftmul+2,sprintf@tmpval+2
  1307                           
  1308                           ;doprnt.c: 848: if(tmpval.integ < 1.0)
  1309  00086A  C054  F001         	movff	sprintf@tmpval,___ftge@ff1
  1310  00086E  C055  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1311  000872  C056  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1312  000876  6A04               	clrf	___ftge@ff2,c
  1313  000878  0E80               	movlw	128
  1314  00087A  6E05               	movwf	___ftge@ff2+1,c
  1315  00087C  0E3F               	movlw	63
  1316  00087E  6E06               	movwf	___ftge@ff2+2,c
  1317  000880  EC21  F00E         	call	___ftge	;wreg free
  1318  000884  E204               	bc	l2876
  1319                           
  1320                           ;doprnt.c: 849: exp--;
  1321  000886  0658               	decf	sprintf@exp,f,c
  1322  000888  A0D8               	btfss	status,0,c
  1323  00088A  0659               	decf	sprintf@exp+1,f,c
  1324  00088C  D010               	goto	l2880
  1325  00088E                     l2876:
  1326                           
  1327                           ;doprnt.c: 850: else if(tmpval.integ >= 10.0)
  1328  00088E  C054  F001         	movff	sprintf@tmpval,___ftge@ff1
  1329  000892  C055  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1330  000896  C056  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1331  00089A  6A04               	clrf	___ftge@ff2,c
  1332  00089C  0E20               	movlw	32
  1333  00089E  6E05               	movwf	___ftge@ff2+1,c
  1334  0008A0  0E41               	movlw	65
  1335  0008A2  6E06               	movwf	___ftge@ff2+2,c
  1336  0008A4  EC21  F00E         	call	___ftge	;wreg free
  1337  0008A8  E302               	bnc	l2880
  1338                           
  1339                           ;doprnt.c: 851: exp++;
  1340  0008AA  4A58               	infsnz	sprintf@exp,f,c
  1341  0008AC  2A59               	incf	sprintf@exp+1,f,c
  1342  0008AE                     l2880:
  1343                           
  1344                           ;doprnt.c: 852: }
  1345                           ;doprnt.c: 1112: if(prec <= 12)
  1346  0008AE  BE5F               	btfsc	sprintf@prec+1,7,c
  1347  0008B0  D005               	goto	l2882
  1348  0008B2  505F               	movf	sprintf@prec+1,w,c
  1349  0008B4  E11A               	bnz	l2884
  1350  0008B6  0E0D               	movlw	13
  1351  0008B8  5C5E               	subwf	sprintf@prec,w,c
  1352  0008BA  E217               	bc	l2884
  1353  0008BC                     l2882:
  1354                           
  1355                           ;doprnt.c: 1113: fval += fround(prec);
  1356  0008BC  C05A  F02C         	movff	sprintf@fval,___ftadd@f1
  1357  0008C0  C05B  F02D         	movff	sprintf@fval+1,___ftadd@f1+1
  1358  0008C4  C05C  F02E         	movff	sprintf@fval+2,___ftadd@f1+2
  1359  0008C8  505E               	movf	sprintf@prec,w,c
  1360  0008CA  ECE3  F007         	call	_fround
  1361  0008CE  C01E  F02F         	movff	?_fround,___ftadd@f2
  1362  0008D2  C01F  F030         	movff	?_fround+1,___ftadd@f2+1
  1363  0008D6  C020  F031         	movff	?_fround+2,___ftadd@f2+2
  1364  0008DA  EC8C  F008         	call	___ftadd	;wreg free
  1365  0008DE  C02C  F05A         	movff	?___ftadd,sprintf@fval
  1366  0008E2  C02D  F05B         	movff	?___ftadd+1,sprintf@fval+1
  1367  0008E6  C02E  F05C         	movff	?___ftadd+2,sprintf@fval+2
  1368  0008EA                     l2884:
  1369                           
  1370                           ;doprnt.c: 1116: if((exp > 9)||(fval != 0 && (unsigned long)fval == 0 && exp > 1)) {
  1371  0008EA  BE59               	btfsc	sprintf@exp+1,7,c
  1372  0008EC  D005               	goto	l2886
  1373  0008EE  5059               	movf	sprintf@exp+1,w,c
  1374  0008F0  E11B               	bnz	l2892
  1375  0008F2  0E0A               	movlw	10
  1376  0008F4  5C58               	subwf	sprintf@exp,w,c
  1377  0008F6  E218               	bc	l2892
  1378  0008F8                     l2886:
  1379  0008F8  505A               	movf	sprintf@fval,w,c
  1380  0008FA  105B               	iorwf	sprintf@fval+1,w,c
  1381  0008FC  105C               	iorwf	sprintf@fval+2,w,c
  1382  0008FE  E04B               	bz	l2906
  1383  000900  C05A  F029         	movff	sprintf@fval,___fttol@f1
  1384  000904  C05B  F02A         	movff	sprintf@fval+1,___fttol@f1+1
  1385  000908  C05C  F02B         	movff	sprintf@fval+2,___fttol@f1+2
  1386  00090C  EC95  F00B         	call	___fttol	;wreg free
  1387  000910  5029               	movf	?___fttol,w,c
  1388  000912  102A               	iorwf	?___fttol+1,w,c
  1389  000914  102B               	iorwf	?___fttol+2,w,c
  1390  000916  102C               	iorwf	?___fttol+3,w,c
  1391  000918  B4D8               	btfsc	status,2,c
  1392  00091A  BE59               	btfsc	sprintf@exp+1,7,c
  1393  00091C  D03C               	goto	l2906
  1394  00091E  5059               	movf	sprintf@exp+1,w,c
  1395  000920  E103               	bnz	u2950
  1396  000922  0E02               	movlw	2
  1397  000924  5C58               	subwf	sprintf@exp,w,c
  1398  000926  E337               	bnc	l2906
  1399  000928                     u2950:
  1400  000928                     l2892:
  1401                           
  1402                           ;doprnt.c: 1120: if(tmpval.integ < 4.294967296){
  1403  000928  C054  F001         	movff	sprintf@tmpval,___ftge@ff1
  1404  00092C  C055  F002         	movff	sprintf@tmpval+1,___ftge@ff1+1
  1405  000930  C056  F003         	movff	sprintf@tmpval+2,___ftge@ff1+2
  1406  000934  0E70               	movlw	112
  1407  000936  6E04               	movwf	___ftge@ff2,c
  1408  000938  0E89               	movlw	137
  1409  00093A  6E05               	movwf	___ftge@ff2+1,c
  1410  00093C  0E40               	movlw	64
  1411  00093E  6E06               	movwf	___ftge@ff2+2,c
  1412  000940  EC21  F00E         	call	___ftge	;wreg free
  1413                           
  1414                           ;doprnt.c: 1121: exp -= (sizeof dpowers/sizeof dpowers[0])-1;
  1415  000944  0EF7               	movlw	247
  1416  000946  B0D8               	btfsc	status,0,c
  1417                           
  1418                           ;doprnt.c: 1123: exp -= (sizeof dpowers/sizeof dpowers[0])-2;
  1419                           
  1420                           ;doprnt.c: 1122: }else{
  1421  000948  0EF8               	movlw	248
  1422  00094A  2658               	addwf	sprintf@exp,f,c
  1423  00094C  0EFF               	movlw	255
  1424  00094E  2259               	addwfc	sprintf@exp+1,f,c
  1425                           
  1426                           ;doprnt.c: 1124: }
  1427                           ;doprnt.c: 1125: tmpval.integ = scale(exp);
  1428  000950  5058               	movf	sprintf@exp,w,c
  1429  000952  ECAE  F006         	call	_scale
  1430  000956  C01E  F054         	movff	?_scale,sprintf@tmpval
  1431  00095A  C01F  F055         	movff	?_scale+1,sprintf@tmpval+1
  1432  00095E  C020  F056         	movff	?_scale+2,sprintf@tmpval+2
  1433                           
  1434                           ;doprnt.c: 1126: val = ((sizeof(double)== 3) ? _tdiv_to_l_(fval,tmpval.integ) : _div_to_
      +                          l_(fval,tmpval.integ));
  1435  000962  C05A  F001         	movff	sprintf@fval,__tdiv_to_l_@f1
  1436  000966  C05B  F002         	movff	sprintf@fval+1,__tdiv_to_l_@f1+1
  1437  00096A  C05C  F003         	movff	sprintf@fval+2,__tdiv_to_l_@f1+2
  1438  00096E  C054  F004         	movff	sprintf@tmpval,__tdiv_to_l_@f2
  1439  000972  C055  F005         	movff	sprintf@tmpval+1,__tdiv_to_l_@f2+1
  1440  000976  C056  F006         	movff	sprintf@tmpval+2,__tdiv_to_l_@f2+2
  1441  00097A  EC0B  F00A         	call	__tdiv_to_l_	;wreg free
  1442  00097E  C001  F04C         	movff	?__tdiv_to_l_,sprintf@val
  1443  000982  C002  F04D         	movff	?__tdiv_to_l_+1,sprintf@val+1
  1444  000986  C003  F04E         	movff	?__tdiv_to_l_+2,sprintf@val+2
  1445  00098A  C004  F04F         	movff	?__tdiv_to_l_+3,sprintf@val+3
  1446                           
  1447                           ;doprnt.c: 1129: fval = 0.0;
  1448  00098E  6A5A               	clrf	sprintf@fval,c
  1449  000990  6A5B               	clrf	sprintf@fval+1,c
  1450  000992  6A5C               	clrf	sprintf@fval+2,c
  1451                           
  1452                           ;doprnt.c: 1130: } else {
  1453  000994  D030               	goto	l2910
  1454  000996                     l2906:
  1455                           
  1456                           ;doprnt.c: 1131: val = (unsigned long)fval;
  1457  000996  C05A  F029         	movff	sprintf@fval,___fttol@f1
  1458  00099A  C05B  F02A         	movff	sprintf@fval+1,___fttol@f1+1
  1459  00099E  C05C  F02B         	movff	sprintf@fval+2,___fttol@f1+2
  1460  0009A2  EC95  F00B         	call	___fttol	;wreg free
  1461  0009A6  C029  F04C         	movff	?___fttol,sprintf@val
  1462  0009AA  C02A  F04D         	movff	?___fttol+1,sprintf@val+1
  1463  0009AE  C02B  F04E         	movff	?___fttol+2,sprintf@val+2
  1464  0009B2  C02C  F04F         	movff	?___fttol+3,sprintf@val+3
  1465                           
  1466                           ;doprnt.c: 1132: fval -= (double)val;
  1467  0009B6  C05A  F038         	movff	sprintf@fval,___ftsub@f1
  1468  0009BA  C05B  F039         	movff	sprintf@fval+1,___ftsub@f1+1
  1469  0009BE  C05C  F03A         	movff	sprintf@fval+2,___ftsub@f1+2
  1470  0009C2  C04C  F009         	movff	sprintf@val,___lltoft@c
  1471  0009C6  C04D  F00A         	movff	sprintf@val+1,___lltoft@c+1
  1472  0009CA  C04E  F00B         	movff	sprintf@val+2,___lltoft@c+2
  1473  0009CE  C04F  F00C         	movff	sprintf@val+3,___lltoft@c+3
  1474  0009D2  EC78  F00E         	call	___lltoft	;wreg free
  1475  0009D6  C009  F03B         	movff	?___lltoft,___ftsub@f2
  1476  0009DA  C00A  F03C         	movff	?___lltoft+1,___ftsub@f2+1
  1477  0009DE  C00B  F03D         	movff	?___lltoft+2,___ftsub@f2+2
  1478  0009E2  ECBD  F00E         	call	___ftsub	;wreg free
  1479  0009E6  C038  F05A         	movff	?___ftsub,sprintf@fval
  1480  0009EA  C039  F05B         	movff	?___ftsub+1,sprintf@fval+1
  1481  0009EE  C03A  F05C         	movff	?___ftsub+2,sprintf@fval+2
  1482                           
  1483                           ;doprnt.c: 1133: exp = 0;
  1484  0009F2  6A58               	clrf	sprintf@exp,c
  1485  0009F4  6A59               	clrf	sprintf@exp+1,c
  1486  0009F6                     l2910:
  1487                           
  1488                           ;doprnt.c: 1134: }
  1489                           ;doprnt.c: 1136: for(c = 1 ; c != (sizeof dpowers/sizeof dpowers[0]) ; c++)
  1490  0009F6  0E01               	movlw	1
  1491  0009F8  6E60               	movwf	sprintf@c,c
  1492  0009FA                     l2916:
  1493                           
  1494                           ;doprnt.c: 1137: if(val < dpowers[c])
  1495  0009FA  D962               	call	PL8	;call to abstracted procedure
  1496  0009FC  50F5               	movf	tablat,w,c
  1497  0009FE  5C4C               	subwf	sprintf@val,w,c
  1498  000A00  0009               	tblrd		*+
  1499  000A02  50F5               	movf	tablat,w,c
  1500  000A04  584D               	subwfb	sprintf@val+1,w,c
  1501  000A06  0009               	tblrd		*+
  1502  000A08  50F5               	movf	tablat,w,c
  1503  000A0A  584E               	subwfb	sprintf@val+2,w,c
  1504  000A0C  0009               	tblrd		*+
  1505  000A0E  50F5               	movf	tablat,w,c
  1506  000A10  584F               	subwfb	sprintf@val+3,w,c
  1507  000A12  E304               	bnc	l2924
  1508  000A14  2A60               	incf	sprintf@c,f,c
  1509  000A16  0E0A               	movlw	10
  1510  000A18  1860               	xorwf	sprintf@c,w,c
  1511  000A1A  E1EF               	bnz	l2916
  1512  000A1C                     l2924:
  1513                           
  1514                           ;doprnt.c: 1142: width -= prec + c + exp;
  1515  000A1C  C060  F042         	movff	sprintf@c,??_sprintf
  1516  000A20  6A43               	clrf	(??_sprintf+1)& (0+255),c
  1517  000A22  BE42               	btfsc	??_sprintf& (0+255),7,c
  1518  000A24  0643               	decf	(??_sprintf+1)& (0+255),f,c
  1519  000A26  505E               	movf	sprintf@prec,w,c
  1520  000A28  2642               	addwf	??_sprintf,f,c
  1521  000A2A  505F               	movf	sprintf@prec+1,w,c
  1522  000A2C  2243               	addwfc	??_sprintf+1,f,c
  1523  000A2E  5058               	movf	sprintf@exp,w,c
  1524  000A30  2642               	addwf	??_sprintf,f,c
  1525  000A32  5059               	movf	sprintf@exp+1,w,c
  1526  000A34  2243               	addwfc	??_sprintf+1,f,c
  1527  000A36  5042               	movf	??_sprintf,w,c
  1528  000A38  5E52               	subwf	sprintf@width,f,c
  1529  000A3A  5043               	movf	??_sprintf+1,w,c
  1530  000A3C  5A53               	subwfb	sprintf@width+1,f,c
  1531                           
  1532                           ;doprnt.c: 1143: if(
  1533                           ;doprnt.c: 1147: prec)
  1534  000A3E  505E               	movf	sprintf@prec,w,c
  1535  000A40  105F               	iorwf	sprintf@prec+1,w,c
  1536  000A42  E003               	bz	l2928
  1537                           
  1538                           ;doprnt.c: 1148: width--;
  1539  000A44  0652               	decf	sprintf@width,f,c
  1540  000A46  A0D8               	btfss	status,0,c
  1541  000A48  0653               	decf	sprintf@width+1,f,c
  1542  000A4A                     l2928:
  1543                           
  1544                           ;doprnt.c: 1149: if(flag & 0x03)
  1545  000A4A  C050  F042         	movff	sprintf@flag,??_sprintf
  1546  000A4E  0E03               	movlw	3
  1547  000A50  1642               	andwf	??_sprintf,f,c
  1548  000A52  E006               	bz	l2938
  1549  000A54                     l2930:
  1550                           
  1551                           ;doprnt.c: 1150: width--;
  1552  000A54  0652               	decf	sprintf@width,f,c
  1553  000A56  A0D8               	btfss	status,0,c
  1554  000A58  0653               	decf	sprintf@width+1,f,c
  1555  000A5A  D002               	goto	l2938
  1556  000A5C                     l2932:
  1557                           
  1558                           ;doprnt.c: 1181: ((*sp++ = (' ')));
  1559  000A5C  D971               	call	PL54	;call to abstracted procedure
  1560  000A5E  D7FA               	goto	l2930
  1561  000A60                     l2938:
  1562  000A60  BE53               	btfsc	sprintf@width+1,7,c
  1563  000A62  D004               	goto	l2940
  1564  000A64  5053               	movf	sprintf@width+1,w,c
  1565  000A66  E1FA               	bnz	l2932
  1566  000A68  0452               	decf	sprintf@width,w,c
  1567  000A6A  E2F8               	bc	l2932
  1568  000A6C                     l2940:
  1569                           
  1570                           ;doprnt.c: 1183: }
  1571                           ;doprnt.c: 1188: if(flag & 0x03)
  1572  000A6C  C050  F042         	movff	sprintf@flag,??_sprintf
  1573  000A70  0E03               	movlw	3
  1574  000A72  1642               	andwf	??_sprintf,f,c
  1575  000A74  E00F               	bz	l2954
  1576                           
  1577                           ;doprnt.c: 1190: ((*sp++ = ('-')));
  1578  000A76  505D               	movf	sprintf@sp,w,c
  1579  000A78  6ED9               	movwf	fsr2l,c
  1580  000A7A  6ADA               	clrf	fsr2h,c
  1581  000A7C  0E2D               	movlw	45
  1582  000A7E  6EDF               	movwf	indf2,c
  1583  000A80  2A5D               	incf	sprintf@sp,f,c
  1584  000A82  D008               	goto	l2954
  1585  000A84                     l2946:
  1586                           
  1587                           ;doprnt.c: 1200: {
  1588                           ;doprnt.c: 1201: tmpval.vd = val/dpowers[c];
  1589  000A84  D8FF               	call	PL6	;call to abstracted procedure
  1590  000A86  EC54  F00D         	call	___lldiv	;wreg free
  1591                           
  1592                           ;doprnt.c: 1202: tmpval.vd %= 10;
  1593  000A8A  D925               	call	PL10	;call to abstracted procedure
  1594  000A8C  ECC3  F00D         	call	___llmod	;wreg free
  1595                           
  1596                           ;doprnt.c: 1203: ((*sp++ = ('0' + tmpval.vd)));
  1597  000A90  D949               	call	PL26	;call to abstracted procedure
  1598  000A92  D7F5               	goto	L2
  1599  000A94                     l2954:
  1600  000A94  0660               	decf	sprintf@c,f,c
  1601  000A96  2860               	incf	sprintf@c,w,c
  1602  000A98  E005               	bz	l2962
  1603  000A9A  D7F4               	goto	l2946
  1604  000A9C                     l2956:
  1605                           
  1606                           ;doprnt.c: 1208: ((*sp++ = ('0')));
  1607  000A9C  D958               	call	PL60	;call to abstracted procedure
  1608                           
  1609                           ;doprnt.c: 1209: exp--;
  1610  000A9E  0658               	decf	sprintf@exp,f,c
  1611  000AA0  A0D8               	btfss	status,0,c
  1612  000AA2  0659               	decf	sprintf@exp+1,f,c
  1613  000AA4                     l2962:
  1614  000AA4  BE59               	btfsc	sprintf@exp+1,7,c
  1615  000AA6  D004               	goto	l2964
  1616  000AA8  5059               	movf	sprintf@exp+1,w,c
  1617  000AAA  E1F8               	bnz	l2956
  1618  000AAC  0458               	decf	sprintf@exp,w,c
  1619  000AAE  E2F6               	bc	l2956
  1620  000AB0                     l2964:
  1621                           
  1622                           ;doprnt.c: 1210: }
  1623                           ;doprnt.c: 1211: if(prec > (int)((sizeof dpowers/sizeof dpowers[0])-2))
  1624  000AB0  BE5F               	btfsc	sprintf@prec+1,7,c
  1625  000AB2  D008               	goto	l341
  1626  000AB4  505F               	movf	sprintf@prec+1,w,c
  1627  000AB6  E103               	bnz	u3050
  1628  000AB8  0E09               	movlw	9
  1629  000ABA  5C5E               	subwf	sprintf@prec,w,c
  1630  000ABC  E303               	bnc	l341
  1631  000ABE                     u3050:
  1632                           
  1633                           ;doprnt.c: 1212: c = (sizeof dpowers/sizeof dpowers[0])-2;
  1634  000ABE  0E08               	movlw	8
  1635  000AC0  6E60               	movwf	sprintf@c,c
  1636  000AC2  D002               	goto	l2968
  1637  000AC4                     l341:
  1638                           
  1639                           ;doprnt.c: 1213: else
  1640                           ;doprnt.c: 1214: c = prec;
  1641  000AC4  C05E  F060         	movff	sprintf@prec,sprintf@c
  1642  000AC8                     l2968:
  1643                           
  1644                           ;doprnt.c: 1215: prec -= c;
  1645  000AC8  5060               	movf	sprintf@c,w,c
  1646  000ACA  5E5E               	subwf	sprintf@prec,f,c
  1647  000ACC  0E00               	movlw	0
  1648  000ACE  BE60               	btfsc	sprintf@c,7,c
  1649  000AD0  0EFF               	movlw	255
  1650  000AD2  5A5F               	subwfb	sprintf@prec+1,f,c
  1651                           
  1652                           ;doprnt.c: 1219: if(c)
  1653  000AD4  5060               	movf	sprintf@c,w,c
  1654  000AD6  E006               	bz	l2976
  1655                           
  1656                           ;doprnt.c: 1221: ((*sp++ = ('.')));
  1657  000AD8  505D               	movf	sprintf@sp,w,c
  1658  000ADA  6ED9               	movwf	fsr2l,c
  1659  000ADC  6ADA               	clrf	fsr2h,c
  1660  000ADE  0E2E               	movlw	46
  1661  000AE0  6EDF               	movwf	indf2,c
  1662  000AE2  2A5D               	incf	sprintf@sp,f,c
  1663  000AE4                     l2976:
  1664                           
  1665                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1666  000AE4  5060               	movf	sprintf@c,w,c
  1667  000AE6  ECAE  F006         	call	_scale
  1668  000AEA  C01E  F048         	movff	?_scale,_sprintf$1240
  1669  000AEE  C01F  F049         	movff	?_scale+1,_sprintf$1240+1
  1670  000AF2  C020  F04A         	movff	?_scale+2,_sprintf$1240+2
  1671                           
  1672                           ;doprnt.c: 1227: val = (long)(fval * scale(c));
  1673  000AF6  C05A  F012         	movff	sprintf@fval,___ftmul@f2
  1674  000AFA  C05B  F013         	movff	sprintf@fval+1,___ftmul@f2+1
  1675  000AFE  C05C  F014         	movff	sprintf@fval+2,___ftmul@f2+2
  1676  000B02  C048  F00F         	movff	_sprintf$1240,___ftmul@f1
  1677  000B06  C049  F010         	movff	_sprintf$1240+1,___ftmul@f1+1
  1678  000B0A  C04A  F011         	movff	_sprintf$1240+2,___ftmul@f1+2
  1679  000B0E  EC73  F00A         	call	___ftmul	;wreg free
  1680  000B12  C00F  F029         	movff	?___ftmul,___fttol@f1
  1681  000B16  C010  F02A         	movff	?___ftmul+1,___fttol@f1+1
  1682  000B1A  C011  F02B         	movff	?___ftmul+2,___fttol@f1+2
  1683  000B1E  EC95  F00B         	call	___fttol	;wreg free
  1684  000B22  C029  F04C         	movff	?___fttol,sprintf@val
  1685  000B26  C02A  F04D         	movff	?___fttol+1,sprintf@val+1
  1686  000B2A  C02B  F04E         	movff	?___fttol+2,sprintf@val+2
  1687  000B2E  C02C  F04F         	movff	?___fttol+3,sprintf@val+3
  1688                           
  1689                           ;doprnt.c: 1228: while(c--) {
  1690  000B32  D027               	goto	l2990
  1691  000B34                     l2980:
  1692                           
  1693                           ;doprnt.c: 1229: tmpval.vd = val/dpowers[c];
  1694  000B34  D8A7               	call	PL6	;call to abstracted procedure
  1695  000B36  EC54  F00D         	call	___lldiv	;wreg free
  1696                           
  1697                           ;doprnt.c: 1230: tmpval.vd %= 10;
  1698  000B3A  D8CD               	call	PL10	;call to abstracted procedure
  1699  000B3C  ECC3  F00D         	call	___llmod	;wreg free
  1700                           
  1701                           ;doprnt.c: 1231: ((*sp++ = ('0' + tmpval.vd)));
  1702  000B40  D8F1               	call	PL26	;call to abstracted procedure
  1703  000B42  6EDF               	movwf	indf2,c
  1704  000B44  2A5D               	incf	sprintf@sp,f,c
  1705                           
  1706                           ;doprnt.c: 1232: val %= dpowers[c];
  1707  000B46  C04C  F001         	movff	sprintf@val,___llmod@dividend
  1708  000B4A  C04D  F002         	movff	sprintf@val+1,___llmod@dividend+1
  1709  000B4E  C04E  F003         	movff	sprintf@val+2,___llmod@dividend+2
  1710  000B52  C04F  F004         	movff	sprintf@val+3,___llmod@dividend+3
  1711  000B56  D8B4               	call	PL8	;call to abstracted procedure
  1712  000B58  CFF5 F005          	movff	tablat,___llmod@divisor
  1713  000B5C  0009               	tblrd		*+
  1714  000B5E  CFF5 F006          	movff	tablat,___llmod@divisor+1
  1715  000B62  0009               	tblrd		*+
  1716  000B64  CFF5 F007          	movff	tablat,___llmod@divisor+2
  1717  000B68  000A               	tblrd		*-
  1718  000B6A  CFF5 F008          	movff	tablat,___llmod@divisor+3
  1719  000B6E  ECC3  F00D         	call	___llmod	;wreg free
  1720  000B72  C001  F04C         	movff	?___llmod,sprintf@val
  1721  000B76  C002  F04D         	movff	?___llmod+1,sprintf@val+1
  1722  000B7A  C003  F04E         	movff	?___llmod+2,sprintf@val+2
  1723  000B7E  C004  F04F         	movff	?___llmod+3,sprintf@val+3
  1724  000B82                     l2990:
  1725  000B82  0660               	decf	sprintf@c,f,c
  1726  000B84  2860               	incf	sprintf@c,w,c
  1727  000B86  E005               	bz	l2998
  1728  000B88  D7D5               	goto	l2980
  1729  000B8A                     l2992:
  1730                           
  1731                           ;doprnt.c: 1236: ((*sp++ = ('0')));
  1732  000B8A  D8E1               	call	PL60	;call to abstracted procedure
  1733                           
  1734                           ;doprnt.c: 1237: prec--;
  1735  000B8C  065E               	decf	sprintf@prec,f,c
  1736  000B8E  A0D8               	btfss	status,0,c
  1737  000B90  065F               	decf	sprintf@prec+1,f,c
  1738  000B92                     l2998:
  1739  000B92  505E               	movf	sprintf@prec,w,c
  1740  000B94  105F               	iorwf	sprintf@prec+1,w,c
  1741  000B96  E06C               	bz	l3044
  1742  000B98  D7F8               	goto	l2992
  1743  000B9A                     l3000:
  1744                           
  1745                           ;doprnt.c: 1246: }
  1746                           ;doprnt.c: 1290: if(prec == 0 && val == 0)
  1747  000B9A  505E               	movf	sprintf@prec,w,c
  1748  000B9C  105F               	iorwf	sprintf@prec+1,w,c
  1749  000B9E  E107               	bnz	l3006
  1750  000BA0  504C               	movf	sprintf@val,w,c
  1751  000BA2  104D               	iorwf	sprintf@val+1,w,c
  1752  000BA4  104E               	iorwf	sprintf@val+2,w,c
  1753  000BA6  104F               	iorwf	sprintf@val+3,w,c
  1754  000BA8  E102               	bnz	l3006
  1755                           
  1756                           ;doprnt.c: 1291: prec++;
  1757  000BAA  4A5E               	infsnz	sprintf@prec,f,c
  1758  000BAC  2A5F               	incf	sprintf@prec+1,f,c
  1759  000BAE                     l3006:
  1760                           
  1761                           ;doprnt.c: 1339: if(c < prec)
  1762  000BAE  0E80               	movlw	128
  1763  000BB0  BE60               	btfsc	sprintf@c,7,c
  1764  000BB2  0E7F               	movlw	127
  1765  000BB4  6E42               	movwf	??_sprintf& (0+255),c
  1766  000BB6  505E               	movf	sprintf@prec,w,c
  1767  000BB8  5C60               	subwf	sprintf@c,w,c
  1768  000BBA  505F               	movf	sprintf@prec+1,w,c
  1769  000BBC  0A80               	xorlw	128
  1770  000BBE  5842               	subwfb	??_sprintf& (0+255),w,c
  1771  000BC0  E203               	bc	l3010
  1772                           
  1773                           ;doprnt.c: 1340: c = prec;
  1774  000BC2  C05E  F060         	movff	sprintf@prec,sprintf@c
  1775  000BC6  D00F               	goto	l3014
  1776  000BC8                     l3010:
  1777                           
  1778                           ;doprnt.c: 1341: else if(prec < c)
  1779  000BC8  505F               	movf	sprintf@prec+1,w,c
  1780  000BCA  0A80               	xorlw	128
  1781  000BCC  6E42               	movwf	??_sprintf& (0+255),c
  1782  000BCE  5060               	movf	sprintf@c,w,c
  1783  000BD0  5C5E               	subwf	sprintf@prec,w,c
  1784  000BD2  0E80               	movlw	128
  1785  000BD4  BE60               	btfsc	sprintf@c,7,c
  1786  000BD6  0E7F               	movlw	127
  1787  000BD8  5842               	subwfb	??_sprintf& (0+255),w,c
  1788  000BDA  E205               	bc	l3014
  1789                           
  1790                           ;doprnt.c: 1342: prec = c;
  1791  000BDC  5060               	movf	sprintf@c,w,c
  1792  000BDE  6E5E               	movwf	sprintf@prec,c
  1793  000BE0  6A5F               	clrf	sprintf@prec+1,c
  1794  000BE2  BE5E               	btfsc	sprintf@prec,7,c
  1795  000BE4  065F               	decf	sprintf@prec+1,f,c
  1796  000BE6                     l3014:
  1797                           
  1798                           ;doprnt.c: 1345: if(width && flag & 0x03)
  1799  000BE6  5052               	movf	sprintf@width,w,c
  1800  000BE8  1053               	iorwf	sprintf@width+1,w,c
  1801  000BEA  E008               	bz	l3020
  1802  000BEC  C050  F042         	movff	sprintf@flag,??_sprintf
  1803  000BF0  0E03               	movlw	3
  1804  000BF2  1642               	andwf	??_sprintf,f,c
  1805  000BF4  E003               	bz	l3020
  1806                           
  1807                           ;doprnt.c: 1346: width--;
  1808  000BF6  0652               	decf	sprintf@width,f,c
  1809  000BF8  A0D8               	btfss	status,0,c
  1810  000BFA  0653               	decf	sprintf@width+1,f,c
  1811  000BFC                     l3020:
  1812                           
  1813                           ;doprnt.c: 1348: if(flag & 0x4000) {
  1814  000BFC  AC51               	btfss	sprintf@flag+1,6,c
  1815  000BFE  D010               	goto	l3026
  1816                           
  1817                           ;doprnt.c: 1349: if(width > prec)
  1818  000C00  5052               	movf	sprintf@width,w,c
  1819  000C02  5C5E               	subwf	sprintf@prec,w,c
  1820  000C04  505F               	movf	sprintf@prec+1,w,c
  1821  000C06  0A80               	xorlw	128
  1822  000C08  6E42               	movwf	??_sprintf& (0+255),c
  1823  000C0A  5053               	movf	sprintf@width+1,w,c
  1824  000C0C  0A80               	xorlw	128
  1825  000C0E  5842               	subwfb	??_sprintf& (0+255),w,c
  1826  000C10  E205               	bc	l356
  1827                           
  1828                           ;doprnt.c: 1350: width -= prec;
  1829  000C12  505E               	movf	sprintf@prec,w,c
  1830  000C14  5E52               	subwf	sprintf@width,f,c
  1831  000C16  505F               	movf	sprintf@prec+1,w,c
  1832  000C18  5A53               	subwfb	sprintf@width+1,f,c
  1833  000C1A  D002               	goto	l3026
  1834  000C1C                     l356:
  1835                           
  1836                           ;doprnt.c: 1351: else
  1837                           ;doprnt.c: 1352: width = 0;
  1838  000C1C  6A52               	clrf	sprintf@width,c
  1839  000C1E  6A53               	clrf	sprintf@width+1,c
  1840  000C20                     l3026:
  1841                           
  1842                           ;doprnt.c: 1353: }
  1843                           ;doprnt.c: 1381: if(width > c)
  1844  000C20  0E80               	movlw	128
  1845  000C22  BE60               	btfsc	sprintf@c,7,c
  1846  000C24  0E7F               	movlw	127
  1847  000C26  6E42               	movwf	??_sprintf& (0+255),c
  1848  000C28  5052               	movf	sprintf@width,w,c
  1849  000C2A  5C60               	subwf	sprintf@c,w,c
  1850  000C2C  5053               	movf	sprintf@width+1,w,c
  1851  000C2E  0A80               	xorlw	128
  1852  000C30  5842               	subwfb	??_sprintf& (0+255),w,c
  1853  000C32  E207               	bc	l358
  1854                           
  1855                           ;doprnt.c: 1382: width -= c;
  1856  000C34  5060               	movf	sprintf@c,w,c
  1857  000C36  5E52               	subwf	sprintf@width,f,c
  1858  000C38  0E00               	movlw	0
  1859  000C3A  BE60               	btfsc	sprintf@c,7,c
  1860  000C3C  0EFF               	movlw	255
  1861  000C3E  5A53               	subwfb	sprintf@width+1,f,c
  1862  000C40  D002               	goto	l3030
  1863  000C42                     l358:
  1864                           
  1865                           ;doprnt.c: 1383: else
  1866                           ;doprnt.c: 1384: width = 0;
  1867  000C42  6A52               	clrf	sprintf@width,c
  1868  000C44  6A53               	clrf	sprintf@width+1,c
  1869  000C46                     l3030:
  1870                           
  1871                           ;doprnt.c: 1422: {
  1872                           ;doprnt.c: 1424: if(width
  1873                           ;doprnt.c: 1428: )
  1874  000C46  5052               	movf	sprintf@width,w,c
  1875  000C48  1053               	iorwf	sprintf@width+1,w,c
  1876  000C4A  E007               	bz	l3038
  1877  000C4C                     l3032:
  1878                           
  1879                           ;doprnt.c: 1430: ((*sp++ = (' ')));
  1880  000C4C  D879               	call	PL54	;call to abstracted procedure
  1881                           
  1882                           ;doprnt.c: 1431: while(--width);
  1883  000C4E  0652               	decf	sprintf@width,f,c
  1884  000C50  A0D8               	btfss	status,0,c
  1885  000C52  0653               	decf	sprintf@width+1,f,c
  1886  000C54  5052               	movf	sprintf@width,w,c
  1887  000C56  1053               	iorwf	sprintf@width+1,w,c
  1888  000C58  E1F9               	bnz	l3032
  1889  000C5A                     l3038:
  1890                           
  1891                           ;doprnt.c: 1438: if(flag & 0x03)
  1892  000C5A  C050  F042         	movff	sprintf@flag,??_sprintf
  1893  000C5E  0E03               	movlw	3
  1894  000C60  1642               	andwf	??_sprintf,f,c
  1895  000C62  E006               	bz	l3044
  1896                           
  1897                           ;doprnt.c: 1439: ((*sp++ = ('-')));
  1898  000C64  505D               	movf	sprintf@sp,w,c
  1899  000C66  6ED9               	movwf	fsr2l,c
  1900  000C68  6ADA               	clrf	fsr2h,c
  1901  000C6A  0E2D               	movlw	45
  1902  000C6C  6EDF               	movwf	indf2,c
  1903  000C6E  D51C               	goto	l2802
  1904  000C70                     l3044:
  1905  000C70  2A3E               	incf	sprintf@f,f,c
  1906  000C72  043E               	decf	sprintf@f,w,c
  1907  000C74  D84D               	call	PL20	;call to abstracted procedure
  1908  000C76  E001 D50F          	bnz	l2798
  1909  000C7A                     l3046:
  1910                           
  1911                           ;doprnt.c: 1538: *sp = 0;
  1912  000C7A  505D               	movf	sprintf@sp,w,c
  1913  000C7C  6ED9               	movwf	fsr2l,c
  1914  000C7E  6ADA               	clrf	fsr2h,c
  1915  000C80  6ADF               	clrf	indf2,c
  1916  000C82  0C00               	retlw	0	;funcret
  1917  000C84                     __end_of_sprintf:
  1918                           	opt stack 0
  1919  000C84                     PL6:
  1920                           	opt stack 27
  1921  000C84  C04C  F001         	movff	sprintf@val,___lldiv@dividend
  1922  000C88  C04D  F002         	movff	sprintf@val+1,___lldiv@dividend+1
  1923  000C8C  C04E  F003         	movff	sprintf@val+2,___lldiv@dividend+2
  1924  000C90  C04F  F004         	movff	sprintf@val+3,___lldiv@dividend+3
  1925  000C94  5060               	movf	sprintf@c,w,c
  1926  000C96  0D04               	mullw	4
  1927  000C98  50F3               	movf	prodl,w,c
  1928  000C9A  0F4F               	addlw	low _dpowers
  1929  000C9C  6E42               	movwf	??_sprintf& (0+255),c
  1930  000C9E  C042  FFF6         	movff	??_sprintf,tblptrl
  1931  000CA2                     	if	1	;There is more than 1 active tblptr byte
  1932  000CA2  0E06               	movlw	high __smallconst
  1933  000CA4  6EF7               	movwf	tblptrh,c
  1934  000CA6                     	endif
  1935  000CA6                     	if	0	;tblptru may be non-zero
  1936  000CA6                     	endif
  1937  000CA6                     	if	0	;tblptru may be non-zero
  1938  000CA6                     	endif
  1939  000CA6  0009               	tblrd		*+
  1940  000CA8  CFF5 F005          	movff	tablat,___lldiv@divisor
  1941  000CAC  0009               	tblrd		*+
  1942  000CAE  CFF5 F006          	movff	tablat,___lldiv@divisor+1
  1943  000CB2  0009               	tblrd		*+
  1944  000CB4  CFF5 F007          	movff	tablat,___lldiv@divisor+2
  1945  000CB8  000A               	tblrd		*-
  1946  000CBA  CFF5 F008          	movff	tablat,___lldiv@divisor+3
  1947  000CBE  0012               	return	
  1948  000CC0                     __end_ofPL6:
  1949                           	opt stack 0
  1950  000CC0                     PL8:
  1951                           	opt stack 27
  1952  000CC0  5060               	movf	sprintf@c,w,c
  1953  000CC2  0D04               	mullw	4
  1954  000CC4  50F3               	movf	prodl,w,c
  1955  000CC6  0F4F               	addlw	low _dpowers
  1956  000CC8  6E42               	movwf	??_sprintf& (0+255),c
  1957  000CCA  C042  FFF6         	movff	??_sprintf,tblptrl
  1958  000CCE                     	if	1	;There is more than 1 active tblptr byte
  1959  000CCE  0E06               	movlw	high __smallconst
  1960  000CD0  6EF7               	movwf	tblptrh,c
  1961  000CD2                     	endif
  1962  000CD2                     	if	0	;tblptru may be non-zero
  1963  000CD2                     	endif
  1964  000CD2                     	if	0	;tblptru may be non-zero
  1965  000CD2                     	endif
  1966  000CD2  0009               	tblrd		*+
  1967  000CD4  0012               	return	
  1968  000CD6                     __end_ofPL8:
  1969                           	opt stack 0
  1970  000CD6                     PL10:
  1971                           	opt stack 27
  1972  000CD6  C001  F054         	movff	?___lldiv,sprintf@tmpval
  1973  000CDA  C002  F055         	movff	?___lldiv+1,sprintf@tmpval+1
  1974  000CDE  C003  F056         	movff	?___lldiv+2,sprintf@tmpval+2
  1975  000CE2  C004  F057         	movff	?___lldiv+3,sprintf@tmpval+3
  1976  000CE6  C054  F001         	movff	sprintf@tmpval,___llmod@dividend
  1977  000CEA  C055  F002         	movff	sprintf@tmpval+1,___llmod@dividend+1
  1978  000CEE  C056  F003         	movff	sprintf@tmpval+2,___llmod@dividend+2
  1979  000CF2  C057  F004         	movff	sprintf@tmpval+3,___llmod@dividend+3
  1980  000CF6  0E0A               	movlw	10
  1981  000CF8  6E05               	movwf	___llmod@divisor,c
  1982  000CFA  6A06               	clrf	___llmod@divisor+1,c
  1983  000CFC  6A07               	clrf	___llmod@divisor+2,c
  1984  000CFE  6A08               	clrf	___llmod@divisor+3,c
  1985  000D00  0C0A               	retlw	10
  1986  000D02                     __end_ofPL10:
  1987                           	opt stack 0
  1988  000D02                     PL12:
  1989                           	opt stack 27
  1990  000D02  C03E  FFF6         	movff	sprintf@f,tblptrl
  1991  000D06                     	if	1	;There is more than 1 active tblptr byte
  1992  000D06  0E06               	movlw	high __smallconst
  1993  000D08  6EF7               	movwf	tblptrh,c
  1994  000D0A                     	endif
  1995  000D0A                     	if	0	;tblptru may be non-zero
  1996  000D0A                     	endif
  1997  000D0A                     	if	0	;tblptru may be non-zero
  1998  000D0A                     	endif
  1999  000D0A  0008               	tblrd		*
  2000  000D0C  50F5               	movf	tablat,w,c
  2001  000D0E  0012               	return	
  2002  000D10                     __end_ofPL12:
  2003                           	opt stack 0
  2004  000D10                     PL20:
  2005                           	opt stack 27
  2006  000D10  6E42               	movwf	??_sprintf& (0+255),c
  2007  000D12  C042  FFF6         	movff	??_sprintf,tblptrl
  2008  000D16                     	if	1	;There is more than 1 active tblptr byte
  2009  000D16  0E06               	movlw	high __smallconst
  2010  000D18  6EF7               	movwf	tblptrh,c
  2011  000D1A                     	endif
  2012  000D1A                     	if	0	;tblptru may be non-zero
  2013  000D1A                     	endif
  2014  000D1A                     	if	0	;tblptru may be non-zero
  2015  000D1A                     	endif
  2016  000D1A  0008               	tblrd		*
  2017  000D1C  CFF5 F060          	movff	tablat,sprintf@c
  2018  000D20  5060               	movf	sprintf@c,w,c
  2019  000D22  0012               	return	
  2020  000D24                     __end_ofPL20:
  2021                           	opt stack 0
  2022  000D24                     PL26:
  2023                           	opt stack 27
  2024  000D24  C001  F054         	movff	?___llmod,sprintf@tmpval
  2025  000D28  C002  F055         	movff	?___llmod+1,sprintf@tmpval+1
  2026  000D2C  C003  F056         	movff	?___llmod+2,sprintf@tmpval+2
  2027  000D30  C004  F057         	movff	?___llmod+3,sprintf@tmpval+3
  2028  000D34  505D               	movf	sprintf@sp,w,c
  2029  000D36  6ED9               	movwf	fsr2l,c
  2030  000D38  6ADA               	clrf	fsr2h,c
  2031  000D3A  5054               	movf	sprintf@tmpval,w,c
  2032  000D3C  0F30               	addlw	48
  2033  000D3E  0012               	return	
  2034  000D40                     __end_ofPL26:
  2035                           	opt stack 0
  2036  000D40                     PL54:
  2037                           	opt stack 27
  2038  000D40  505D               	movf	sprintf@sp,w,c
  2039  000D42  6ED9               	movwf	fsr2l,c
  2040  000D44  6ADA               	clrf	fsr2h,c
  2041  000D46  0E20               	movlw	32
  2042  000D48  6EDF               	movwf	indf2,c
  2043  000D4A  2A5D               	incf	sprintf@sp,f,c
  2044  000D4C  0C20               	retlw	32
  2045  000D4E                     __end_ofPL54:
  2046                           	opt stack 0
  2047  000D4E                     PL60:
  2048                           	opt stack 27
  2049  000D4E  505D               	movf	sprintf@sp,w,c
  2050  000D50  6ED9               	movwf	fsr2l,c
  2051  000D52  6ADA               	clrf	fsr2h,c
  2052  000D54  0E30               	movlw	48
  2053  000D56  6EDF               	movwf	indf2,c
  2054  000D58  2A5D               	incf	sprintf@sp,f,c
  2055  000D5A  0C30               	retlw	48
  2056  000D5C                     __end_ofPL60:
  2057                           	opt stack 0
  2058                           tblptru	equ	0xFF8
  2059                           tblptrh	equ	0xFF7
  2060                           tblptrl	equ	0xFF6
  2061                           tablat	equ	0xFF5
  2062                           prodh	equ	0xFF4
  2063                           prodl	equ	0xFF3
  2064                           indf0	equ	0xFEF
  2065                           fsr0h	equ	0xFEA
  2066                           fsr0l	equ	0xFE9
  2067                           wreg	equ	0xFE8
  2068                           indf2	equ	0xFDF
  2069                           postinc2	equ	0xFDE
  2070                           postdec2	equ	0xFDD
  2071                           fsr2h	equ	0xFDA
  2072                           fsr2l	equ	0xFD9
  2073                           status	equ	0xFD8
  2074                           
  2075 ;; *************** function _scale *****************
  2076 ;; Defined at:
  2077 ;;		line 425 in file "D:\Arquivos de Programas\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2078 ;; Parameters:    Size  Location     Type
  2079 ;;  scl             1    wreg     char 
  2080 ;; Auto vars:     Size  Location     Type
  2081 ;;  scl             1   39[COMRAM] char 
  2082 ;; Return value:  Size  Location     Type
  2083 ;;                  3   29[COMRAM] char 
  2084 ;; Registers used:
  2085 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2086 ;; Tracked objects:
  2087 ;;		On entry : 0/0
  2088 ;;		On exit  : 0/0
  2089 ;;		Unchanged: 0/0
  2090 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2091 ;;      Params:         3       0       0       0       0       0       0
  2092 ;;      Locals:         4       0       0       0       0       0       0
  2093 ;;      Temps:          4       0       0       0       0       0       0
  2094 ;;      Totals:        11       0       0       0       0       0       0
  2095 ;;Total ram usage:       11 bytes
  2096 ;; Hardware stack levels used:    1
  2097 ;; Hardware stack levels required when called:    2
  2098 ;; This function calls:
  2099 ;;		___awdiv
  2100 ;;		___awmod
  2101 ;;		___ftmul
  2102 ;; This function is called by:
  2103 ;;		_sprintf
  2104 ;; This function uses a non-reentrant model
  2105 ;;
  2106                           
  2107                           	psect	text2
  2108  000D5C                     __ptext2:
  2109                           	opt stack 0
  2110  000D5C                     _scale:
  2111                           	opt stack 27
  2112                           
  2113                           ;incstack = 0
  2114                           ;scale@scl stored from wreg
  2115  000D5C  6E28               	movwf	scale@scl,c
  2116                           
  2117                           ;doprnt.c: 428: if(scl < 0) {
  2118  000D5E  AE28               	btfss	scale@scl,7,c
  2119  000D60  D06C               	goto	l2512
  2120                           
  2121                           ;doprnt.c: 429: scl = -scl;
  2122  000D62  6C28               	negf	scale@scl,c
  2123                           
  2124                           ;doprnt.c: 430: if(scl>=110)
  2125  000D64  5028               	movf	scale@scl,w,c
  2126  000D66  0A80               	xorlw	128
  2127  000D68  0F12               	addlw	-238
  2128  000D6A  E33B               	bnc	l2502
  2129                           
  2130                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2131  000D6C  6A0A               	clrf	___awdiv@divisor+1,c
  2132  000D6E  0E0A               	movlw	10
  2133  000D70  6E09               	movwf	___awdiv@divisor,c
  2134  000D72  6A04               	clrf	___awmod@divisor+1,c
  2135  000D74  0E64               	movlw	100
  2136  000D76  D915               	call	PL38	;call to abstracted procedure
  2137  000D78  BE01               	btfsc	___awmod@dividend,7,c
  2138  000D7A  0602               	decf	___awmod@dividend+1,f,c
  2139  000D7C  EC8F  F00D         	call	___awmod	;wreg free
  2140  000D80  C001  F007         	movff	?___awmod,___awdiv@dividend
  2141  000D84  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2142  000D88  EC18  F00D         	call	___awdiv	;wreg free
  2143  000D8C  D8EC               	call	PL16	;call to abstracted procedure
  2144  000D8E  0F01               	addlw	low __npowers_
  2145  000D90  6E22               	movwf	(??_scale+1)& (0+255),c
  2146  000D92  C022  FFF6         	movff	??_scale+1,tblptrl
  2147  000D96                     	if	1	;There is more than 1 active tblptr byte
  2148  000D96  D8BC               	call	PL2	;call to abstracted procedure
  2149  000D98  6A0A               	clrf	___awdiv@divisor+1,c
  2150  000D9A  0E64               	movlw	100
  2151  000D9C  D90F               	call	PL50	;call to abstracted procedure
  2152  000D9E  BE07               	btfsc	___awdiv@dividend,7,c
  2153  000DA0  0608               	decf	___awdiv@dividend+1,f,c
  2154  000DA2  EC18  F00D         	call	___awdiv	;wreg free
  2155  000DA6  D902               	call	PL48	;call to abstracted procedure
  2156  000DA8  0F01               	addlw	low __npowers_
  2157  000DAA  6E24               	movwf	(??_scale+3)& (0+255),c
  2158  000DAC  C024  FFF6         	movff	??_scale+3,tblptrl
  2159  000DB0                     	if	1	;There is more than 1 active tblptr byte
  2160  000DB0  D8BB               	call	PL4	;call to abstracted procedure
  2161  000DB2  EC73  F00A         	call	___ftmul	;wreg free
  2162                           
  2163                           ;doprnt.c: 431: return _npowers_[scl/100+18] * _npowers_[(scl%100)/10+9] * _npowers_[scl
      +                          %10];
  2164  000DB6  D8C4               	call	PL14	;call to abstracted procedure
  2165  000DB8  BE01               	btfsc	___awmod@dividend,7,c
  2166  000DBA  0602               	decf	___awmod@dividend+1,f,c
  2167  000DBC  EC8F  F00D         	call	___awmod	;wreg free
  2168  000DC0  5001               	movf	?___awmod,w,c
  2169  000DC2  0D03               	mullw	3
  2170  000DC4  50F3               	movf	prodl,w,c
  2171  000DC6  0F01               	addlw	low __npowers_
  2172  000DC8  6E21               	movwf	??_scale& (0+255),c
  2173  000DCA  C021  FFF6         	movff	??_scale,tblptrl
  2174  000DCE                     	if	1	;There is more than 1 active tblptr byte
  2175  000DCE  D8A0               	call	PL2	;call to abstracted procedure
  2176  000DD0  EC73  F00A         	call	___ftmul	;wreg free
  2177  000DD4  C00F  F01E         	movff	?___ftmul,?_scale
  2178  000DD8  C010  F01F         	movff	?___ftmul+1,?_scale+1
  2179  000DDC  C011  F020         	movff	?___ftmul+2,?_scale+2
  2180  000DE0  0012               	return	
  2181  000DE2                     l2502:
  2182                           
  2183                           ;doprnt.c: 432: else if(scl > 10)
  2184  000DE2  5028               	movf	scale@scl,w,c
  2185  000DE4  0A80               	xorlw	128
  2186  000DE6  0F75               	addlw	-139
  2187  000DE8  E323               	bnc	l2508
  2188                           
  2189                           ;doprnt.c: 433: return _npowers_[scl/10+9] * _npowers_[scl%10];
  2190  000DEA  6A0A               	clrf	___awdiv@divisor+1,c
  2191  000DEC  0E0A               	movlw	10
  2192  000DEE  D8E6               	call	PL50	;call to abstracted procedure
  2193  000DF0  BE07               	btfsc	___awdiv@dividend,7,c
  2194  000DF2  0608               	decf	___awdiv@dividend+1,f,c
  2195  000DF4  EC18  F00D         	call	___awdiv	;wreg free
  2196  000DF8  D8B6               	call	PL16	;call to abstracted procedure
  2197  000DFA  0F01               	addlw	low __npowers_
  2198  000DFC  6E22               	movwf	(??_scale+1)& (0+255),c
  2199  000DFE  C022  FFF6         	movff	??_scale+1,tblptrl
  2200  000E02                     	if	1	;There is more than 1 active tblptr byte
  2201  000E02  D892               	call	PL4	;call to abstracted procedure
  2202  000E04  D8C7               	call	PL24	;call to abstracted procedure
  2203  000E06  BE01               	btfsc	___awmod@dividend,7,c
  2204  000E08  0602               	decf	___awmod@dividend+1,f,c
  2205  000E0A  EC8F  F00D         	call	___awmod	;wreg free
  2206  000E0E  5001               	movf	?___awmod,w,c
  2207  000E10  0D03               	mullw	3
  2208  000E12  50F3               	movf	prodl,w,c
  2209  000E14  0F01               	addlw	low __npowers_
  2210  000E16  6E23               	movwf	(??_scale+2)& (0+255),c
  2211  000E18  C023  FFF6         	movff	??_scale+2,tblptrl
  2212  000E1C                     	if	1	;There is more than 1 active tblptr byte
  2213  000E1C  D879               	call	PL2	;call to abstracted procedure
  2214  000E1E  EC73  F00A         	call	___ftmul	;wreg free
  2215  000E22  C00F  F01E         	movff	?___ftmul,?_scale
  2216  000E26  C010  F01F         	movff	?___ftmul+1,?_scale+1
  2217  000E2A  C011  F020         	movff	?___ftmul+2,?_scale+2
  2218  000E2E  0012               	return	
  2219  000E30                     l2508:
  2220                           
  2221                           ;doprnt.c: 434: return _npowers_[scl];
  2222  000E30  5028               	movf	scale@scl,w,c
  2223  000E32  0D03               	mullw	3
  2224  000E34  50F3               	movf	prodl,w,c
  2225  000E36  0F01               	addlw	low __npowers_
  2226  000E38  D09E               	goto	PL22	;call to abstracted procedure
  2227  000E3A                     l2512:
  2228                           
  2229                           ;doprnt.c: 435: }
  2230                           ;doprnt.c: 436: if(scl>=110)
  2231  000E3A  5028               	movf	scale@scl,w,c
  2232  000E3C  0A80               	xorlw	128
  2233  000E3E  0F12               	addlw	-238
  2234  000E40  E33B               	bnc	l2520
  2235                           
  2236                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2237  000E42  6A0A               	clrf	___awdiv@divisor+1,c
  2238  000E44  0E0A               	movlw	10
  2239  000E46  6E09               	movwf	___awdiv@divisor,c
  2240  000E48  6A04               	clrf	___awmod@divisor+1,c
  2241  000E4A  0E64               	movlw	100
  2242  000E4C  D8AA               	call	PL38	;call to abstracted procedure
  2243  000E4E  BE01               	btfsc	___awmod@dividend,7,c
  2244  000E50  0602               	decf	___awmod@dividend+1,f,c
  2245  000E52  EC8F  F00D         	call	___awmod	;wreg free
  2246  000E56  C001  F007         	movff	?___awmod,___awdiv@dividend
  2247  000E5A  C002  F008         	movff	?___awmod+1,___awdiv@dividend+1
  2248  000E5E  EC18  F00D         	call	___awdiv	;wreg free
  2249  000E62  D881               	call	PL16	;call to abstracted procedure
  2250  000E64  0F28               	addlw	low __powers_
  2251  000E66  6E22               	movwf	(??_scale+1)& (0+255),c
  2252  000E68  C022  FFF6         	movff	??_scale+1,tblptrl
  2253  000E6C                     	if	1	;There is more than 1 active tblptr byte
  2254  000E6C  D851               	call	PL2	;call to abstracted procedure
  2255  000E6E  6A0A               	clrf	___awdiv@divisor+1,c
  2256  000E70  0E64               	movlw	100
  2257  000E72  D8A4               	call	PL50	;call to abstracted procedure
  2258  000E74  BE07               	btfsc	___awdiv@dividend,7,c
  2259  000E76  0608               	decf	___awdiv@dividend+1,f,c
  2260  000E78  EC18  F00D         	call	___awdiv	;wreg free
  2261  000E7C  D897               	call	PL48	;call to abstracted procedure
  2262  000E7E  0F28               	addlw	low __powers_
  2263  000E80  6E24               	movwf	(??_scale+3)& (0+255),c
  2264  000E82  C024  FFF6         	movff	??_scale+3,tblptrl
  2265  000E86                     	if	1	;There is more than 1 active tblptr byte
  2266  000E86  D850               	call	PL4	;call to abstracted procedure
  2267  000E88  EC73  F00A         	call	___ftmul	;wreg free
  2268                           
  2269                           ;doprnt.c: 437: return _powers_[scl/100+18] * _powers_[(scl%100)/10+9] * _powers_[scl%10
      +                          ];
  2270  000E8C  D859               	call	PL14	;call to abstracted procedure
  2271  000E8E  BE01               	btfsc	___awmod@dividend,7,c
  2272  000E90  0602               	decf	___awmod@dividend+1,f,c
  2273  000E92  EC8F  F00D         	call	___awmod	;wreg free
  2274  000E96  5001               	movf	?___awmod,w,c
  2275  000E98  0D03               	mullw	3
  2276  000E9A  50F3               	movf	prodl,w,c
  2277  000E9C  0F28               	addlw	low __powers_
  2278  000E9E  6E21               	movwf	??_scale& (0+255),c
  2279  000EA0  C021  FFF6         	movff	??_scale,tblptrl
  2280  000EA4                     	if	1	;There is more than 1 active tblptr byte
  2281  000EA4  D835               	call	PL2	;call to abstracted procedure
  2282  000EA6  EC73  F00A         	call	___ftmul	;wreg free
  2283  000EAA  C00F  F01E         	movff	?___ftmul,?_scale
  2284  000EAE  C010  F01F         	movff	?___ftmul+1,?_scale+1
  2285  000EB2  C011  F020         	movff	?___ftmul+2,?_scale+2
  2286  000EB6  0012               	return	
  2287  000EB8                     l2520:
  2288                           
  2289                           ;doprnt.c: 438: else if(scl > 10)
  2290  000EB8  5028               	movf	scale@scl,w,c
  2291  000EBA  0A80               	xorlw	128
  2292  000EBC  0F75               	addlw	-139
  2293  000EBE  E323               	bnc	l2526
  2294                           
  2295                           ;doprnt.c: 439: return _powers_[scl/10+9] * _powers_[scl%10];
  2296  000EC0  6A0A               	clrf	___awdiv@divisor+1,c
  2297  000EC2  0E0A               	movlw	10
  2298  000EC4  D87B               	call	PL50	;call to abstracted procedure
  2299  000EC6  BE07               	btfsc	___awdiv@dividend,7,c
  2300  000EC8  0608               	decf	___awdiv@dividend+1,f,c
  2301  000ECA  EC18  F00D         	call	___awdiv	;wreg free
  2302  000ECE  D84B               	call	PL16	;call to abstracted procedure
  2303  000ED0  0F28               	addlw	low __powers_
  2304  000ED2  6E22               	movwf	(??_scale+1)& (0+255),c
  2305  000ED4  C022  FFF6         	movff	??_scale+1,tblptrl
  2306  000ED8                     	if	1	;There is more than 1 active tblptr byte
  2307  000ED8  D827               	call	PL4	;call to abstracted procedure
  2308  000EDA  D85C               	call	PL24	;call to abstracted procedure
  2309  000EDC  BE01               	btfsc	___awmod@dividend,7,c
  2310  000EDE  0602               	decf	___awmod@dividend+1,f,c
  2311  000EE0  EC8F  F00D         	call	___awmod	;wreg free
  2312  000EE4  5001               	movf	?___awmod,w,c
  2313  000EE6  0D03               	mullw	3
  2314  000EE8  50F3               	movf	prodl,w,c
  2315  000EEA  0F28               	addlw	low __powers_
  2316  000EEC  6E23               	movwf	(??_scale+2)& (0+255),c
  2317  000EEE  C023  FFF6         	movff	??_scale+2,tblptrl
  2318  000EF2                     	if	1	;There is more than 1 active tblptr byte
  2319  000EF2  D80E               	call	PL2	;call to abstracted procedure
  2320  000EF4  EC73  F00A         	call	___ftmul	;wreg free
  2321  000EF8  C00F  F01E         	movff	?___ftmul,?_scale
  2322  000EFC  C010  F01F         	movff	?___ftmul+1,?_scale+1
  2323  000F00  C011  F020         	movff	?___ftmul+2,?_scale+2
  2324  000F04  0012               	return	
  2325  000F06                     l2526:
  2326                           
  2327                           ;doprnt.c: 440: return _powers_[scl];
  2328  000F06  5028               	movf	scale@scl,w,c
  2329  000F08  0D03               	mullw	3
  2330  000F0A  50F3               	movf	prodl,w,c
  2331  000F0C  0F28               	addlw	low __powers_
  2332  000F0E  D033               	goto	PL22	;call to abstracted procedure
  2333  000F10                     __end_of_scale:
  2334                           	opt stack 0
  2335  000F10                     PL2:
  2336                           	opt stack 27
  2337  000F10  0E06               	movlw	high __smallconst
  2338  000F12  6EF7               	movwf	tblptrh,c
  2339  000F14                     	endif
  2340  000F14                     	if	0	;tblptru may be non-zero
  2341  000F14                     	endif
  2342  000F14                     	if	0	;tblptru may be non-zero
  2343  000F14                     	endif
  2344  000F14  0009               	tblrd		*+
  2345  000F16  CFF5 F012          	movff	tablat,___ftmul@f2
  2346  000F1A  0009               	tblrd		*+
  2347  000F1C  CFF5 F013          	movff	tablat,___ftmul@f2+1
  2348  000F20  000A               	tblrd		*-
  2349  000F22  CFF5 F014          	movff	tablat,___ftmul@f2+2
  2350  000F26  0012               	return	
  2351  000F28                     __end_ofPL2:
  2352                           	opt stack 0
  2353  000F28                     PL4:
  2354                           	opt stack 27
  2355  000F28  0E06               	movlw	high __smallconst
  2356  000F2A  6EF7               	movwf	tblptrh,c
  2357  000F2C                     	endif
  2358  000F2C                     	if	0	;tblptru may be non-zero
  2359  000F2C                     	endif
  2360  000F2C                     	if	0	;tblptru may be non-zero
  2361  000F2C                     	endif
  2362  000F2C  0009               	tblrd		*+
  2363  000F2E  CFF5 F00F          	movff	tablat,___ftmul@f1
  2364  000F32  0009               	tblrd		*+
  2365  000F34  CFF5 F010          	movff	tablat,___ftmul@f1+1
  2366  000F38  000A               	tblrd		*-
  2367  000F3A  CFF5 F011          	movff	tablat,___ftmul@f1+2
  2368  000F3E  0012               	return	
  2369  000F40                     __end_ofPL4:
  2370                           	opt stack 0
  2371  000F40                     PL14:
  2372                           	opt stack 27
  2373  000F40  C00F  F025         	movff	?___ftmul,_scale$1239
  2374  000F44  C010  F026         	movff	?___ftmul+1,_scale$1239+1
  2375  000F48  C011  F027         	movff	?___ftmul+2,_scale$1239+2
  2376  000F4C  C025  F00F         	movff	_scale$1239,___ftmul@f1
  2377  000F50  C026  F010         	movff	_scale$1239+1,___ftmul@f1+1
  2378  000F54  C027  F011         	movff	_scale$1239+2,___ftmul@f1+2
  2379  000F58  6A04               	clrf	___awmod@divisor+1,c
  2380  000F5A  0E0A               	movlw	10
  2381  000F5C  6E03               	movwf	___awmod@divisor,c
  2382  000F5E  5028               	movf	scale@scl,w,c
  2383  000F60  6E01               	movwf	___awmod@dividend,c
  2384  000F62  6A02               	clrf	___awmod@dividend+1,c
  2385  000F64  0012               	return	
  2386  000F66                     __end_ofPL14:
  2387                           	opt stack 0
  2388  000F66                     PL16:
  2389                           	opt stack 27
  2390  000F66  5007               	movf	?___awdiv,w,c
  2391  000F68  0D03               	mullw	3
  2392  000F6A  CFF3 F021          	movff	prodl,??_scale
  2393  000F6E  0E1B               	movlw	27
  2394  000F70  2621               	addwf	??_scale,f,c
  2395  000F72  5021               	movf	??_scale,w,c
  2396  000F74  0012               	return	
  2397  000F76                     __end_ofPL16:
  2398                           	opt stack 0
  2399  000F76                     PL22:
  2400                           	opt stack 27
  2401  000F76  6E21               	movwf	??_scale& (0+255),c
  2402  000F78  C021  FFF6         	movff	??_scale,tblptrl
  2403  000F7C                     	if	1	;There is more than 1 active tblptr byte
  2404  000F7C  0E06               	movlw	high __smallconst
  2405  000F7E  6EF7               	movwf	tblptrh,c
  2406  000F80                     	endif
  2407  000F80                     	if	0	;tblptru may be non-zero
  2408  000F80                     	endif
  2409  000F80                     	if	0	;tblptru may be non-zero
  2410  000F80                     	endif
  2411  000F80  0009               	tblrd		*+
  2412  000F82  CFF5 F01E          	movff	tablat,?_scale
  2413  000F86  0009               	tblrd		*+
  2414  000F88  CFF5 F01F          	movff	tablat,?_scale+1
  2415  000F8C  000A               	tblrd		*-
  2416  000F8E  CFF5 F020          	movff	tablat,?_scale+2
  2417  000F92  0012               	return	
  2418  000F94                     __end_ofPL22:
  2419                           	opt stack 0
  2420  000F94                     PL24:
  2421                           	opt stack 27
  2422  000F94  6A04               	clrf	___awmod@divisor+1,c
  2423  000F96  0E0A               	movlw	10
  2424  000F98  6E03               	movwf	___awmod@divisor,c
  2425  000F9A  5028               	movf	scale@scl,w,c
  2426  000F9C  6E01               	movwf	___awmod@dividend,c
  2427  000F9E  6A02               	clrf	___awmod@dividend+1,c
  2428  000FA0  0012               	return	
  2429  000FA2                     __end_ofPL24:
  2430                           	opt stack 0
  2431  000FA2                     PL38:
  2432                           	opt stack 27
  2433  000FA2  6E03               	movwf	___awmod@divisor,c
  2434  000FA4  5028               	movf	scale@scl,w,c
  2435  000FA6  6E01               	movwf	___awmod@dividend,c
  2436  000FA8  6A02               	clrf	___awmod@dividend+1,c
  2437  000FAA  0012               	return	
  2438  000FAC                     __end_ofPL38:
  2439                           	opt stack 0
  2440  000FAC                     PL48:
  2441                           	opt stack 27
  2442  000FAC  5007               	movf	?___awdiv,w,c
  2443  000FAE  0D03               	mullw	3
  2444  000FB0  CFF3 F023          	movff	prodl,??_scale+2
  2445  000FB4  0E36               	movlw	54
  2446  000FB6  2623               	addwf	??_scale+2,f,c
  2447  000FB8  5023               	movf	??_scale+2,w,c
  2448  000FBA  0012               	return	
  2449  000FBC                     __end_ofPL48:
  2450                           	opt stack 0
  2451  000FBC                     PL50:
  2452                           	opt stack 27
  2453  000FBC  6E09               	movwf	___awdiv@divisor,c
  2454  000FBE  5028               	movf	scale@scl,w,c
  2455  000FC0  6E07               	movwf	___awdiv@dividend,c
  2456  000FC2  6A08               	clrf	___awdiv@dividend+1,c
  2457  000FC4  0012               	return	
  2458  000FC6                     __end_ofPL50:
  2459                           	opt stack 0
  2460                           tblptru	equ	0xFF8
  2461                           tblptrh	equ	0xFF7
  2462                           tblptrl	equ	0xFF6
  2463                           tablat	equ	0xFF5
  2464                           prodh	equ	0xFF4
  2465                           prodl	equ	0xFF3
  2466                           indf0	equ	0xFEF
  2467                           fsr0h	equ	0xFEA
  2468                           fsr0l	equ	0xFE9
  2469                           wreg	equ	0xFE8
  2470                           indf2	equ	0xFDF
  2471                           postinc2	equ	0xFDE
  2472                           postdec2	equ	0xFDD
  2473                           fsr2h	equ	0xFDA
  2474                           fsr2l	equ	0xFD9
  2475                           status	equ	0xFD8
  2476                           
  2477 ;; *************** function ___awmod *****************
  2478 ;; Defined at:
  2479 ;;		line 8 in file "D:\Arquivos de Programas\Microchip\xc8\v1.34\sources\common\awmod.c"
  2480 ;; Parameters:    Size  Location     Type
  2481 ;;  dividend        2    0[COMRAM] int 
  2482 ;;  divisor         2    2[COMRAM] int 
  2483 ;; Auto vars:     Size  Location     Type
  2484 ;;  sign            1    5[COMRAM] unsigned char 
  2485 ;;  counter         1    4[COMRAM] unsigned char 
  2486 ;; Return value:  Size  Location     Type
  2487 ;;                  2    0[COMRAM] int 
  2488 ;; Registers used:
  2489 ;;		wreg, status,2, status,0
  2490 ;; Tracked objects:
  2491 ;;		On entry : 0/0
  2492 ;;		On exit  : 0/0
  2493 ;;		Unchanged: 0/0
  2494 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2495 ;;      Params:         4       0       0       0       0       0       0
  2496 ;;      Locals:         2       0       0       0       0       0       0
  2497 ;;      Temps:          0       0       0       0       0       0       0
  2498 ;;      Totals:         6       0       0       0       0       0       0
  2499 ;;Total ram usage:        6 bytes
  2500 ;; Hardware stack levels used:    1
  2501 ;; This function calls:
  2502 ;;		Nothing
  2503 ;; This function is called by:
  2504 ;;		_scale
  2505 ;; This function uses a non-reentrant model
  2506 ;;
  2507                           
  2508                           	psect	text3
  2509  001B1E                     __ptext3:
  2510                           	opt stack 0
  2511  001B1E                     ___awmod:
  2512                           	opt stack 28
  2513                           
  2514                           ;incstack = 0
  2515  001B1E  6A06               	clrf	___awmod@sign,c
  2516  001B20  AE02               	btfss	___awmod@dividend+1,7,c
  2517  001B22  D006               	goto	l2382
  2518  001B24  6C01               	negf	___awmod@dividend,c
  2519  001B26  1E02               	comf	___awmod@dividend+1,f,c
  2520  001B28  B0D8               	btfsc	status,0,c
  2521  001B2A  2A02               	incf	___awmod@dividend+1,f,c
  2522  001B2C  0E01               	movlw	1
  2523  001B2E  6E06               	movwf	___awmod@sign,c
  2524  001B30                     l2382:
  2525  001B30  AE04               	btfss	___awmod@divisor+1,7,c
  2526  001B32  D004               	goto	l2386
  2527  001B34  6C03               	negf	___awmod@divisor,c
  2528  001B36  1E04               	comf	___awmod@divisor+1,f,c
  2529  001B38  B0D8               	btfsc	status,0,c
  2530  001B3A  2A04               	incf	___awmod@divisor+1,f,c
  2531  001B3C                     l2386:
  2532  001B3C  5003               	movf	___awmod@divisor,w,c
  2533  001B3E  1004               	iorwf	___awmod@divisor+1,w,c
  2534  001B40  E017               	bz	l2402
  2535  001B42  0E01               	movlw	1
  2536  001B44  6E05               	movwf	___awmod@counter,c
  2537  001B46  D004               	goto	l2392
  2538  001B48                     l2390:
  2539  001B48  90D8               	bcf	status,0,c
  2540  001B4A  3603               	rlcf	___awmod@divisor,f,c
  2541  001B4C  3604               	rlcf	___awmod@divisor+1,f,c
  2542  001B4E  2A05               	incf	___awmod@counter,f,c
  2543  001B50                     l2392:
  2544  001B50  AE04               	btfss	___awmod@divisor+1,7,c
  2545  001B52  D7FA               	goto	l2390
  2546  001B54                     l2394:
  2547  001B54  5003               	movf	___awmod@divisor,w,c
  2548  001B56  5C01               	subwf	___awmod@dividend,w,c
  2549  001B58  5004               	movf	___awmod@divisor+1,w,c
  2550  001B5A  5802               	subwfb	___awmod@dividend+1,w,c
  2551  001B5C  E304               	bnc	l2398
  2552  001B5E  5003               	movf	___awmod@divisor,w,c
  2553  001B60  5E01               	subwf	___awmod@dividend,f,c
  2554  001B62  5004               	movf	___awmod@divisor+1,w,c
  2555  001B64  5A02               	subwfb	___awmod@dividend+1,f,c
  2556  001B66                     l2398:
  2557  001B66  90D8               	bcf	status,0,c
  2558  001B68  3204               	rrcf	___awmod@divisor+1,f,c
  2559  001B6A  3203               	rrcf	___awmod@divisor,f,c
  2560  001B6C  2E05               	decfsz	___awmod@counter,f,c
  2561  001B6E  D7F2               	goto	l2394
  2562  001B70                     l2402:
  2563  001B70  5006               	movf	___awmod@sign,w,c
  2564  001B72  E004               	bz	l2406
  2565  001B74  6C01               	negf	___awmod@dividend,c
  2566  001B76  1E02               	comf	___awmod@dividend+1,f,c
  2567  001B78  B0D8               	btfsc	status,0,c
  2568  001B7A  2A02               	incf	___awmod@dividend+1,f,c
  2569  001B7C                     l2406:
  2570  001B7C  C001  F001         	movff	___awmod@dividend,?___awmod
  2571  001B80  C002  F002         	movff	___awmod@dividend+1,?___awmod+1
  2572  001B84  0012               	return		;funcret
  2573  001B86                     __end_of___awmod:
  2574                           	opt stack 0
  2575                           tblptru	equ	0xFF8
  2576                           tblptrh	equ	0xFF7
  2577                           tblptrl	equ	0xFF6
  2578                           tablat	equ	0xFF5
  2579                           prodh	equ	0xFF4
  2580                           prodl	equ	0xFF3
  2581                           indf0	equ	0xFEF
  2582                           fsr0h	equ	0xFEA
  2583                           fsr0l	equ	0xFE9
  2584                           wreg	equ	0xFE8
  2585                           indf2	equ	0xFDF
  2586                           postinc2	equ	0xFDE
  2587                           postdec2	equ	0xFDD
  2588                           fsr2h	equ	0xFDA
  2589                           fsr2l	equ	0xFD9
  2590                           status	equ	0xFD8
  2591                           
  2592 ;; *************** function ___awdiv *****************
  2593 ;; Defined at:
  2594 ;;		line 8 in file "D:\Arquivos de Programas\Microchip\xc8\v1.34\sources\common\awdiv.c"
  2595 ;; Parameters:    Size  Location     Type
  2596 ;;  dividend        2    6[COMRAM] int 
  2597 ;;  divisor         2    8[COMRAM] int 
  2598 ;; Auto vars:     Size  Location     Type
  2599 ;;  quotient        2   12[COMRAM] int 
  2600 ;;  sign            1   11[COMRAM] unsigned char 
  2601 ;;  counter         1   10[COMRAM] unsigned char 
  2602 ;; Return value:  Size  Location     Type
  2603 ;;                  2    6[COMRAM] int 
  2604 ;; Registers used:
  2605 ;;		wreg, status,2, status,0
  2606 ;; Tracked objects:
  2607 ;;		On entry : 0/0
  2608 ;;		On exit  : 0/0
  2609 ;;		Unchanged: 0/0
  2610 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2611 ;;      Params:         4       0       0       0       0       0       0
  2612 ;;      Locals:         4       0       0       0       0       0       0
  2613 ;;      Temps:          0       0       0       0       0       0       0
  2614 ;;      Totals:         8       0       0       0       0       0       0
  2615 ;;Total ram usage:        8 bytes
  2616 ;; Hardware stack levels used:    1
  2617 ;; This function calls:
  2618 ;;		Nothing
  2619 ;; This function is called by:
  2620 ;;		_scale
  2621 ;;		_sprintf
  2622 ;; This function uses a non-reentrant model
  2623 ;;
  2624                           
  2625                           	psect	text4
  2626  001A30                     __ptext4:
  2627                           	opt stack 0
  2628  001A30                     ___awdiv:
  2629                           	opt stack 28
  2630                           
  2631                           ;incstack = 0
  2632  001A30  6A0C               	clrf	___awdiv@sign,c
  2633  001A32  AE0A               	btfss	___awdiv@divisor+1,7,c
  2634  001A34  D006               	goto	l2338
  2635  001A36  6C09               	negf	___awdiv@divisor,c
  2636  001A38  1E0A               	comf	___awdiv@divisor+1,f,c
  2637  001A3A  B0D8               	btfsc	status,0,c
  2638  001A3C  2A0A               	incf	___awdiv@divisor+1,f,c
  2639  001A3E  0E01               	movlw	1
  2640  001A40  6E0C               	movwf	___awdiv@sign,c
  2641  001A42                     l2338:
  2642  001A42  AE08               	btfss	___awdiv@dividend+1,7,c
  2643  001A44  D006               	goto	l2344
  2644  001A46  6C07               	negf	___awdiv@dividend,c
  2645  001A48  1E08               	comf	___awdiv@dividend+1,f,c
  2646  001A4A  B0D8               	btfsc	status,0,c
  2647  001A4C  2A08               	incf	___awdiv@dividend+1,f,c
  2648  001A4E  0E01               	movlw	1
  2649  001A50  1A0C               	xorwf	___awdiv@sign,f,c
  2650  001A52                     l2344:
  2651  001A52  6A0D               	clrf	___awdiv@quotient,c
  2652  001A54  6A0E               	clrf	___awdiv@quotient+1,c
  2653  001A56  5009               	movf	___awdiv@divisor,w,c
  2654  001A58  100A               	iorwf	___awdiv@divisor+1,w,c
  2655  001A5A  E01B               	bz	l2366
  2656  001A5C  0E01               	movlw	1
  2657  001A5E  6E0B               	movwf	___awdiv@counter,c
  2658  001A60  D004               	goto	l2352
  2659  001A62                     l2350:
  2660  001A62  90D8               	bcf	status,0,c
  2661  001A64  3609               	rlcf	___awdiv@divisor,f,c
  2662  001A66  360A               	rlcf	___awdiv@divisor+1,f,c
  2663  001A68  2A0B               	incf	___awdiv@counter,f,c
  2664  001A6A                     l2352:
  2665  001A6A  AE0A               	btfss	___awdiv@divisor+1,7,c
  2666  001A6C  D7FA               	goto	l2350
  2667  001A6E                     l2354:
  2668  001A6E  90D8               	bcf	status,0,c
  2669  001A70  360D               	rlcf	___awdiv@quotient,f,c
  2670  001A72  360E               	rlcf	___awdiv@quotient+1,f,c
  2671  001A74  5009               	movf	___awdiv@divisor,w,c
  2672  001A76  5C07               	subwf	___awdiv@dividend,w,c
  2673  001A78  500A               	movf	___awdiv@divisor+1,w,c
  2674  001A7A  5808               	subwfb	___awdiv@dividend+1,w,c
  2675  001A7C  E305               	bnc	l2362
  2676  001A7E  5009               	movf	___awdiv@divisor,w,c
  2677  001A80  5E07               	subwf	___awdiv@dividend,f,c
  2678  001A82  500A               	movf	___awdiv@divisor+1,w,c
  2679  001A84  5A08               	subwfb	___awdiv@dividend+1,f,c
  2680  001A86  800D               	bsf	___awdiv@quotient,0,c
  2681  001A88                     l2362:
  2682  001A88  90D8               	bcf	status,0,c
  2683  001A8A  320A               	rrcf	___awdiv@divisor+1,f,c
  2684  001A8C  3209               	rrcf	___awdiv@divisor,f,c
  2685  001A8E  2E0B               	decfsz	___awdiv@counter,f,c
  2686  001A90  D7EE               	goto	l2354
  2687  001A92                     l2366:
  2688  001A92  500C               	movf	___awdiv@sign,w,c
  2689  001A94  E004               	bz	l2370
  2690  001A96  6C0D               	negf	___awdiv@quotient,c
  2691  001A98  1E0E               	comf	___awdiv@quotient+1,f,c
  2692  001A9A  B0D8               	btfsc	status,0,c
  2693  001A9C  2A0E               	incf	___awdiv@quotient+1,f,c
  2694  001A9E                     l2370:
  2695  001A9E  C00D  F007         	movff	___awdiv@quotient,?___awdiv
  2696  001AA2  C00E  F008         	movff	___awdiv@quotient+1,?___awdiv+1
  2697  001AA6  0012               	return		;funcret
  2698  001AA8                     __end_of___awdiv:
  2699                           	opt stack 0
  2700                           tblptru	equ	0xFF8
  2701                           tblptrh	equ	0xFF7
  2702                           tblptrl	equ	0xFF6
  2703                           tablat	equ	0xFF5
  2704                           prodh	equ	0xFF4
  2705                           prodl	equ	0xFF3
  2706                           indf0	equ	0xFEF
  2707                           fsr0h	equ	0xFEA
  2708                           fsr0l	equ	0xFE9
  2709                           wreg	equ	0xFE8
  2710                           indf2	equ	0xFDF
  2711                           postinc2	equ	0xFDE
  2712                           postdec2	equ	0xFDD
  2713                           fsr2h	equ	0xFDA
  2714                           fsr2l	equ	0xFD9
  2715                           status	equ	0xFD8
  2716                           
  2717 ;; *************** function _isdigit *****************
  2718 ;; Defined at:
  2719 ;;		line 8 in file "D:\Arquivos de Programas\Microchip\xc8\v1.34\sources\common\isdigit.c"
  2720 ;; Parameters:    Size  Location     Type
  2721 ;;  c               1    wreg     unsigned char 
  2722 ;; Auto vars:     Size  Location     Type
  2723 ;;  c               1    2[COMRAM] unsigned char 
  2724 ;; Return value:  Size  Location     Type
  2725 ;;		None               void
  2726 ;; Registers used:
  2727 ;;		wreg, status,2, status,0
  2728 ;; Tracked objects:
  2729 ;;		On entry : 0/0
  2730 ;;		On exit  : 0/0
  2731 ;;		Unchanged: 0/0
  2732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2733 ;;      Params:         0       0       0       0       0       0       0
  2734 ;;      Locals:         2       0       0       0       0       0       0
  2735 ;;      Temps:          1       0       0       0       0       0       0
  2736 ;;      Totals:         3       0       0       0       0       0       0
  2737 ;;Total ram usage:        3 bytes
  2738 ;; Hardware stack levels used:    1
  2739 ;; This function calls:
  2740 ;;		Nothing
  2741 ;; This function is called by:
  2742 ;;		_sprintf
  2743 ;; This function uses a non-reentrant model
  2744 ;;
  2745                           
  2746                           	psect	text5
  2747  001EB8                     __ptext5:
  2748                           	opt stack 0
  2749  001EB8                     _isdigit:
  2750                           	opt stack 29
  2751                           
  2752                           ;incstack = 0
  2753                           ;isdigit@c stored from wreg
  2754  001EB8  6E03               	movwf	isdigit@c,c
  2755  001EBA  6A02               	clrf	_isdigit$956,c
  2756  001EBC  0E3A               	movlw	58
  2757  001EBE  6003               	cpfslt	isdigit@c,c
  2758  001EC0  D005               	goto	l2538
  2759  001EC2  0E2F               	movlw	47
  2760  001EC4  6403               	cpfsgt	isdigit@c,c
  2761  001EC6  D002               	goto	l2538
  2762  001EC8  0E01               	movlw	1
  2763  001ECA  6E02               	movwf	_isdigit$956,c
  2764  001ECC                     l2538:
  2765  001ECC  C002  F001         	movff	_isdigit$956,??_isdigit
  2766  001ED0  3001               	rrcf	??_isdigit,w,c
  2767  001ED2  0012               	return		;funcret
  2768  001ED4                     __end_of_isdigit:
  2769                           	opt stack 0
  2770                           tblptru	equ	0xFF8
  2771                           tblptrh	equ	0xFF7
  2772                           tblptrl	equ	0xFF6
  2773                           tablat	equ	0xFF5
  2774                           prodh	equ	0xFF4
  2775                           prodl	equ	0xFF3
  2776                           indf0	equ	0xFEF
  2777                           fsr0h	equ	0xFEA
  2778                           fsr0l	equ	0xFE9
  2779                           wreg	equ	0xFE8
  2780                           indf2	equ	0xFDF
  2781                           postinc2	equ	0xFDE
  2782                           postdec2	equ	0xFDD
  2783                           fsr2h	equ	0xFDA
  2784                           fsr2l	equ	0xFD9
  2785                           status	equ	0xFD8
  2786                           
  2787 ;; *************** function _fround *****************
  2788 ;; Defined at:
  2789 ;;		line 409 in file "D:\Arquivos de Programas\Microchip\xc8\v1.34\sources\common\doprnt.c"
  2790 ;; Parameters:    Size  Location     Type
  2791 ;;  prec            1    wreg     unsigned char 
  2792 ;; Auto vars:     Size  Location     Type
  2793 ;;  prec            1   42[COMRAM] unsigned char 
  2794 ;; Return value:  Size  Location     Type
  2795 ;;                  3   29[COMRAM] unsigned char 
  2796 ;; Registers used:
  2797 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  2798 ;; Tracked objects:
  2799 ;;		On entry : 0/0
  2800 ;;		On exit  : 0/0
  2801 ;;		Unchanged: 0/0
  2802 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2803 ;;      Params:         3       0       0       0       0       0       0
  2804 ;;      Locals:         7       0       0       0       0       0       0
  2805 ;;      Temps:          4       0       0       0       0       0       0
  2806 ;;      Totals:        14       0       0       0       0       0       0
  2807 ;;Total ram usage:       14 bytes
  2808 ;; Hardware stack levels used:    1
  2809 ;; Hardware stack levels required when called:    2
  2810 ;; This function calls:
  2811 ;;		___ftmul
  2812 ;;		___lbdiv
  2813 ;;		___lbmod
  2814 ;; This function is called by:
  2815 ;;		_sprintf
  2816 ;; This function uses a non-reentrant model
  2817 ;;
  2818                           
  2819                           	psect	text6
  2820  000FC6                     __ptext6:
  2821                           	opt stack 0
  2822  000FC6                     _fround:
  2823                           	opt stack 27
  2824                           
  2825                           ;incstack = 0
  2826                           ;fround@prec stored from wreg
  2827  000FC6  6E2B               	movwf	fround@prec,c
  2828                           
  2829                           ;doprnt.c: 413: if(prec>=110)
  2830  000FC8  0E6D               	movlw	109
  2831  000FCA  642B               	cpfsgt	fround@prec,c
  2832  000FCC  D057               	goto	l2480
  2833                           
  2834                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2835  000FCE  0E0A               	movlw	10
  2836  000FD0  6E05               	movwf	___lbdiv@divisor,c
  2837  000FD2  0E64               	movlw	100
  2838  000FD4  6E01               	movwf	___lbmod@divisor,c
  2839  000FD6  502B               	movf	fround@prec,w,c
  2840  000FD8  EC23  F00F         	call	___lbmod
  2841  000FDC  ECF3  F00E         	call	___lbdiv
  2842  000FE0  0D03               	mullw	3
  2843  000FE2  CFF3 F021          	movff	prodl,??_fround
  2844  000FE6  0E1B               	movlw	27
  2845  000FE8  2621               	addwf	??_fround,f,c
  2846  000FEA  5021               	movf	??_fround,w,c
  2847  000FEC  0F01               	addlw	low __npowers_
  2848  000FEE  6E22               	movwf	(??_fround+1)& (0+255),c
  2849  000FF0  C022  FFF6         	movff	??_fround+1,tblptrl
  2850  000FF4                     	if	1	;There is more than 1 active tblptr byte
  2851  000FF4  EC88  F007         	call	PL2	;call to abstracted procedure
  2852  000FF8  0E64               	movlw	100
  2853  000FFA  6E05               	movwf	___lbdiv@divisor,c
  2854  000FFC  502B               	movf	fround@prec,w,c
  2855  000FFE  ECF3  F00E         	call	___lbdiv
  2856  001002  0D03               	mullw	3
  2857  001004  CFF3 F023          	movff	prodl,??_fround+2
  2858  001008  0E36               	movlw	54
  2859  00100A  2623               	addwf	??_fround+2,f,c
  2860  00100C  5023               	movf	??_fround+2,w,c
  2861  00100E  0F01               	addlw	low __npowers_
  2862  001010  6E24               	movwf	(??_fround+3)& (0+255),c
  2863  001012  C024  FFF6         	movff	??_fround+3,tblptrl
  2864  001016                     	if	1	;There is more than 1 active tblptr byte
  2865  001016  EC94  F007         	call	PL4	;call to abstracted procedure
  2866  00101A  EC73  F00A         	call	___ftmul	;wreg free
  2867  00101E  C00F  F028         	movff	?___ftmul,_fround$1237
  2868  001022  C010  F029         	movff	?___ftmul+1,_fround$1237+1
  2869  001026  C011  F02A         	movff	?___ftmul+2,_fround$1237+2
  2870                           
  2871                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2872  00102A  0E0A               	movlw	10
  2873  00102C  6E01               	movwf	___lbmod@divisor,c
  2874  00102E  502B               	movf	fround@prec,w,c
  2875  001030  EC23  F00F         	call	___lbmod
  2876  001034  D86A               	call	PL18	;call to abstracted procedure
  2877  001036  EC88  F007         	call	PL2	;call to abstracted procedure
  2878  00103A  C028  F00F         	movff	_fround$1237,___ftmul@f1
  2879  00103E  C029  F010         	movff	_fround$1237+1,___ftmul@f1+1
  2880  001042  C02A  F011         	movff	_fround$1237+2,___ftmul@f1+2
  2881  001046  EC73  F00A         	call	___ftmul	;wreg free
  2882  00104A  C00F  F025         	movff	?___ftmul,_fround$1238
  2883  00104E  C010  F026         	movff	?___ftmul+1,_fround$1238+1
  2884  001052  C011  F027         	movff	?___ftmul+2,_fround$1238+2
  2885                           
  2886                           ;doprnt.c: 414: return 0.5 * _npowers_[prec/100+18] * _npowers_[(prec%100)/10+9] * _npow
      +                          ers_[prec%10];
  2887  001056  C025  F00F         	movff	_fround$1238,___ftmul@f1
  2888  00105A  C026  F010         	movff	_fround$1238+1,___ftmul@f1+1
  2889  00105E  C027  F011         	movff	_fround$1238+2,___ftmul@f1+2
  2890  001062  6A12               	clrf	___ftmul@f2,c
  2891  001064  6A13               	clrf	___ftmul@f2+1,c
  2892  001066  0E3F               	movlw	63
  2893  001068  6E14               	movwf	___ftmul@f2+2,c
  2894  00106A  EC73  F00A         	call	___ftmul	;wreg free
  2895  00106E  C00F  F01E         	movff	?___ftmul,?_fround
  2896  001072  C010  F01F         	movff	?___ftmul+1,?_fround+1
  2897  001076  C011  F020         	movff	?___ftmul+2,?_fround+2
  2898  00107A  0012               	return	
  2899  00107C                     l2480:
  2900                           
  2901                           ;doprnt.c: 415: else if(prec > 10)
  2902  00107C  0E0A               	movlw	10
  2903  00107E  642B               	cpfsgt	fround@prec,c
  2904  001080  D033               	goto	l2488
  2905                           
  2906                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  2907  001082  6E01               	movwf	___lbmod@divisor,c
  2908  001084  502B               	movf	fround@prec,w,c
  2909  001086  EC23  F00F         	call	___lbmod
  2910  00108A  D83F               	call	PL18	;call to abstracted procedure
  2911  00108C  EC88  F007         	call	PL2	;call to abstracted procedure
  2912  001090  0E0A               	movlw	10
  2913  001092  6E05               	movwf	___lbdiv@divisor,c
  2914  001094  502B               	movf	fround@prec,w,c
  2915  001096  ECF3  F00E         	call	___lbdiv
  2916  00109A  0D03               	mullw	3
  2917  00109C  CFF3 F022          	movff	prodl,??_fround+1
  2918  0010A0  0E1B               	movlw	27
  2919  0010A2  2622               	addwf	??_fround+1,f,c
  2920  0010A4  5022               	movf	??_fround+1,w,c
  2921  0010A6  0F01               	addlw	low __npowers_
  2922  0010A8  6E23               	movwf	(??_fround+2)& (0+255),c
  2923  0010AA  C023  FFF6         	movff	??_fround+2,tblptrl
  2924  0010AE                     	if	1	;There is more than 1 active tblptr byte
  2925  0010AE  EC94  F007         	call	PL4	;call to abstracted procedure
  2926  0010B2  EC73  F00A         	call	___ftmul	;wreg free
  2927  0010B6  C00F  F028         	movff	?___ftmul,_fround$1237
  2928  0010BA  C010  F029         	movff	?___ftmul+1,_fround$1237+1
  2929  0010BE  C011  F02A         	movff	?___ftmul+2,_fround$1237+2
  2930                           
  2931                           ;doprnt.c: 416: return 0.5 * _npowers_[prec/10+9] * _npowers_[prec%10];
  2932  0010C2  C028  F00F         	movff	_fround$1237,___ftmul@f1
  2933  0010C6  C029  F010         	movff	_fround$1237+1,___ftmul@f1+1
  2934  0010CA  C02A  F011         	movff	_fround$1237+2,___ftmul@f1+2
  2935  0010CE  6A12               	clrf	___ftmul@f2,c
  2936  0010D0  6A13               	clrf	___ftmul@f2+1,c
  2937  0010D2  0E3F               	movlw	63
  2938  0010D4  6E14               	movwf	___ftmul@f2+2,c
  2939  0010D6  EC73  F00A         	call	___ftmul	;wreg free
  2940  0010DA  C00F  F01E         	movff	?___ftmul,?_fround
  2941  0010DE  C010  F01F         	movff	?___ftmul+1,?_fround+1
  2942  0010E2  C011  F020         	movff	?___ftmul+2,?_fround+2
  2943  0010E6  0012               	return	
  2944  0010E8                     l2488:
  2945                           
  2946                           ;doprnt.c: 417: return 0.5 * _npowers_[prec];
  2947  0010E8  502B               	movf	fround@prec,w,c
  2948  0010EA  D80F               	call	PL18	;call to abstracted procedure
  2949  0010EC  EC94  F007         	call	PL4	;call to abstracted procedure
  2950  0010F0  6A12               	clrf	___ftmul@f2,c
  2951  0010F2  6A13               	clrf	___ftmul@f2+1,c
  2952  0010F4  0E3F               	movlw	63
  2953  0010F6  6E14               	movwf	___ftmul@f2+2,c
  2954  0010F8  EC73  F00A         	call	___ftmul	;wreg free
  2955  0010FC  C00F  F01E         	movff	?___ftmul,?_fround
  2956  001100  C010  F01F         	movff	?___ftmul+1,?_fround+1
  2957  001104  C011  F020         	movff	?___ftmul+2,?_fround+2
  2958  001108  0012               	return		;funcret
  2959  00110A                     __end_of_fround:
  2960                           	opt stack 0
  2961  00110A                     PL18:
  2962                           	opt stack 27
  2963  00110A  0D03               	mullw	3
  2964  00110C  50F3               	movf	prodl,w,c
  2965  00110E  0F01               	addlw	low __npowers_
  2966  001110  6E21               	movwf	??_fround& (0+255),c
  2967  001112  C021  FFF6         	movff	??_fround,tblptrl
  2968  001116                     	if	1	;There is more than 1 active tblptr byte
  2969  001116  0012               	return	
  2970  001118                     __end_ofPL18:
  2971                           	opt stack 0
  2972                           tblptru	equ	0xFF8
  2973                           tblptrh	equ	0xFF7
  2974                           tblptrl	equ	0xFF6
  2975                           tablat	equ	0xFF5
  2976                           prodh	equ	0xFF4
  2977                           prodl	equ	0xFF3
  2978                           indf0	equ	0xFEF
  2979                           fsr0h	equ	0xFEA
  2980                           fsr0l	equ	0xFE9
  2981                           wreg	equ	0xFE8
  2982                           indf2	equ	0xFDF
  2983                           postinc2	equ	0xFDE
  2984                           postdec2	equ	0xFDD
  2985                           fsr2h	equ	0xFDA
  2986                           fsr2l	equ	0xFD9
  2987                           status	equ	0xFD8
  2988                           
  2989 ;; *************** function ___lbmod *****************
  2990 ;; Defined at:
  2991 ;;		line 4 in file "D:\Arquivos de Programas\Microchip\xc8\v1.34\sources\common\lbmod.c"
  2992 ;; Parameters:    Size  Location     Type
  2993 ;;  dividend        1    wreg     unsigned char 
  2994 ;;  divisor         1    0[COMRAM] unsigned char 
  2995 ;; Auto vars:     Size  Location     Type
  2996 ;;  dividend        1    1[COMRAM] unsigned char 
  2997 ;;  rem             1    3[COMRAM] unsigned char 
  2998 ;;  counter         1    2[COMRAM] unsigned char 
  2999 ;; Return value:  Size  Location     Type
  3000 ;;                  1    wreg      unsigned char 
  3001 ;; Registers used:
  3002 ;;		wreg, status,2, status,0
  3003 ;; Tracked objects:
  3004 ;;		On entry : 0/0
  3005 ;;		On exit  : 0/0
  3006 ;;		Unchanged: 0/0
  3007 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3008 ;;      Params:         1       0       0       0       0       0       0
  3009 ;;      Locals:         3       0       0       0       0       0       0
  3010 ;;      Temps:          0       0       0       0       0       0       0
  3011 ;;      Totals:         4       0       0       0       0       0       0
  3012 ;;Total ram usage:        4 bytes
  3013 ;; Hardware stack levels used:    1
  3014 ;; This function calls:
  3015 ;;		Nothing
  3016 ;; This function is called by:
  3017 ;;		_fround
  3018 ;; This function uses a non-reentrant model
  3019 ;;
  3020                           
  3021                           	psect	text7
  3022  001E46                     __ptext7:
  3023                           	opt stack 0
  3024  001E46                     ___lbmod:
  3025                           	opt stack 28
  3026                           
  3027                           ;incstack = 0
  3028                           ;___lbmod@dividend stored from wreg
  3029  001E46  6E02               	movwf	___lbmod@dividend,c
  3030  001E48  0E08               	movlw	8
  3031  001E4A  6E03               	movwf	___lbmod@counter,c
  3032  001E4C  6A04               	clrf	___lbmod@rem,c
  3033  001E4E                     l2452:
  3034  001E4E  90D8               	bcf	status,0,c
  3035  001E50  3402               	rlcf	___lbmod@dividend,w,c
  3036  001E52  3404               	rlcf	___lbmod@rem,w,c
  3037  001E54  6E04               	movwf	___lbmod@rem,c
  3038  001E56  90D8               	bcf	status,0,c
  3039  001E58  3602               	rlcf	___lbmod@dividend,f,c
  3040  001E5A  5001               	movf	___lbmod@divisor,w,c
  3041  001E5C  5C04               	subwf	___lbmod@rem,w,c
  3042  001E5E  E302               	bnc	l2460
  3043  001E60  5001               	movf	___lbmod@divisor,w,c
  3044  001E62  5E04               	subwf	___lbmod@rem,f,c
  3045  001E64                     l2460:
  3046  001E64  2E03               	decfsz	___lbmod@counter,f,c
  3047  001E66  D7F3               	goto	l2452
  3048  001E68  5004               	movf	___lbmod@rem,w,c
  3049  001E6A  0012               	return		;funcret
  3050  001E6C                     __end_of___lbmod:
  3051                           	opt stack 0
  3052                           tblptru	equ	0xFF8
  3053                           tblptrh	equ	0xFF7
  3054                           tblptrl	equ	0xFF6
  3055                           tablat	equ	0xFF5
  3056                           prodh	equ	0xFF4
  3057                           prodl	equ	0xFF3
  3058                           indf0	equ	0xFEF
  3059                           fsr0h	equ	0xFEA
  3060                           fsr0l	equ	0xFE9
  3061                           wreg	equ	0xFE8
  3062                           indf2	equ	0xFDF
  3063                           postinc2	equ	0xFDE
  3064                           postdec2	equ	0xFDD
  3065                           fsr2h	equ	0xFDA
  3066                           fsr2l	equ	0xFD9
  3067                           status	equ	0xFD8
  3068                           
  3069 ;; *************** function ___lbdiv *****************
  3070 ;; Defined at:
  3071 ;;		line 4 in file "D:\Arquivos de Programas\Microchip\xc8\v1.34\sources\common\lbdiv.c"
  3072 ;; Parameters:    Size  Location     Type
  3073 ;;  dividend        1    wreg     unsigned char 
  3074 ;;  divisor         1    4[COMRAM] unsigned char 
  3075 ;; Auto vars:     Size  Location     Type
  3076 ;;  dividend        1    5[COMRAM] unsigned char 
  3077 ;;  quotient        1    7[COMRAM] unsigned char 
  3078 ;;  counter         1    6[COMRAM] unsigned char 
  3079 ;; Return value:  Size  Location     Type
  3080 ;;                  1    wreg      unsigned char 
  3081 ;; Registers used:
  3082 ;;		wreg, status,2, status,0
  3083 ;; Tracked objects:
  3084 ;;		On entry : 0/0
  3085 ;;		On exit  : 0/0
  3086 ;;		Unchanged: 0/0
  3087 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3088 ;;      Params:         1       0       0       0       0       0       0
  3089 ;;      Locals:         3       0       0       0       0       0       0
  3090 ;;      Temps:          0       0       0       0       0       0       0
  3091 ;;      Totals:         4       0       0       0       0       0       0
  3092 ;;Total ram usage:        4 bytes
  3093 ;; Hardware stack levels used:    1
  3094 ;; This function calls:
  3095 ;;		Nothing
  3096 ;; This function is called by:
  3097 ;;		_fround
  3098 ;; This function uses a non-reentrant model
  3099 ;;
  3100                           
  3101                           	psect	text8
  3102  001DE6                     __ptext8:
  3103                           	opt stack 0
  3104  001DE6                     ___lbdiv:
  3105                           	opt stack 28
  3106                           
  3107                           ;incstack = 0
  3108                           ;___lbdiv@dividend stored from wreg
  3109  001DE6  6E06               	movwf	___lbdiv@dividend,c
  3110  001DE8  6A08               	clrf	___lbdiv@quotient,c
  3111  001DEA  5005               	movf	___lbdiv@divisor,w,c
  3112  001DEC  E014               	bz	l2444
  3113  001DEE  0E01               	movlw	1
  3114  001DF0  6E07               	movwf	___lbdiv@counter,c
  3115  001DF2  D003               	goto	l2432
  3116  001DF4                     l2428:
  3117  001DF4  90D8               	bcf	status,0,c
  3118  001DF6  3605               	rlcf	___lbdiv@divisor,f,c
  3119  001DF8  2A07               	incf	___lbdiv@counter,f,c
  3120  001DFA                     l2432:
  3121  001DFA  AE05               	btfss	___lbdiv@divisor,7,c
  3122  001DFC  D7FB               	goto	l2428
  3123  001DFE                     l2434:
  3124  001DFE  90D8               	bcf	status,0,c
  3125  001E00  3608               	rlcf	___lbdiv@quotient,f,c
  3126  001E02  5005               	movf	___lbdiv@divisor,w,c
  3127  001E04  5C06               	subwf	___lbdiv@dividend,w,c
  3128  001E06  E303               	bnc	l2440
  3129  001E08  5005               	movf	___lbdiv@divisor,w,c
  3130  001E0A  5E06               	subwf	___lbdiv@dividend,f,c
  3131  001E0C  8008               	bsf	___lbdiv@quotient,0,c
  3132  001E0E                     l2440:
  3133  001E0E  90D8               	bcf	status,0,c
  3134  001E10  3205               	rrcf	___lbdiv@divisor,f,c
  3135  001E12  2E07               	decfsz	___lbdiv@counter,f,c
  3136  001E14  D7F4               	goto	l2434
  3137  001E16                     l2444:
  3138  001E16  5008               	movf	___lbdiv@quotient,w,c
  3139  001E18  0012               	return		;funcret
  3140  001E1A                     __end_of___lbdiv:
  3141                           	opt stack 0
  3142                           tblptru	equ	0xFF8
  3143                           tblptrh	equ	0xFF7
  3144                           tblptrl	equ	0xFF6
  3145                           tablat	equ	0xFF5
  3146                           prodh	equ	0xFF4
  3147                           prodl	equ	0xFF3
  3148                           indf0	equ	0xFEF
  3149                           fsr0h	equ	0xFEA
  3150                           fsr0l	equ	0xFE9
  3151                           wreg	equ	0xFE8
  3152                           indf2	equ	0xFDF
  3153                           postinc2	equ	0xFDE
  3154                           postdec2	equ	0xFDD
  3155                           fsr2h	equ	0xFDA
  3156                           fsr2l	equ	0xFD9
  3157                           status	equ	0xFD8
  3158                           
  3159 ;; *************** function ___ftmul *****************
  3160 ;; Defined at:
  3161 ;;		line 62 in file "D:\Arquivos de Programas\Microchip\xc8\v1.34\sources\common\ftmul.c"
  3162 ;; Parameters:    Size  Location     Type
  3163 ;;  f1              3   14[COMRAM] float 
  3164 ;;  f2              3   17[COMRAM] float 
  3165 ;; Auto vars:     Size  Location     Type
  3166 ;;  f3_as_produc    3   24[COMRAM] unsigned um
  3167 ;;  sign            1   28[COMRAM] unsigned char 
  3168 ;;  cntr            1   27[COMRAM] unsigned char 
  3169 ;;  exp             1   23[COMRAM] unsigned char 
  3170 ;; Return value:  Size  Location     Type
  3171 ;;                  3   14[COMRAM] float 
  3172 ;; Registers used:
  3173 ;;		wreg, status,2, status,0, cstack
  3174 ;; Tracked objects:
  3175 ;;		On entry : 0/0
  3176 ;;		On exit  : 0/0
  3177 ;;		Unchanged: 0/0
  3178 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3179 ;;      Params:         6       0       0       0       0       0       0
  3180 ;;      Locals:         6       0       0       0       0       0       0
  3181 ;;      Temps:          3       0       0       0       0       0       0
  3182 ;;      Totals:        15       0       0       0       0       0       0
  3183 ;;Total ram usage:       15 bytes
  3184 ;; Hardware stack levels used:    1
  3185 ;; Hardware stack levels required when called:    1
  3186 ;; This function calls:
  3187 ;;		___ftpack
  3188 ;; This function is called by:
  3189 ;;		_fround
  3190 ;;		_scale
  3191 ;;		_sprintf
  3192 ;; This function uses a non-reentrant model
  3193 ;;
  3194                           
  3195                           	psect	text9
  3196  0014E6                     __ptext9:
  3197                           	opt stack 0
  3198  0014E6                     ___ftmul:
  3199                           	opt stack 27
  3200                           
  3201                           ;incstack = 0
  3202  0014E6  C011  F015         	movff	___ftmul@f1+2,??___ftmul
  3203  0014EA  6A16               	clrf	(??___ftmul+1)& (0+255),c
  3204  0014EC  6A17               	clrf	(??___ftmul+2)& (0+255),c
  3205  0014EE  3410               	rlcf	___ftmul@f1+1,w,c
  3206  0014F0  3615               	rlcf	??___ftmul& (0+255),f,c
  3207  0014F2  E301               	bnc	u2071
  3208  0014F4  8016               	bsf	(??___ftmul+1)& (0+255),0,c
  3209  0014F6                     u2071:
  3210  0014F6  5015               	movf	??___ftmul,w,c
  3211  0014F8  6E18               	movwf	___ftmul@exp,c
  3212  0014FA  5018               	movf	___ftmul@exp,w,c
  3213  0014FC  E104               	bnz	l2290
  3214  0014FE  6A0F               	clrf	?___ftmul,c
  3215  001500  6A10               	clrf	?___ftmul+1,c
  3216  001502  6A11               	clrf	?___ftmul+2,c
  3217  001504  0012               	return	
  3218  001506                     l2290:
  3219  001506  C014  F015         	movff	___ftmul@f2+2,??___ftmul
  3220  00150A  6A16               	clrf	(??___ftmul+1)& (0+255),c
  3221  00150C  6A17               	clrf	(??___ftmul+2)& (0+255),c
  3222  00150E  3413               	rlcf	___ftmul@f2+1,w,c
  3223  001510  3615               	rlcf	??___ftmul& (0+255),f,c
  3224  001512  E301               	bnc	u2091
  3225  001514  8016               	bsf	(??___ftmul+1)& (0+255),0,c
  3226  001516                     u2091:
  3227  001516  5015               	movf	??___ftmul,w,c
  3228  001518  6E1D               	movwf	___ftmul@sign,c
  3229  00151A  501D               	movf	___ftmul@sign,w,c
  3230  00151C  E104               	bnz	l2294
  3231  00151E  6A0F               	clrf	?___ftmul,c
  3232  001520  6A10               	clrf	?___ftmul+1,c
  3233  001522  6A11               	clrf	?___ftmul+2,c
  3234  001524  0012               	return	
  3235  001526                     l2294:
  3236  001526  501D               	movf	___ftmul@sign,w,c
  3237  001528  0F7B               	addlw	123
  3238  00152A  2618               	addwf	___ftmul@exp,f,c
  3239  00152C  C011  F01D         	movff	___ftmul@f1+2,___ftmul@sign
  3240  001530  5014               	movf	___ftmul@f2+2,w,c
  3241  001532  1A1D               	xorwf	___ftmul@sign,f,c
  3242  001534  0E80               	movlw	128
  3243  001536  161D               	andwf	___ftmul@sign,f,c
  3244  001538  8E10               	bsf	___ftmul@f1+1,7,c
  3245  00153A  8E13               	bsf	___ftmul@f2+1,7,c
  3246  00153C  0E00               	movlw	0
  3247  00153E  1614               	andwf	___ftmul@f2+2,f,c
  3248  001540  6A19               	clrf	___ftmul@f3_as_product,c
  3249  001542  6A1A               	clrf	___ftmul@f3_as_product+1,c
  3250  001544  6A1B               	clrf	___ftmul@f3_as_product+2,c
  3251  001546  0E07               	movlw	7
  3252  001548  6E1C               	movwf	___ftmul@cntr,c
  3253  00154A                     l2308:
  3254  00154A  B00F               	btfsc	___ftmul@f1,0,c
  3255  00154C  D82B               	call	PL58	;call to abstracted procedure
  3256  00154E  90D8               	bcf	status,0,c
  3257  001550  3211               	rrcf	___ftmul@f1+2,f,c
  3258  001552  3210               	rrcf	___ftmul@f1+1,f,c
  3259  001554  320F               	rrcf	___ftmul@f1,f,c
  3260  001556  90D8               	bcf	status,0,c
  3261  001558  3612               	rlcf	___ftmul@f2,f,c
  3262  00155A  3613               	rlcf	___ftmul@f2+1,f,c
  3263  00155C  3614               	rlcf	___ftmul@f2+2,f,c
  3264  00155E  2E1C               	decfsz	___ftmul@cntr,f,c
  3265  001560  D7F4               	goto	l2308
  3266  001562  0E09               	movlw	9
  3267  001564  6E1C               	movwf	___ftmul@cntr,c
  3268  001566                     l2318:
  3269  001566  B00F               	btfsc	___ftmul@f1,0,c
  3270  001568  D81D               	call	PL58	;call to abstracted procedure
  3271  00156A  90D8               	bcf	status,0,c
  3272  00156C  3211               	rrcf	___ftmul@f1+2,f,c
  3273  00156E  3210               	rrcf	___ftmul@f1+1,f,c
  3274  001570  320F               	rrcf	___ftmul@f1,f,c
  3275  001572  90D8               	bcf	status,0,c
  3276  001574  321B               	rrcf	___ftmul@f3_as_product+2,f,c
  3277  001576  321A               	rrcf	___ftmul@f3_as_product+1,f,c
  3278  001578  3219               	rrcf	___ftmul@f3_as_product,f,c
  3279  00157A  2E1C               	decfsz	___ftmul@cntr,f,c
  3280  00157C  D7F4               	goto	l2318
  3281  00157E  C019  F001         	movff	___ftmul@f3_as_product,___ftpack@arg
  3282  001582  C01A  F002         	movff	___ftmul@f3_as_product+1,___ftpack@arg+1
  3283  001586  C01B  F003         	movff	___ftmul@f3_as_product+2,___ftpack@arg+2
  3284  00158A  C018  F004         	movff	___ftmul@exp,___ftpack@exp
  3285  00158E  C01D  F005         	movff	___ftmul@sign,___ftpack@sign
  3286  001592  ECD4  F00C         	call	___ftpack	;wreg free
  3287  001596  C001  F00F         	movff	?___ftpack,?___ftmul
  3288  00159A  C002  F010         	movff	?___ftpack+1,?___ftmul+1
  3289  00159E  C003  F011         	movff	?___ftpack+2,?___ftmul+2
  3290  0015A2  0012               	return		;funcret
  3291  0015A4                     __end_of___ftmul:
  3292                           	opt stack 0
  3293  0015A4                     PL58:
  3294                           	opt stack 27
  3295  0015A4  5012               	movf	___ftmul@f2,w,c
  3296  0015A6  2619               	addwf	___ftmul@f3_as_product,f,c
  3297  0015A8  5013               	movf	___ftmul@f2+1,w,c
  3298  0015AA  221A               	addwfc	___ftmul@f3_as_product+1,f,c
  3299  0015AC  5014               	movf	___ftmul@f2+2,w,c
  3300  0015AE  221B               	addwfc	___ftmul@f3_as_product+2,f,c
  3301  0015B0  0012               	return	
  3302  0015B2                     __end_ofPL58:
  3303                           	opt stack 0
  3304                           tblptru	equ	0xFF8
  3305                           tblptrh	equ	0xFF7
  3306                           tblptrl	equ	0xFF6
  3307                           tablat	equ	0xFF5
  3308                           prodh	equ	0xFF4
  3309                           prodl	equ	0xFF3
  3310                           indf0	equ	0xFEF
  3311                           fsr0h	equ	0xFEA
  3312                           fsr0l	equ	0xFE9
  3313                           wreg	equ	0xFE8
  3314                           indf2	equ	0xFDF
  3315                           postinc2	equ	0xFDE
  3316                           postdec2	equ	0xFDD
  3317                           fsr2h	equ	0xFDA
  3318                           fsr2l	equ	0xFD9
  3319                           status	equ	0xFD8
  3320                           
  3321 ;; *************** function __tdiv_to_l_ *****************
  3322 ;; Defined at:
  3323 ;;		line 60 in file "D:\Arquivos de Programas\Microchip\xc8\v1.34\sources\common\ftdivl.c"
  3324 ;; Parameters:    Size  Location     Type
  3325 ;;  f1              3    0[COMRAM] float 
  3326 ;;  f2              3    3[COMRAM] float 
  3327 ;; Auto vars:     Size  Location     Type
  3328 ;;  quot            4    9[COMRAM] unsigned long 
  3329 ;;  exp1            1   14[COMRAM] unsigned char 
  3330 ;;  cntr            1   13[COMRAM] unsigned char 
  3331 ;; Return value:  Size  Location     Type
  3332 ;;                  4    0[COMRAM] unsigned long 
  3333 ;; Registers used:
  3334 ;;		wreg, status,2, status,0
  3335 ;; Tracked objects:
  3336 ;;		On entry : 0/0
  3337 ;;		On exit  : 0/0
  3338 ;;		Unchanged: 0/0
  3339 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3340 ;;      Params:         6       0       0       0       0       0       0
  3341 ;;      Locals:         6       0       0       0       0       0       0
  3342 ;;      Temps:          3       0       0       0       0       0       0
  3343 ;;      Totals:        15       0       0       0       0       0       0
  3344 ;;Total ram usage:       15 bytes
  3345 ;; Hardware stack levels used:    1
  3346 ;; This function calls:
  3347 ;;		Nothing
  3348 ;; This function is called by:
  3349 ;;		_sprintf
  3350 ;; This function uses a non-reentrant model
  3351 ;;
  3352                           
  3353                           	psect	text10
  3354  001416                     __ptext10:
  3355                           	opt stack 0
  3356  001416                     __tdiv_to_l_:
  3357                           	opt stack 29
  3358                           
  3359                           ;incstack = 0
  3360  001416  C003  F007         	movff	__tdiv_to_l_@f1+2,??__tdiv_to_l_
  3361  00141A  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3362  00141C  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3363  00141E  3402               	rlcf	__tdiv_to_l_@f1+1,w,c
  3364  001420  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3365  001422  E301               	bnc	u2391
  3366  001424  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3367  001426                     u2391:
  3368  001426  5007               	movf	??__tdiv_to_l_,w,c
  3369  001428  6E0F               	movwf	__tdiv_to_l_@exp1,c
  3370  00142A  500F               	movf	__tdiv_to_l_@exp1,w,c
  3371  00142C  E105               	bnz	l2546
  3372  00142E                     l2544:
  3373  00142E  6A01               	clrf	?__tdiv_to_l_,c
  3374  001430  6A02               	clrf	?__tdiv_to_l_+1,c
  3375  001432  6A03               	clrf	?__tdiv_to_l_+2,c
  3376  001434  6A04               	clrf	?__tdiv_to_l_+3,c
  3377  001436  0012               	return	
  3378  001438                     l2546:
  3379  001438  C006  F007         	movff	__tdiv_to_l_@f2+2,??__tdiv_to_l_
  3380  00143C  6A08               	clrf	(??__tdiv_to_l_+1)& (0+255),c
  3381  00143E  6A09               	clrf	(??__tdiv_to_l_+2)& (0+255),c
  3382  001440  3405               	rlcf	__tdiv_to_l_@f2+1,w,c
  3383  001442  3607               	rlcf	??__tdiv_to_l_& (0+255),f,c
  3384  001444  E301               	bnc	u2411
  3385  001446  8008               	bsf	(??__tdiv_to_l_+1)& (0+255),0,c
  3386  001448                     u2411:
  3387  001448  5007               	movf	??__tdiv_to_l_,w,c
  3388  00144A  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3389  00144C  500E               	movf	__tdiv_to_l_@cntr,w,c
  3390  00144E  E0EF               	bz	l2544
  3391  001450  8E02               	bsf	__tdiv_to_l_@f1+1,7,c
  3392  001452  6A03               	clrf	__tdiv_to_l_@f1+2,c
  3393  001454  8E05               	bsf	__tdiv_to_l_@f2+1,7,c
  3394  001456  6A06               	clrf	__tdiv_to_l_@f2+2,c
  3395  001458  6A0A               	clrf	__tdiv_to_l_@quot,c
  3396  00145A  6A0B               	clrf	__tdiv_to_l_@quot+1,c
  3397  00145C  6A0C               	clrf	__tdiv_to_l_@quot+2,c
  3398  00145E  6A0D               	clrf	__tdiv_to_l_@quot+3,c
  3399  001460  0E7F               	movlw	127
  3400  001462  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3401  001464  500E               	movf	__tdiv_to_l_@cntr,w,c
  3402  001466  0F98               	addlw	152
  3403  001468  5E0F               	subwf	__tdiv_to_l_@exp1,f,c
  3404  00146A  0E18               	movlw	24
  3405  00146C  6E0E               	movwf	__tdiv_to_l_@cntr,c
  3406  00146E                     l2564:
  3407  00146E  90D8               	bcf	status,0,c
  3408  001470  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3409  001472  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3410  001474  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3411  001476  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3412  001478  5004               	movf	__tdiv_to_l_@f2,w,c
  3413  00147A  5C01               	subwf	__tdiv_to_l_@f1,w,c
  3414  00147C  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3415  00147E  5802               	subwfb	__tdiv_to_l_@f1+1,w,c
  3416  001480  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3417  001482  5803               	subwfb	__tdiv_to_l_@f1+2,w,c
  3418  001484  E307               	bnc	l776
  3419  001486  5004               	movf	__tdiv_to_l_@f2,w,c
  3420  001488  5E01               	subwf	__tdiv_to_l_@f1,f,c
  3421  00148A  5005               	movf	__tdiv_to_l_@f2+1,w,c
  3422  00148C  5A02               	subwfb	__tdiv_to_l_@f1+1,f,c
  3423  00148E  5006               	movf	__tdiv_to_l_@f2+2,w,c
  3424  001490  5A03               	subwfb	__tdiv_to_l_@f1+2,f,c
  3425  001492  800A               	bsf	__tdiv_to_l_@quot,0,c
  3426  001494                     l776:
  3427  001494  90D8               	bcf	status,0,c
  3428  001496  3601               	rlcf	__tdiv_to_l_@f1,f,c
  3429  001498  3602               	rlcf	__tdiv_to_l_@f1+1,f,c
  3430  00149A  3603               	rlcf	__tdiv_to_l_@f1+2,f,c
  3431  00149C  2E0E               	decfsz	__tdiv_to_l_@cntr,f,c
  3432  00149E  D7E7               	goto	l2564
  3433  0014A0  AE0F               	btfss	__tdiv_to_l_@exp1,7,c
  3434  0014A2  D00C               	goto	l2584
  3435  0014A4  500F               	movf	__tdiv_to_l_@exp1,w,c
  3436  0014A6  0A80               	xorlw	128
  3437  0014A8  0F97               	addlw	151
  3438  0014AA  E3C1               	bnc	l2544
  3439  0014AC                     l2580:
  3440  0014AC  90D8               	bcf	status,0,c
  3441  0014AE  320D               	rrcf	__tdiv_to_l_@quot+3,f,c
  3442  0014B0  320C               	rrcf	__tdiv_to_l_@quot+2,f,c
  3443  0014B2  320B               	rrcf	__tdiv_to_l_@quot+1,f,c
  3444  0014B4  320A               	rrcf	__tdiv_to_l_@quot,f,c
  3445  0014B6  3E0F               	incfsz	__tdiv_to_l_@exp1,f,c
  3446  0014B8  D7F9               	goto	l2580
  3447  0014BA  D00C               	goto	l782
  3448  0014BC                     l2584:
  3449  0014BC  0E17               	movlw	23
  3450  0014BE  640F               	cpfsgt	__tdiv_to_l_@exp1,c
  3451  0014C0  D007               	goto	l2590
  3452  0014C2  D7B5               	goto	l2544
  3453  0014C4                     l2588:
  3454  0014C4  90D8               	bcf	status,0,c
  3455  0014C6  360A               	rlcf	__tdiv_to_l_@quot,f,c
  3456  0014C8  360B               	rlcf	__tdiv_to_l_@quot+1,f,c
  3457  0014CA  360C               	rlcf	__tdiv_to_l_@quot+2,f,c
  3458  0014CC  360D               	rlcf	__tdiv_to_l_@quot+3,f,c
  3459  0014CE  060F               	decf	__tdiv_to_l_@exp1,f,c
  3460  0014D0                     l2590:
  3461  0014D0  500F               	movf	__tdiv_to_l_@exp1,w,c
  3462  0014D2  E1F8               	bnz	l2588
  3463  0014D4                     l782:
  3464  0014D4  C00A  F001         	movff	__tdiv_to_l_@quot,?__tdiv_to_l_
  3465  0014D8  C00B  F002         	movff	__tdiv_to_l_@quot+1,?__tdiv_to_l_+1
  3466  0014DC  C00C  F003         	movff	__tdiv_to_l_@quot+2,?__tdiv_to_l_+2
  3467  0014E0  C00D  F004         	movff	__tdiv_to_l_@quot+3,?__tdiv_to_l_+3
  3468  0014E4  0012               	return		;funcret
  3469  0014E6                     __end_of__tdiv_to_l_:
  3470                           	opt stack 0
  3471                           tblptru	equ	0xFF8
  3472                           tblptrh	equ	0xFF7
  3473                           tblptrl	equ	0xFF6
  3474                           tablat	equ	0xFF5
  3475                           prodh	equ	0xFF4
  3476                           prodl	equ	0xFF3
  3477                           indf0	equ	0xFEF
  3478                           fsr0h	equ	0xFEA
  3479                           fsr0l	equ	0xFE9
  3480                           wreg	equ	0xFE8
  3481                           indf2	equ	0xFDF
  3482                           postinc2	equ	0xFDE
  3483                           postdec2	equ	0xFDD
  3484                           fsr2h	equ	0xFDA
  3485                           fsr2l	equ	0xFD9
  3486                           status	equ	0xFD8
  3487                           
  3488 ;; *************** function __div_to_l_ *****************
  3489 ;; Defined at:
  3490 ;;		line 60 in file "D:\Arquivos de Programas\Microchip\xc8\v1.34\sources\common\fldivl.c"
  3491 ;; Parameters:    Size  Location     Type
  3492 ;;  f1              3    0[COMRAM] unsigned long 
  3493 ;;  f2              3    3[COMRAM] unsigned long 
  3494 ;; Auto vars:     Size  Location     Type
  3495 ;;  quot            4    6[COMRAM] unsigned long 
  3496 ;;  exp1            1   11[COMRAM] unsigned char 
  3497 ;;  cntr            1   10[COMRAM] unsigned char 
  3498 ;; Return value:  Size  Location     Type
  3499 ;;                  4    0[COMRAM] unsigned long 
  3500 ;; Registers used:
  3501 ;;		wreg, status,2, status,0
  3502 ;; Tracked objects:
  3503 ;;		On entry : 0/0
  3504 ;;		On exit  : 0/0
  3505 ;;		Unchanged: 0/0
  3506 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3507 ;;      Params:         6       0       0       0       0       0       0
  3508 ;;      Locals:         6       0       0       0       0       0       0
  3509 ;;      Temps:          0       0       0       0       0       0       0
  3510 ;;      Totals:        12       0       0       0       0       0       0
  3511 ;;Total ram usage:       12 bytes
  3512 ;; Hardware stack levels used:    1
  3513 ;; This function calls:
  3514 ;;		Nothing
  3515 ;; This function is called by:
  3516 ;;		_sprintf
  3517 ;; This function uses a non-reentrant model
  3518 ;;
  3519                           
  3520                           	psect	text11
  3521  0015B2                     __ptext11:
  3522                           	opt stack 0
  3523  0015B2                     __div_to_l_:
  3524                           	opt stack 29
  3525                           
  3526                           ;incstack = 0
  3527  0015B2  3403               	rlcf	__div_to_l_@f1+2,w,c
  3528  0015B4  3404               	rlcf	__div_to_l_@f1+3,w,c
  3529  0015B6  6E0C               	movwf	__div_to_l_@exp1,c
  3530  0015B8  500C               	movf	__div_to_l_@exp1,w,c
  3531  0015BA  E105               	bnz	l2596
  3532  0015BC                     l2594:
  3533  0015BC  6A01               	clrf	?__div_to_l_,c
  3534  0015BE  6A02               	clrf	?__div_to_l_+1,c
  3535  0015C0  6A03               	clrf	?__div_to_l_+2,c
  3536  0015C2  6A04               	clrf	?__div_to_l_+3,c
  3537  0015C4  0012               	return	
  3538  0015C6                     l2596:
  3539  0015C6  3406               	rlcf	__div_to_l_@f2+2,w,c
  3540  0015C8  3407               	rlcf	__div_to_l_@f2+3,w,c
  3541  0015CA  6E0B               	movwf	__div_to_l_@cntr,c
  3542  0015CC  500B               	movf	__div_to_l_@cntr,w,c
  3543  0015CE  E0F6               	bz	l2594
  3544  0015D0  8E03               	bsf	__div_to_l_@f1+2,7,c
  3545  0015D2  6A04               	clrf	__div_to_l_@f1+3,c
  3546  0015D4  8E06               	bsf	__div_to_l_@f2+2,7,c
  3547  0015D6  6A07               	clrf	__div_to_l_@f2+3,c
  3548  0015D8  6A07               	clrf	__div_to_l_@quot,c
  3549  0015DA  6A08               	clrf	__div_to_l_@quot+1,c
  3550  0015DC  6A09               	clrf	__div_to_l_@quot+2,c
  3551  0015DE  6A0A               	clrf	__div_to_l_@quot+3,c
  3552  0015E0  0E7F               	movlw	127
  3553  0015E2  5E0C               	subwf	__div_to_l_@exp1,f,c
  3554  0015E4  500B               	movf	__div_to_l_@cntr,w,c
  3555  0015E6  0FA0               	addlw	160
  3556  0015E8  5E0C               	subwf	__div_to_l_@exp1,f,c
  3557  0015EA  0E20               	movlw	32
  3558  0015EC  6E0B               	movwf	__div_to_l_@cntr,c
  3559  0015EE                     l2610:
  3560  0015EE  90D8               	bcf	status,0,c
  3561  0015F0  3607               	rlcf	__div_to_l_@quot,f,c
  3562  0015F2  3608               	rlcf	__div_to_l_@quot+1,f,c
  3563  0015F4  3609               	rlcf	__div_to_l_@quot+2,f,c
  3564  0015F6  360A               	rlcf	__div_to_l_@quot+3,f,c
  3565  0015F8  5004               	movf	__div_to_l_@f2,w,c
  3566  0015FA  5C01               	subwf	__div_to_l_@f1,w,c
  3567  0015FC  5005               	movf	__div_to_l_@f2+1,w,c
  3568  0015FE  5802               	subwfb	__div_to_l_@f1+1,w,c
  3569  001600  5006               	movf	__div_to_l_@f2+2,w,c
  3570  001602  5803               	subwfb	__div_to_l_@f1+2,w,c
  3571  001604  5007               	movf	__div_to_l_@f2+3,w,c
  3572  001606  5804               	subwfb	__div_to_l_@f1+3,w,c
  3573  001608  E309               	bnc	l2618
  3574  00160A  5004               	movf	__div_to_l_@f2,w,c
  3575  00160C  5E01               	subwf	__div_to_l_@f1,f,c
  3576  00160E  5005               	movf	__div_to_l_@f2+1,w,c
  3577  001610  5A02               	subwfb	__div_to_l_@f1+1,f,c
  3578  001612  5006               	movf	__div_to_l_@f2+2,w,c
  3579  001614  5A03               	subwfb	__div_to_l_@f1+2,f,c
  3580  001616  5007               	movf	__div_to_l_@f2+3,w,c
  3581  001618  5A04               	subwfb	__div_to_l_@f1+3,f,c
  3582  00161A  8007               	bsf	__div_to_l_@quot,0,c
  3583  00161C                     l2618:
  3584  00161C  90D8               	bcf	status,0,c
  3585  00161E  3601               	rlcf	__div_to_l_@f1,f,c
  3586  001620  3602               	rlcf	__div_to_l_@f1+1,f,c
  3587  001622  3603               	rlcf	__div_to_l_@f1+2,f,c
  3588  001624  3604               	rlcf	__div_to_l_@f1+3,f,c
  3589  001626  2E0B               	decfsz	__div_to_l_@cntr,f,c
  3590  001628  D7E2               	goto	l2610
  3591  00162A  AE0C               	btfss	__div_to_l_@exp1,7,c
  3592  00162C  D00C               	goto	l2632
  3593  00162E  500C               	movf	__div_to_l_@exp1,w,c
  3594  001630  0A80               	xorlw	128
  3595  001632  0F9F               	addlw	159
  3596  001634  E3C3               	bnc	l2594
  3597  001636                     l2628:
  3598  001636  90D8               	bcf	status,0,c
  3599  001638  320A               	rrcf	__div_to_l_@quot+3,f,c
  3600  00163A  3209               	rrcf	__div_to_l_@quot+2,f,c
  3601  00163C  3208               	rrcf	__div_to_l_@quot+1,f,c
  3602  00163E  3207               	rrcf	__div_to_l_@quot,f,c
  3603  001640  3E0C               	incfsz	__div_to_l_@exp1,f,c
  3604  001642  D7F9               	goto	l2628
  3605  001644  D00C               	goto	l661
  3606  001646                     l2632:
  3607  001646  0E1F               	movlw	31
  3608  001648  640C               	cpfsgt	__div_to_l_@exp1,c
  3609  00164A  D007               	goto	l2638
  3610  00164C  D7B7               	goto	l2594
  3611  00164E                     l2636:
  3612  00164E  90D8               	bcf	status,0,c
  3613  001650  3607               	rlcf	__div_to_l_@quot,f,c
  3614  001652  3608               	rlcf	__div_to_l_@quot+1,f,c
  3615  001654  3609               	rlcf	__div_to_l_@quot+2,f,c
  3616  001656  360A               	rlcf	__div_to_l_@quot+3,f,c
  3617  001658  060C               	decf	__div_to_l_@exp1,f,c
  3618  00165A                     l2638:
  3619  00165A  500C               	movf	__div_to_l_@exp1,w,c
  3620  00165C  E1F8               	bnz	l2636
  3621  00165E                     l661:
  3622  00165E  C007  F001         	movff	__div_to_l_@quot,?__div_to_l_
  3623  001662  C008  F002         	movff	__div_to_l_@quot+1,?__div_to_l_+1
  3624  001666  C009  F003         	movff	__div_to_l_@quot+2,?__div_to_l_+2
  3625  00166A  C00A  F004         	movff	__div_to_l_@quot+3,?__div_to_l_+3
  3626  00166E  0012               	return		;funcret
  3627  001670                     __end_of__div_to_l_:
  3628                           	opt stack 0
  3629                           tblptru	equ	0xFF8
  3630                           tblptrh	equ	0xFF7
  3631                           tblptrl	equ	0xFF6
  3632                           tablat	equ	0xFF5
  3633                           prodh	equ	0xFF4
  3634                           prodl	equ	0xFF3
  3635                           indf0	equ	0xFEF
  3636                           fsr0h	equ	0xFEA
  3637                           fsr0l	equ	0xFE9
  3638                           wreg	equ	0xFE8
  3639                           indf2	equ	0xFDF
  3640                           postinc2	equ	0xFDE
  3641                           postdec2	equ	0xFDD
  3642                           fsr2h	equ	0xFDA
  3643                           fsr2l	equ	0xFD9
  3644                           status	equ	0xFD8
  3645                           
  3646 ;; *************** function ___wmul *****************
  3647 ;; Defined at:
  3648 ;;		line 15 in file "D:\Arquivos de Programas\Microchip\xc8\v1.34\sources\common\Umul16.c"
  3649 ;; Parameters:    Size  Location     Type
  3650 ;;  multiplier      2    0[COMRAM] unsigned int 
  3651 ;;  multiplicand    2    2[COMRAM] unsigned int 
  3652 ;; Auto vars:     Size  Location     Type
  3653 ;;  product         2    4[COMRAM] unsigned int 
  3654 ;; Return value:  Size  Location     Type
  3655 ;;                  2    0[COMRAM] unsigned int 
  3656 ;; Registers used:
  3657 ;;		wreg, status,2, status,0, prodl, prodh
  3658 ;; Tracked objects:
  3659 ;;		On entry : 0/0
  3660 ;;		On exit  : 0/0
  3661 ;;		Unchanged: 0/0
  3662 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3663 ;;      Params:         4       0       0       0       0       0       0
  3664 ;;      Locals:         2       0       0       0       0       0       0
  3665 ;;      Temps:          0       0       0       0       0       0       0
  3666 ;;      Totals:         6       0       0       0       0       0       0
  3667 ;;Total ram usage:        6 bytes
  3668 ;; Hardware stack levels used:    1
  3669 ;; This function calls:
  3670 ;;		Nothing
  3671 ;; This function is called by:
  3672 ;;		_sprintf
  3673 ;; This function uses a non-reentrant model
  3674 ;;
  3675                           
  3676                           	psect	text12
  3677  001E6C                     __ptext12:
  3678                           	opt stack 0
  3679  001E6C                     ___wmul:
  3680                           	opt stack 29
  3681                           
  3682                           ;incstack = 0
  3683  001E6C  5001               	movf	___wmul@multiplier,w,c
  3684  001E6E  0203               	mulwf	___wmul@multiplicand,c
  3685  001E70  CFF3 F005          	movff	prodl,___wmul@product
  3686  001E74  CFF4 F006          	movff	prodh,___wmul@product+1
  3687  001E78  5001               	movf	___wmul@multiplier,w,c
  3688  001E7A  0204               	mulwf	___wmul@multiplicand+1,c
  3689  001E7C  50F3               	movf	prodl,w,c
  3690  001E7E  2606               	addwf	___wmul@product+1,f,c
  3691  001E80  5002               	movf	___wmul@multiplier+1,w,c
  3692  001E82  0203               	mulwf	___wmul@multiplicand,c
  3693  001E84  50F3               	movf	prodl,w,c
  3694  001E86  2606               	addwf	___wmul@product+1,f,c
  3695  001E88  C005  F001         	movff	___wmul@product,?___wmul
  3696  001E8C  C006  F002         	movff	___wmul@product+1,?___wmul+1
  3697  001E90  0012               	return		;funcret
  3698  001E92                     __end_of___wmul:
  3699                           	opt stack 0
  3700                           tblptru	equ	0xFF8
  3701                           tblptrh	equ	0xFF7
  3702                           tblptrl	equ	0xFF6
  3703                           tablat	equ	0xFF5
  3704                           prodh	equ	0xFF4
  3705                           prodl	equ	0xFF3
  3706                           indf0	equ	0xFEF
  3707                           fsr0h	equ	0xFEA
  3708                           fsr0l	equ	0xFE9
  3709                           wreg	equ	0xFE8
  3710                           indf2	equ	0xFDF
  3711                           postinc2	equ	0xFDE
  3712                           postdec2	equ	0xFDD
  3713                           fsr2h	equ	0xFDA
  3714                           fsr2l	equ	0xFD9
  3715                           status	equ	0xFD8
  3716                           
  3717 ;; *************** function ___lltoft *****************
  3718 ;; Defined at:
  3719 ;;		line 35 in file "D:\Arquivos de Programas\Microchip\xc8\v1.34\sources\common\lltoft.c"
  3720 ;; Parameters:    Size  Location     Type
  3721 ;;  c               4    8[COMRAM] unsigned long 
  3722 ;; Auto vars:     Size  Location     Type
  3723 ;;  exp             1   16[COMRAM] unsigned char 
  3724 ;; Return value:  Size  Location     Type
  3725 ;;                  3    8[COMRAM] float 
  3726 ;; Registers used:
  3727 ;;		wreg, status,2, status,0, cstack
  3728 ;; Tracked objects:
  3729 ;;		On entry : 0/0
  3730 ;;		On exit  : 0/0
  3731 ;;		Unchanged: 0/0
  3732 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3733 ;;      Params:         4       0       0       0       0       0       0
  3734 ;;      Locals:         1       0       0       0       0       0       0
  3735 ;;      Temps:          4       0       0       0       0       0       0
  3736 ;;      Totals:         9       0       0       0       0       0       0
  3737 ;;Total ram usage:        9 bytes
  3738 ;; Hardware stack levels used:    1
  3739 ;; Hardware stack levels required when called:    1
  3740 ;; This function calls:
  3741 ;;		___ftpack
  3742 ;; This function is called by:
  3743 ;;		_sprintf
  3744 ;; This function uses a non-reentrant model
  3745 ;;
  3746                           
  3747                           	psect	text13
  3748  001CF0                     __ptext13:
  3749                           	opt stack 0
  3750  001CF0                     ___lltoft:
  3751                           	opt stack 28
  3752                           
  3753                           ;incstack = 0
  3754  001CF0  0E8E               	movlw	142
  3755  001CF2  6E11               	movwf	___lltoft@exp,c
  3756  001CF4  D006               	goto	l2758
  3757  001CF6                     l2756:
  3758  001CF6  90D8               	bcf	status,0,c
  3759  001CF8  320C               	rrcf	___lltoft@c+3,f,c
  3760  001CFA  320B               	rrcf	___lltoft@c+2,f,c
  3761  001CFC  320A               	rrcf	___lltoft@c+1,f,c
  3762  001CFE  3209               	rrcf	___lltoft@c,f,c
  3763  001D00  2A11               	incf	___lltoft@exp,f,c
  3764  001D02                     l2758:
  3765  001D02  6A0D               	clrf	??___lltoft& (0+255),c
  3766  001D04  6A0E               	clrf	(??___lltoft+1)& (0+255),c
  3767  001D06  6A0F               	clrf	(??___lltoft+2)& (0+255),c
  3768  001D08  500C               	movf	___lltoft@c+3,w,c
  3769  001D0A  6E10               	movwf	(??___lltoft+3)& (0+255),c
  3770  001D0C  500D               	movf	??___lltoft,w,c
  3771  001D0E  100E               	iorwf	??___lltoft+1,w,c
  3772  001D10  100F               	iorwf	??___lltoft+2,w,c
  3773  001D12  1010               	iorwf	??___lltoft+3,w,c
  3774  001D14  E1F0               	bnz	l2756
  3775  001D16  C009  F001         	movff	___lltoft@c,___ftpack@arg
  3776  001D1A  C00A  F002         	movff	___lltoft@c+1,___ftpack@arg+1
  3777  001D1E  C00B  F003         	movff	___lltoft@c+2,___ftpack@arg+2
  3778  001D22  C011  F004         	movff	___lltoft@exp,___ftpack@exp
  3779  001D26  0E00               	movlw	0
  3780  001D28  6E05               	movwf	___ftpack@sign,c
  3781  001D2A  ECD4  F00C         	call	___ftpack	;wreg free
  3782  001D2E  C001  F009         	movff	?___ftpack,?___lltoft
  3783  001D32  C002  F00A         	movff	?___ftpack+1,?___lltoft+1
  3784  001D36  C003  F00B         	movff	?___ftpack+2,?___lltoft+2
  3785  001D3A  0012               	return		;funcret
  3786  001D3C                     __end_of___lltoft:
  3787                           	opt stack 0
  3788                           tblptru	equ	0xFF8
  3789                           tblptrh	equ	0xFF7
  3790                           tblptrl	equ	0xFF6
  3791                           tablat	equ	0xFF5
  3792                           prodh	equ	0xFF4
  3793                           prodl	equ	0xFF3
  3794                           indf0	equ	0xFEF
  3795                           fsr0h	equ	0xFEA
  3796                           fsr0l	equ	0xFE9
  3797                           wreg	equ	0xFE8
  3798                           indf2	equ	0xFDF
  3799                           postinc2	equ	0xFDE
  3800                           postdec2	equ	0xFDD
  3801                           fsr2h	equ	0xFDA
  3802                           fsr2l	equ	0xFD9
  3803                           status	equ	0xFD8
  3804                           
  3805 ;; *************** function ___llmod *****************
  3806 ;; Defined at:
  3807 ;;		line 8 in file "D:\Arquivos de Programas\Microchip\xc8\v1.34\sources\common\llmod.c"
  3808 ;; Parameters:    Size  Location     Type
  3809 ;;  dividend        4    0[COMRAM] unsigned long 
  3810 ;;  divisor         4    4[COMRAM] unsigned long 
  3811 ;; Auto vars:     Size  Location     Type
  3812 ;;  counter         1    8[COMRAM] unsigned char 
  3813 ;; Return value:  Size  Location     Type
  3814 ;;                  4    0[COMRAM] unsigned long 
  3815 ;; Registers used:
  3816 ;;		wreg, status,2, status,0
  3817 ;; Tracked objects:
  3818 ;;		On entry : 0/0
  3819 ;;		On exit  : 0/0
  3820 ;;		Unchanged: 0/0
  3821 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3822 ;;      Params:         8       0       0       0       0       0       0
  3823 ;;      Locals:         1       0       0       0       0       0       0
  3824 ;;      Temps:          0       0       0       0       0       0       0
  3825 ;;      Totals:         9       0       0       0       0       0       0
  3826 ;;Total ram usage:        9 bytes
  3827 ;; Hardware stack levels used:    1
  3828 ;; This function calls:
  3829 ;;		Nothing
  3830 ;; This function is called by:
  3831 ;;		_sprintf
  3832 ;; This function uses a non-reentrant model
  3833 ;;
  3834                           
  3835                           	psect	text14
  3836  001B86                     __ptext14:
  3837                           	opt stack 0
  3838  001B86                     ___llmod:
  3839                           	opt stack 29
  3840                           
  3841                           ;incstack = 0
  3842  001B86  5005               	movf	___llmod@divisor,w,c
  3843  001B88  1006               	iorwf	___llmod@divisor+1,w,c
  3844  001B8A  1007               	iorwf	___llmod@divisor+2,w,c
  3845  001B8C  1008               	iorwf	___llmod@divisor+3,w,c
  3846  001B8E  E023               	bz	l872
  3847  001B90  0E01               	movlw	1
  3848  001B92  6E09               	movwf	___llmod@counter,c
  3849  001B94  D006               	goto	l2744
  3850  001B96                     l2742:
  3851  001B96  90D8               	bcf	status,0,c
  3852  001B98  3605               	rlcf	___llmod@divisor,f,c
  3853  001B9A  3606               	rlcf	___llmod@divisor+1,f,c
  3854  001B9C  3607               	rlcf	___llmod@divisor+2,f,c
  3855  001B9E  3608               	rlcf	___llmod@divisor+3,f,c
  3856  001BA0  2A09               	incf	___llmod@counter,f,c
  3857  001BA2                     l2744:
  3858  001BA2  AE08               	btfss	___llmod@divisor+3,7,c
  3859  001BA4  D7F8               	goto	l2742
  3860  001BA6                     l2746:
  3861  001BA6  5005               	movf	___llmod@divisor,w,c
  3862  001BA8  5C01               	subwf	___llmod@dividend,w,c
  3863  001BAA  5006               	movf	___llmod@divisor+1,w,c
  3864  001BAC  5802               	subwfb	___llmod@dividend+1,w,c
  3865  001BAE  5007               	movf	___llmod@divisor+2,w,c
  3866  001BB0  5803               	subwfb	___llmod@dividend+2,w,c
  3867  001BB2  5008               	movf	___llmod@divisor+3,w,c
  3868  001BB4  5804               	subwfb	___llmod@dividend+3,w,c
  3869  001BB6  E308               	bnc	l2750
  3870  001BB8  5005               	movf	___llmod@divisor,w,c
  3871  001BBA  5E01               	subwf	___llmod@dividend,f,c
  3872  001BBC  5006               	movf	___llmod@divisor+1,w,c
  3873  001BBE  5A02               	subwfb	___llmod@dividend+1,f,c
  3874  001BC0  5007               	movf	___llmod@divisor+2,w,c
  3875  001BC2  5A03               	subwfb	___llmod@dividend+2,f,c
  3876  001BC4  5008               	movf	___llmod@divisor+3,w,c
  3877  001BC6  5A04               	subwfb	___llmod@dividend+3,f,c
  3878  001BC8                     l2750:
  3879  001BC8  90D8               	bcf	status,0,c
  3880  001BCA  3208               	rrcf	___llmod@divisor+3,f,c
  3881  001BCC  3207               	rrcf	___llmod@divisor+2,f,c
  3882  001BCE  3206               	rrcf	___llmod@divisor+1,f,c
  3883  001BD0  3205               	rrcf	___llmod@divisor,f,c
  3884  001BD2  2E09               	decfsz	___llmod@counter,f,c
  3885  001BD4  D7E8               	goto	l2746
  3886  001BD6                     l872:
  3887  001BD6  C001  F001         	movff	___llmod@dividend,?___llmod
  3888  001BDA  C002  F002         	movff	___llmod@dividend+1,?___llmod+1
  3889  001BDE  C003  F003         	movff	___llmod@dividend+2,?___llmod+2
  3890  001BE2  C004  F004         	movff	___llmod@dividend+3,?___llmod+3
  3891  001BE6  0012               	return		;funcret
  3892  001BE8                     __end_of___llmod:
  3893                           	opt stack 0
  3894                           tblptru	equ	0xFF8
  3895                           tblptrh	equ	0xFF7
  3896                           tblptrl	equ	0xFF6
  3897                           tablat	equ	0xFF5
  3898                           prodh	equ	0xFF4
  3899                           prodl	equ	0xFF3
  3900                           indf0	equ	0xFEF
  3901                           fsr0h	equ	0xFEA
  3902                           fsr0l	equ	0xFE9
  3903                           wreg	equ	0xFE8
  3904                           indf2	equ	0xFDF
  3905                           postinc2	equ	0xFDE
  3906                           postdec2	equ	0xFDD
  3907                           fsr2h	equ	0xFDA
  3908                           fsr2l	equ	0xFD9
  3909                           status	equ	0xFD8
  3910                           
  3911 ;; *************** function ___lldiv *****************
  3912 ;; Defined at:
  3913 ;;		line 8 in file "D:\Arquivos de Programas\Microchip\xc8\v1.34\sources\common\lldiv.c"
  3914 ;; Parameters:    Size  Location     Type
  3915 ;;  dividend        4    0[COMRAM] unsigned long 
  3916 ;;  divisor         4    4[COMRAM] unsigned long 
  3917 ;; Auto vars:     Size  Location     Type
  3918 ;;  quotient        4    8[COMRAM] unsigned long 
  3919 ;;  counter         1   12[COMRAM] unsigned char 
  3920 ;; Return value:  Size  Location     Type
  3921 ;;                  4    0[COMRAM] unsigned long 
  3922 ;; Registers used:
  3923 ;;		wreg, status,2, status,0
  3924 ;; Tracked objects:
  3925 ;;		On entry : 0/0
  3926 ;;		On exit  : 0/0
  3927 ;;		Unchanged: 0/0
  3928 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3929 ;;      Params:         8       0       0       0       0       0       0
  3930 ;;      Locals:         5       0       0       0       0       0       0
  3931 ;;      Temps:          0       0       0       0       0       0       0
  3932 ;;      Totals:        13       0       0       0       0       0       0
  3933 ;;Total ram usage:       13 bytes
  3934 ;; Hardware stack levels used:    1
  3935 ;; This function calls:
  3936 ;;		Nothing
  3937 ;; This function is called by:
  3938 ;;		_sprintf
  3939 ;; This function uses a non-reentrant model
  3940 ;;
  3941                           
  3942                           	psect	text15
  3943  001AA8                     __ptext15:
  3944                           	opt stack 0
  3945  001AA8                     ___lldiv:
  3946                           	opt stack 29
  3947                           
  3948                           ;incstack = 0
  3949  001AA8  6A09               	clrf	___lldiv@quotient,c
  3950  001AAA  6A0A               	clrf	___lldiv@quotient+1,c
  3951  001AAC  6A0B               	clrf	___lldiv@quotient+2,c
  3952  001AAE  6A0C               	clrf	___lldiv@quotient+3,c
  3953  001AB0  5005               	movf	___lldiv@divisor,w,c
  3954  001AB2  1006               	iorwf	___lldiv@divisor+1,w,c
  3955  001AB4  1007               	iorwf	___lldiv@divisor+2,w,c
  3956  001AB6  1008               	iorwf	___lldiv@divisor+3,w,c
  3957  001AB8  E029               	bz	l862
  3958  001ABA  0E01               	movlw	1
  3959  001ABC  6E0D               	movwf	___lldiv@counter,c
  3960  001ABE  D006               	goto	l2724
  3961  001AC0                     l2722:
  3962  001AC0  90D8               	bcf	status,0,c
  3963  001AC2  3605               	rlcf	___lldiv@divisor,f,c
  3964  001AC4  3606               	rlcf	___lldiv@divisor+1,f,c
  3965  001AC6  3607               	rlcf	___lldiv@divisor+2,f,c
  3966  001AC8  3608               	rlcf	___lldiv@divisor+3,f,c
  3967  001ACA  2A0D               	incf	___lldiv@counter,f,c
  3968  001ACC                     l2724:
  3969  001ACC  AE08               	btfss	___lldiv@divisor+3,7,c
  3970  001ACE  D7F8               	goto	l2722
  3971  001AD0                     l2726:
  3972  001AD0  90D8               	bcf	status,0,c
  3973  001AD2  3609               	rlcf	___lldiv@quotient,f,c
  3974  001AD4  360A               	rlcf	___lldiv@quotient+1,f,c
  3975  001AD6  360B               	rlcf	___lldiv@quotient+2,f,c
  3976  001AD8  360C               	rlcf	___lldiv@quotient+3,f,c
  3977  001ADA  5005               	movf	___lldiv@divisor,w,c
  3978  001ADC  5C01               	subwf	___lldiv@dividend,w,c
  3979  001ADE  5006               	movf	___lldiv@divisor+1,w,c
  3980  001AE0  5802               	subwfb	___lldiv@dividend+1,w,c
  3981  001AE2  5007               	movf	___lldiv@divisor+2,w,c
  3982  001AE4  5803               	subwfb	___lldiv@dividend+2,w,c
  3983  001AE6  5008               	movf	___lldiv@divisor+3,w,c
  3984  001AE8  5804               	subwfb	___lldiv@dividend+3,w,c
  3985  001AEA  E309               	bnc	l2734
  3986  001AEC  5005               	movf	___lldiv@divisor,w,c
  3987  001AEE  5E01               	subwf	___lldiv@dividend,f,c
  3988  001AF0  5006               	movf	___lldiv@divisor+1,w,c
  3989  001AF2  5A02               	subwfb	___lldiv@dividend+1,f,c
  3990  001AF4  5007               	movf	___lldiv@divisor+2,w,c
  3991  001AF6  5A03               	subwfb	___lldiv@dividend+2,f,c
  3992  001AF8  5008               	movf	___lldiv@divisor+3,w,c
  3993  001AFA  5A04               	subwfb	___lldiv@dividend+3,f,c
  3994  001AFC  8009               	bsf	___lldiv@quotient,0,c
  3995  001AFE                     l2734:
  3996  001AFE  90D8               	bcf	status,0,c
  3997  001B00  3208               	rrcf	___lldiv@divisor+3,f,c
  3998  001B02  3207               	rrcf	___lldiv@divisor+2,f,c
  3999  001B04  3206               	rrcf	___lldiv@divisor+1,f,c
  4000  001B06  3205               	rrcf	___lldiv@divisor,f,c
  4001  001B08  2E0D               	decfsz	___lldiv@counter,f,c
  4002  001B0A  D7E2               	goto	l2726
  4003  001B0C                     l862:
  4004  001B0C  C009  F001         	movff	___lldiv@quotient,?___lldiv
  4005  001B10  C00A  F002         	movff	___lldiv@quotient+1,?___lldiv+1
  4006  001B14  C00B  F003         	movff	___lldiv@quotient+2,?___lldiv+2
  4007  001B18  C00C  F004         	movff	___lldiv@quotient+3,?___lldiv+3
  4008  001B1C  0012               	return		;funcret
  4009  001B1E                     __end_of___lldiv:
  4010                           	opt stack 0
  4011                           tblptru	equ	0xFF8
  4012                           tblptrh	equ	0xFF7
  4013                           tblptrl	equ	0xFF6
  4014                           tablat	equ	0xFF5
  4015                           prodh	equ	0xFF4
  4016                           prodl	equ	0xFF3
  4017                           indf0	equ	0xFEF
  4018                           fsr0h	equ	0xFEA
  4019                           fsr0l	equ	0xFE9
  4020                           wreg	equ	0xFE8
  4021                           indf2	equ	0xFDF
  4022                           postinc2	equ	0xFDE
  4023                           postdec2	equ	0xFDD
  4024                           fsr2h	equ	0xFDA
  4025                           fsr2l	equ	0xFD9
  4026                           status	equ	0xFD8
  4027                           
  4028 ;; *************** function ___fttol *****************
  4029 ;; Defined at:
  4030 ;;		line 44 in file "D:\Arquivos de Programas\Microchip\xc8\v1.34\sources\common\fttol.c"
  4031 ;; Parameters:    Size  Location     Type
  4032 ;;  f1              3   40[COMRAM] float 
  4033 ;; Auto vars:     Size  Location     Type
  4034 ;;  lval            4   50[COMRAM] unsigned long 
  4035 ;;  exp1            1   54[COMRAM] unsigned char 
  4036 ;;  sign1           1   49[COMRAM] unsigned char 
  4037 ;; Return value:  Size  Location     Type
  4038 ;;                  4   40[COMRAM] long 
  4039 ;; Registers used:
  4040 ;;		wreg, status,2, status,0
  4041 ;; Tracked objects:
  4042 ;;		On entry : 0/0
  4043 ;;		On exit  : 0/0
  4044 ;;		Unchanged: 0/0
  4045 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4046 ;;      Params:         4       0       0       0       0       0       0
  4047 ;;      Locals:         6       0       0       0       0       0       0
  4048 ;;      Temps:          5       0       0       0       0       0       0
  4049 ;;      Totals:        15       0       0       0       0       0       0
  4050 ;;Total ram usage:       15 bytes
  4051 ;; Hardware stack levels used:    1
  4052 ;; This function calls:
  4053 ;;		Nothing
  4054 ;; This function is called by:
  4055 ;;		_sprintf
  4056 ;; This function uses a non-reentrant model
  4057 ;;
  4058                           
  4059                           	psect	text16
  4060  00172A                     __ptext16:
  4061                           	opt stack 0
  4062  00172A                     ___fttol:
  4063                           	opt stack 29
  4064                           
  4065                           ;incstack = 0
  4066  00172A  C02B  F02D         	movff	___fttol@f1+2,??___fttol
  4067  00172E  6A2E               	clrf	(??___fttol+1)& (0+255),c
  4068  001730  6A2F               	clrf	(??___fttol+2)& (0+255),c
  4069  001732  342A               	rlcf	___fttol@f1+1,w,c
  4070  001734  362D               	rlcf	??___fttol& (0+255),f,c
  4071  001736  E301               	bnc	u2601
  4072  001738  802E               	bsf	(??___fttol+1)& (0+255),0,c
  4073  00173A                     u2601:
  4074  00173A  502D               	movf	??___fttol,w,c
  4075  00173C  6E37               	movwf	___fttol@exp1,c
  4076  00173E  5037               	movf	___fttol@exp1,w,c
  4077  001740  E105               	bnz	l2680
  4078  001742                     l2678:
  4079  001742  6A29               	clrf	?___fttol,c
  4080  001744  6A2A               	clrf	?___fttol+1,c
  4081  001746  6A2B               	clrf	?___fttol+2,c
  4082  001748  6A2C               	clrf	?___fttol+3,c
  4083  00174A  0012               	return	
  4084  00174C                     l2680:
  4085  00174C  0E17               	movlw	23
  4086  00174E  6E2D               	movwf	??___fttol& (0+255),c
  4087  001750  C029  F02E         	movff	___fttol@f1,??___fttol+1
  4088  001754  C02A  F02F         	movff	___fttol@f1+1,??___fttol+2
  4089  001758  C02B  F030         	movff	___fttol@f1+2,??___fttol+3
  4090  00175C  282D               	incf	??___fttol,w,c
  4091  00175E  6E31               	movwf	(??___fttol+4)& (0+255),c
  4092  001760  D004               	goto	u2620
  4093  001762                     u2625:
  4094  001762  90D8               	bcf	status,0,c
  4095  001764  3230               	rrcf	??___fttol+3,f,c
  4096  001766  322F               	rrcf	??___fttol+2,f,c
  4097  001768  322E               	rrcf	??___fttol+1,f,c
  4098  00176A                     u2620:
  4099  00176A  2E31               	decfsz	(??___fttol+4)& (0+255),f,c
  4100  00176C  D7FA               	goto	u2625
  4101  00176E  502E               	movf	??___fttol+1,w,c
  4102  001770  6E32               	movwf	___fttol@sign1,c
  4103  001772  8E2A               	bsf	___fttol@f1+1,7,c
  4104  001774  6A2B               	clrf	___fttol@f1+2,c
  4105  001776  5029               	movf	___fttol@f1,w,c
  4106  001778  6E33               	movwf	___fttol@lval,c
  4107  00177A  502A               	movf	___fttol@f1+1,w,c
  4108  00177C  6E34               	movwf	___fttol@lval+1,c
  4109  00177E  502B               	movf	___fttol@f1+2,w,c
  4110  001780  6E35               	movwf	___fttol@lval+2,c
  4111  001782  6A36               	clrf	___fttol@lval+3,c
  4112  001784  0E8E               	movlw	142
  4113  001786  5E37               	subwf	___fttol@exp1,f,c
  4114  001788  AE37               	btfss	___fttol@exp1,7,c
  4115  00178A  D00C               	goto	l2700
  4116  00178C  5037               	movf	___fttol@exp1,w,c
  4117  00178E  0A80               	xorlw	128
  4118  001790  0F8F               	addlw	143
  4119  001792  E3D7               	bnc	l2678
  4120  001794                     l2696:
  4121  001794  90D8               	bcf	status,0,c
  4122  001796  3236               	rrcf	___fttol@lval+3,f,c
  4123  001798  3235               	rrcf	___fttol@lval+2,f,c
  4124  00179A  3234               	rrcf	___fttol@lval+1,f,c
  4125  00179C  3233               	rrcf	___fttol@lval,f,c
  4126  00179E  3E37               	incfsz	___fttol@exp1,f,c
  4127  0017A0  D7F9               	goto	l2696
  4128  0017A2  D00C               	goto	l2708
  4129  0017A4                     l2700:
  4130  0017A4  0E17               	movlw	23
  4131  0017A6  6437               	cpfsgt	___fttol@exp1,c
  4132  0017A8  D007               	goto	l2706
  4133  0017AA  D7CB               	goto	l2678
  4134  0017AC                     l2704:
  4135  0017AC  90D8               	bcf	status,0,c
  4136  0017AE  3633               	rlcf	___fttol@lval,f,c
  4137  0017B0  3634               	rlcf	___fttol@lval+1,f,c
  4138  0017B2  3635               	rlcf	___fttol@lval+2,f,c
  4139  0017B4  3636               	rlcf	___fttol@lval+3,f,c
  4140  0017B6  0637               	decf	___fttol@exp1,f,c
  4141  0017B8                     l2706:
  4142  0017B8  5037               	movf	___fttol@exp1,w,c
  4143  0017BA  E1F8               	bnz	l2704
  4144  0017BC                     l2708:
  4145  0017BC  5032               	movf	___fttol@sign1,w,c
  4146  0017BE  E008               	bz	l2712
  4147  0017C0  1E36               	comf	___fttol@lval+3,f,c
  4148  0017C2  1E35               	comf	___fttol@lval+2,f,c
  4149  0017C4  1E34               	comf	___fttol@lval+1,f,c
  4150  0017C6  6C33               	negf	___fttol@lval,c
  4151  0017C8  0E00               	movlw	0
  4152  0017CA  2234               	addwfc	___fttol@lval+1,f,c
  4153  0017CC  2235               	addwfc	___fttol@lval+2,f,c
  4154  0017CE  2236               	addwfc	___fttol@lval+3,f,c
  4155  0017D0                     l2712:
  4156  0017D0  C033  F029         	movff	___fttol@lval,?___fttol
  4157  0017D4  C034  F02A         	movff	___fttol@lval+1,?___fttol+1
  4158  0017D8  C035  F02B         	movff	___fttol@lval+2,?___fttol+2
  4159  0017DC  C036  F02C         	movff	___fttol@lval+3,?___fttol+3
  4160  0017E0  0012               	return		;funcret
  4161  0017E2                     __end_of___fttol:
  4162                           	opt stack 0
  4163                           tblptru	equ	0xFF8
  4164                           tblptrh	equ	0xFF7
  4165                           tblptrl	equ	0xFF6
  4166                           tablat	equ	0xFF5
  4167                           prodh	equ	0xFF4
  4168                           prodl	equ	0xFF3
  4169                           indf0	equ	0xFEF
  4170                           fsr0h	equ	0xFEA
  4171                           fsr0l	equ	0xFE9
  4172                           wreg	equ	0xFE8
  4173                           indf2	equ	0xFDF
  4174                           postinc2	equ	0xFDE
  4175                           postdec2	equ	0xFDD
  4176                           fsr2h	equ	0xFDA
  4177                           fsr2l	equ	0xFD9
  4178                           status	equ	0xFD8
  4179                           
  4180 ;; *************** function ___ftsub *****************
  4181 ;; Defined at:
  4182 ;;		line 20 in file "D:\Arquivos de Programas\Microchip\xc8\v1.34\sources\common\ftsub.c"
  4183 ;; Parameters:    Size  Location     Type
  4184 ;;  f1              3   55[COMRAM] float 
  4185 ;;  f2              3   58[COMRAM] float 
  4186 ;; Auto vars:     Size  Location     Type
  4187 ;;		None
  4188 ;; Return value:  Size  Location     Type
  4189 ;;                  3   55[COMRAM] float 
  4190 ;; Registers used:
  4191 ;;		wreg, status,2, status,0, cstack
  4192 ;; Tracked objects:
  4193 ;;		On entry : 0/0
  4194 ;;		On exit  : 0/0
  4195 ;;		Unchanged: 0/0
  4196 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4197 ;;      Params:         6       0       0       0       0       0       0
  4198 ;;      Locals:         0       0       0       0       0       0       0
  4199 ;;      Temps:          0       0       0       0       0       0       0
  4200 ;;      Totals:         6       0       0       0       0       0       0
  4201 ;;Total ram usage:        6 bytes
  4202 ;; Hardware stack levels used:    1
  4203 ;; Hardware stack levels required when called:    2
  4204 ;; This function calls:
  4205 ;;		___ftadd
  4206 ;; This function is called by:
  4207 ;;		_sprintf
  4208 ;; This function uses a non-reentrant model
  4209 ;;
  4210                           
  4211                           	psect	text17
  4212  001D7A                     __ptext17:
  4213                           	opt stack 0
  4214  001D7A                     ___ftsub:
  4215                           	opt stack 27
  4216                           
  4217                           ;incstack = 0
  4218  001D7A  503B               	movf	___ftsub@f2,w,c
  4219  001D7C  103C               	iorwf	___ftsub@f2+1,w,c
  4220  001D7E  103D               	iorwf	___ftsub@f2+2,w,c
  4221  001D80  E002               	bz	l2650
  4222  001D82  0E80               	movlw	128
  4223  001D84  1A3D               	xorwf	___ftsub@f2+2,f,c
  4224  001D86                     l2650:
  4225  001D86  C038  F02C         	movff	___ftsub@f1,___ftadd@f1
  4226  001D8A  C039  F02D         	movff	___ftsub@f1+1,___ftadd@f1+1
  4227  001D8E  C03A  F02E         	movff	___ftsub@f1+2,___ftadd@f1+2
  4228  001D92  C03B  F02F         	movff	___ftsub@f2,___ftadd@f2
  4229  001D96  C03C  F030         	movff	___ftsub@f2+1,___ftadd@f2+1
  4230  001D9A  C03D  F031         	movff	___ftsub@f2+2,___ftadd@f2+2
  4231  001D9E  EC8C  F008         	call	___ftadd	;wreg free
  4232  001DA2  C02C  F038         	movff	?___ftadd,?___ftsub
  4233  001DA6  C02D  F039         	movff	?___ftadd+1,?___ftsub+1
  4234  001DAA  C02E  F03A         	movff	?___ftadd+2,?___ftsub+2
  4235  001DAE  0012               	return		;funcret
  4236  001DB0                     __end_of___ftsub:
  4237                           	opt stack 0
  4238                           tblptru	equ	0xFF8
  4239                           tblptrh	equ	0xFF7
  4240                           tblptrl	equ	0xFF6
  4241                           tablat	equ	0xFF5
  4242                           prodh	equ	0xFF4
  4243                           prodl	equ	0xFF3
  4244                           indf0	equ	0xFEF
  4245                           fsr0h	equ	0xFEA
  4246                           fsr0l	equ	0xFE9
  4247                           wreg	equ	0xFE8
  4248                           indf2	equ	0xFDF
  4249                           postinc2	equ	0xFDE
  4250                           postdec2	equ	0xFDD
  4251                           fsr2h	equ	0xFDA
  4252                           fsr2l	equ	0xFD9
  4253                           status	equ	0xFD8
  4254                           
  4255 ;; *************** function ___ftadd *****************
  4256 ;; Defined at:
  4257 ;;		line 86 in file "D:\Arquivos de Programas\Microchip\xc8\v1.34\sources\common\ftadd.c"
  4258 ;; Parameters:    Size  Location     Type
  4259 ;;  f1              3   43[COMRAM] float 
  4260 ;;  f2              3   46[COMRAM] float 
  4261 ;; Auto vars:     Size  Location     Type
  4262 ;;  exp1            1   54[COMRAM] unsigned char 
  4263 ;;  exp2            1   53[COMRAM] unsigned char 
  4264 ;;  sign            1   52[COMRAM] unsigned char 
  4265 ;; Return value:  Size  Location     Type
  4266 ;;                  3   43[COMRAM] float 
  4267 ;; Registers used:
  4268 ;;		wreg, status,2, status,0, cstack
  4269 ;; Tracked objects:
  4270 ;;		On entry : 0/0
  4271 ;;		On exit  : 0/0
  4272 ;;		Unchanged: 0/0
  4273 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4274 ;;      Params:         6       0       0       0       0       0       0
  4275 ;;      Locals:         3       0       0       0       0       0       0
  4276 ;;      Temps:          3       0       0       0       0       0       0
  4277 ;;      Totals:        12       0       0       0       0       0       0
  4278 ;;Total ram usage:       12 bytes
  4279 ;; Hardware stack levels used:    1
  4280 ;; Hardware stack levels required when called:    1
  4281 ;; This function calls:
  4282 ;;		___ftpack
  4283 ;; This function is called by:
  4284 ;;		_sprintf
  4285 ;;		___ftsub
  4286 ;; This function uses a non-reentrant model
  4287 ;;
  4288                           
  4289                           	psect	text18
  4290  001118                     __ptext18:
  4291                           	opt stack 0
  4292  001118                     ___ftadd:
  4293                           	opt stack 27
  4294                           
  4295                           ;incstack = 0
  4296  001118  C02E  F032         	movff	___ftadd@f1+2,??___ftadd
  4297  00111C  6A33               	clrf	(??___ftadd+1)& (0+255),c
  4298  00111E  6A34               	clrf	(??___ftadd+2)& (0+255),c
  4299  001120  342D               	rlcf	___ftadd@f1+1,w,c
  4300  001122  3632               	rlcf	??___ftadd& (0+255),f,c
  4301  001124  E301               	bnc	u1811
  4302  001126  8033               	bsf	(??___ftadd+1)& (0+255),0,c
  4303  001128                     u1811:
  4304  001128  5032               	movf	??___ftadd,w,c
  4305  00112A  6E37               	movwf	___ftadd@exp1,c
  4306  00112C  C031  F032         	movff	___ftadd@f2+2,??___ftadd
  4307  001130  6A33               	clrf	(??___ftadd+1)& (0+255),c
  4308  001132  6A34               	clrf	(??___ftadd+2)& (0+255),c
  4309  001134  3430               	rlcf	___ftadd@f2+1,w,c
  4310  001136  3632               	rlcf	??___ftadd& (0+255),f,c
  4311  001138  E301               	bnc	u1821
  4312  00113A  8033               	bsf	(??___ftadd+1)& (0+255),0,c
  4313  00113C                     u1821:
  4314  00113C  5032               	movf	??___ftadd,w,c
  4315  00113E  6E36               	movwf	___ftadd@exp2,c
  4316  001140  5037               	movf	___ftadd@exp1,w,c
  4317  001142  E009               	bz	l733
  4318  001144  5036               	movf	___ftadd@exp2,w,c
  4319  001146  5C37               	subwf	___ftadd@exp1,w,c
  4320  001148  E20D               	bc	l2194
  4321  00114A  5037               	movf	___ftadd@exp1,w,c
  4322  00114C  5C36               	subwf	___ftadd@exp2,w,c
  4323  00114E  6E32               	movwf	??___ftadd& (0+255),c
  4324  001150  0E18               	movlw	24
  4325  001152  6432               	cpfsgt	??___ftadd,c
  4326  001154  D007               	goto	l2194
  4327  001156                     l733:
  4328  001156  C02F  F02C         	movff	___ftadd@f2,?___ftadd
  4329  00115A  C030  F02D         	movff	___ftadd@f2+1,?___ftadd+1
  4330  00115E  C031  F02E         	movff	___ftadd@f2+2,?___ftadd+2
  4331  001162  0012               	return	
  4332  001164                     l2194:
  4333  001164  5036               	movf	___ftadd@exp2,w,c
  4334  001166  E009               	bz	l737
  4335  001168  5037               	movf	___ftadd@exp1,w,c
  4336  00116A  5C36               	subwf	___ftadd@exp2,w,c
  4337  00116C  E20D               	bc	l2200
  4338  00116E  5036               	movf	___ftadd@exp2,w,c
  4339  001170  5C37               	subwf	___ftadd@exp1,w,c
  4340  001172  6E32               	movwf	??___ftadd& (0+255),c
  4341  001174  0E18               	movlw	24
  4342  001176  6432               	cpfsgt	??___ftadd,c
  4343  001178  D007               	goto	l2200
  4344  00117A                     l737:
  4345  00117A  C02C  F02C         	movff	___ftadd@f1,?___ftadd
  4346  00117E  C02D  F02D         	movff	___ftadd@f1+1,?___ftadd+1
  4347  001182  C02E  F02E         	movff	___ftadd@f1+2,?___ftadd+2
  4348  001186  0012               	return	
  4349  001188                     l2200:
  4350  001188  0E06               	movlw	6
  4351  00118A  6E35               	movwf	___ftadd@sign,c
  4352  00118C  BE2E               	btfsc	___ftadd@f1+2,7,c
  4353  00118E  8E35               	bsf	___ftadd@sign,7,c
  4354  001190  BE31               	btfsc	___ftadd@f2+2,7,c
  4355  001192  8C35               	bsf	___ftadd@sign,6,c
  4356  001194  8E2D               	bsf	___ftadd@f1+1,7,c
  4357  001196  6A2E               	clrf	___ftadd@f1+2,c
  4358  001198  8E30               	bsf	___ftadd@f2+1,7,c
  4359  00119A  6A31               	clrf	___ftadd@f2+2,c
  4360  00119C  5036               	movf	___ftadd@exp2,w,c
  4361  00119E  5C37               	subwf	___ftadd@exp1,w,c
  4362  0011A0  E218               	bc	l2226
  4363  0011A2                     l2216:
  4364  0011A2  90D8               	bcf	status,0,c
  4365  0011A4  362F               	rlcf	___ftadd@f2,f,c
  4366  0011A6  3630               	rlcf	___ftadd@f2+1,f,c
  4367  0011A8  3631               	rlcf	___ftadd@f2+2,f,c
  4368  0011AA  0636               	decf	___ftadd@exp2,f,c
  4369  0011AC  5037               	movf	___ftadd@exp1,w,c
  4370  0011AE  1836               	xorwf	___ftadd@exp2,w,c
  4371  0011B0  E00C               	bz	l2224
  4372  0011B2  0635               	decf	___ftadd@sign,f,c
  4373  0011B4  C035  F032         	movff	___ftadd@sign,??___ftadd
  4374  0011B8  0E07               	movlw	7
  4375  0011BA  1632               	andwf	??___ftadd,f,c
  4376  0011BC  E006               	bz	l2224
  4377  0011BE  D7F1               	goto	l2216
  4378  0011C0                     l2222:
  4379  0011C0  90D8               	bcf	status,0,c
  4380  0011C2  322E               	rrcf	___ftadd@f1+2,f,c
  4381  0011C4  322D               	rrcf	___ftadd@f1+1,f,c
  4382  0011C6  322C               	rrcf	___ftadd@f1,f,c
  4383  0011C8  2A37               	incf	___ftadd@exp1,f,c
  4384  0011CA                     l2224:
  4385  0011CA  5036               	movf	___ftadd@exp2,w,c
  4386  0011CC  1837               	xorwf	___ftadd@exp1,w,c
  4387  0011CE  E01B               	bz	l748
  4388  0011D0  D7F7               	goto	l2222
  4389  0011D2                     l2226:
  4390  0011D2  5037               	movf	___ftadd@exp1,w,c
  4391  0011D4  5C36               	subwf	___ftadd@exp2,w,c
  4392  0011D6  E217               	bc	l748
  4393  0011D8                     l2228:
  4394  0011D8  90D8               	bcf	status,0,c
  4395  0011DA  362C               	rlcf	___ftadd@f1,f,c
  4396  0011DC  362D               	rlcf	___ftadd@f1+1,f,c
  4397  0011DE  362E               	rlcf	___ftadd@f1+2,f,c
  4398  0011E0  0637               	decf	___ftadd@exp1,f,c
  4399  0011E2  5037               	movf	___ftadd@exp1,w,c
  4400  0011E4  1836               	xorwf	___ftadd@exp2,w,c
  4401  0011E6  E00C               	bz	l2236
  4402  0011E8  0635               	decf	___ftadd@sign,f,c
  4403  0011EA  C035  F032         	movff	___ftadd@sign,??___ftadd
  4404  0011EE  0E07               	movlw	7
  4405  0011F0  1632               	andwf	??___ftadd,f,c
  4406  0011F2  E006               	bz	l2236
  4407  0011F4  D7F1               	goto	l2228
  4408  0011F6                     l2234:
  4409  0011F6  90D8               	bcf	status,0,c
  4410  0011F8  3231               	rrcf	___ftadd@f2+2,f,c
  4411  0011FA  3230               	rrcf	___ftadd@f2+1,f,c
  4412  0011FC  322F               	rrcf	___ftadd@f2,f,c
  4413  0011FE  2A36               	incf	___ftadd@exp2,f,c
  4414  001200                     l2236:
  4415  001200  5036               	movf	___ftadd@exp2,w,c
  4416  001202  1837               	xorwf	___ftadd@exp1,w,c
  4417  001204  E1F8               	bnz	l2234
  4418  001206                     l748:
  4419  001206  AE35               	btfss	___ftadd@sign,7,c
  4420  001208  D007               	goto	l757
  4421  00120A  1E2C               	comf	___ftadd@f1,f,c
  4422  00120C  1E2D               	comf	___ftadd@f1+1,f,c
  4423  00120E  1E2E               	comf	___ftadd@f1+2,f,c
  4424  001210  2A2C               	incf	___ftadd@f1,f,c
  4425  001212  0E00               	movlw	0
  4426  001214  222D               	addwfc	___ftadd@f1+1,f,c
  4427  001216  222E               	addwfc	___ftadd@f1+2,f,c
  4428  001218                     l757:
  4429  001218  BC35               	btfsc	___ftadd@sign,6,c
  4430  00121A  D81F               	call	PL46	;call to abstracted procedure
  4431  00121C  6A35               	clrf	___ftadd@sign,c
  4432  00121E  502C               	movf	___ftadd@f1,w,c
  4433  001220  262F               	addwf	___ftadd@f2,f,c
  4434  001222  502D               	movf	___ftadd@f1+1,w,c
  4435  001224  2230               	addwfc	___ftadd@f2+1,f,c
  4436  001226  502E               	movf	___ftadd@f1+2,w,c
  4437  001228  2231               	addwfc	___ftadd@f2+2,f,c
  4438  00122A  AE31               	btfss	___ftadd@f2+2,7,c
  4439  00122C  D003               	goto	l2246
  4440  00122E  D815               	call	PL46	;call to abstracted procedure
  4441  001230  0E01               	movlw	1
  4442  001232  6E35               	movwf	___ftadd@sign,c
  4443  001234                     l2246:
  4444  001234  C02F  F001         	movff	___ftadd@f2,___ftpack@arg
  4445  001238  C030  F002         	movff	___ftadd@f2+1,___ftpack@arg+1
  4446  00123C  C031  F003         	movff	___ftadd@f2+2,___ftpack@arg+2
  4447  001240  C037  F004         	movff	___ftadd@exp1,___ftpack@exp
  4448  001244  C035  F005         	movff	___ftadd@sign,___ftpack@sign
  4449  001248  ECD4  F00C         	call	___ftpack	;wreg free
  4450  00124C  C001  F02C         	movff	?___ftpack,?___ftadd
  4451  001250  C002  F02D         	movff	?___ftpack+1,?___ftadd+1
  4452  001254  C003  F02E         	movff	?___ftpack+2,?___ftadd+2
  4453  001258  0012               	return		;funcret
  4454  00125A                     __end_of___ftadd:
  4455                           	opt stack 0
  4456  00125A                     PL46:
  4457                           	opt stack 27
  4458  00125A  1E2F               	comf	___ftadd@f2,f,c
  4459  00125C  1E30               	comf	___ftadd@f2+1,f,c
  4460  00125E  1E31               	comf	___ftadd@f2+2,f,c
  4461  001260  2A2F               	incf	___ftadd@f2,f,c
  4462  001262  0E00               	movlw	0
  4463  001264  2230               	addwfc	___ftadd@f2+1,f,c
  4464  001266  2231               	addwfc	___ftadd@f2+2,f,c
  4465  001268  0C00               	retlw	0
  4466  00126A                     __end_ofPL46:
  4467                           	opt stack 0
  4468                           tblptru	equ	0xFF8
  4469                           tblptrh	equ	0xFF7
  4470                           tblptrl	equ	0xFF6
  4471                           tablat	equ	0xFF5
  4472                           prodh	equ	0xFF4
  4473                           prodl	equ	0xFF3
  4474                           indf0	equ	0xFEF
  4475                           fsr0h	equ	0xFEA
  4476                           fsr0l	equ	0xFE9
  4477                           wreg	equ	0xFE8
  4478                           indf2	equ	0xFDF
  4479                           postinc2	equ	0xFDE
  4480                           postdec2	equ	0xFDD
  4481                           fsr2h	equ	0xFDA
  4482                           fsr2l	equ	0xFD9
  4483                           status	equ	0xFD8
  4484                           
  4485 ;; *************** function ___ftneg *****************
  4486 ;; Defined at:
  4487 ;;		line 15 in file "D:\Arquivos de Programas\Microchip\xc8\v1.34\sources\common\ftneg.c"
  4488 ;; Parameters:    Size  Location     Type
  4489 ;;  f1              3    0[COMRAM] float 
  4490 ;; Auto vars:     Size  Location     Type
  4491 ;;		None
  4492 ;; Return value:  Size  Location     Type
  4493 ;;                  3    0[COMRAM] float 
  4494 ;; Registers used:
  4495 ;;		wreg, status,2, status,0
  4496 ;; Tracked objects:
  4497 ;;		On entry : 0/0
  4498 ;;		On exit  : 0/0
  4499 ;;		Unchanged: 0/0
  4500 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4501 ;;      Params:         3       0       0       0       0       0       0
  4502 ;;      Locals:         0       0       0       0       0       0       0
  4503 ;;      Temps:          0       0       0       0       0       0       0
  4504 ;;      Totals:         3       0       0       0       0       0       0
  4505 ;;Total ram usage:        3 bytes
  4506 ;; Hardware stack levels used:    1
  4507 ;; This function calls:
  4508 ;;		Nothing
  4509 ;; This function is called by:
  4510 ;;		_sprintf
  4511 ;; This function uses a non-reentrant model
  4512 ;;
  4513                           
  4514                           	psect	text19
  4515  001ED4                     __ptext19:
  4516                           	opt stack 0
  4517  001ED4                     ___ftneg:
  4518                           	opt stack 29
  4519                           
  4520                           ;incstack = 0
  4521  001ED4  5001               	movf	___ftneg@f1,w,c
  4522  001ED6  1002               	iorwf	___ftneg@f1+1,w,c
  4523  001ED8  1003               	iorwf	___ftneg@f1+2,w,c
  4524  001EDA  E002               	bz	l807
  4525  001EDC  0E80               	movlw	128
  4526  001EDE  1A03               	xorwf	___ftneg@f1+2,f,c
  4527  001EE0                     l807:
  4528  001EE0  C001  F001         	movff	___ftneg@f1,?___ftneg
  4529  001EE4  C002  F002         	movff	___ftneg@f1+1,?___ftneg+1
  4530  001EE8  C003  F003         	movff	___ftneg@f1+2,?___ftneg+2
  4531  001EEC  0012               	return		;funcret
  4532  001EEE                     __end_of___ftneg:
  4533                           	opt stack 0
  4534                           tblptru	equ	0xFF8
  4535                           tblptrh	equ	0xFF7
  4536                           tblptrl	equ	0xFF6
  4537                           tablat	equ	0xFF5
  4538                           prodh	equ	0xFF4
  4539                           prodl	equ	0xFF3
  4540                           indf0	equ	0xFEF
  4541                           fsr0h	equ	0xFEA
  4542                           fsr0l	equ	0xFE9
  4543                           wreg	equ	0xFE8
  4544                           indf2	equ	0xFDF
  4545                           postinc2	equ	0xFDE
  4546                           postdec2	equ	0xFDD
  4547                           fsr2h	equ	0xFDA
  4548                           fsr2l	equ	0xFD9
  4549                           status	equ	0xFD8
  4550                           
  4551 ;; *************** function ___ftge *****************
  4552 ;; Defined at:
  4553 ;;		line 4 in file "D:\Arquivos de Programas\Microchip\xc8\v1.34\sources\common\ftge.c"
  4554 ;; Parameters:    Size  Location     Type
  4555 ;;  ff1             3    0[COMRAM] float 
  4556 ;;  ff2             3    3[COMRAM] float 
  4557 ;; Auto vars:     Size  Location     Type
  4558 ;;		None
  4559 ;; Return value:  Size  Location     Type
  4560 ;;		None               void
  4561 ;; Registers used:
  4562 ;;		wreg, status,2, status,0
  4563 ;; Tracked objects:
  4564 ;;		On entry : 0/0
  4565 ;;		On exit  : 0/0
  4566 ;;		Unchanged: 0/0
  4567 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4568 ;;      Params:         6       0       0       0       0       0       0
  4569 ;;      Locals:         0       0       0       0       0       0       0
  4570 ;;      Temps:          3       0       0       0       0       0       0
  4571 ;;      Totals:         9       0       0       0       0       0       0
  4572 ;;Total ram usage:        9 bytes
  4573 ;; Hardware stack levels used:    1
  4574 ;; This function calls:
  4575 ;;		Nothing
  4576 ;; This function is called by:
  4577 ;;		_sprintf
  4578 ;; This function uses a non-reentrant model
  4579 ;;
  4580                           
  4581                           	psect	text20
  4582  001C42                     __ptext20:
  4583                           	opt stack 0
  4584  001C42                     ___ftge:
  4585                           	opt stack 29
  4586                           
  4587                           ;incstack = 0
  4588  001C42  AE03               	btfss	___ftge@ff1+2,7,c
  4589  001C44  D00D               	goto	l2658
  4590  001C46  6A07               	clrf	??___ftge& (0+255),c
  4591  001C48  6A08               	clrf	(??___ftge+1)& (0+255),c
  4592  001C4A  0E80               	movlw	128
  4593  001C4C  6E09               	movwf	(??___ftge+2)& (0+255),c
  4594  001C4E  5001               	movf	___ftge@ff1,w,c
  4595  001C50  5C07               	subwf	??___ftge,w,c
  4596  001C52  6E01               	movwf	___ftge@ff1,c
  4597  001C54  5002               	movf	___ftge@ff1+1,w,c
  4598  001C56  5808               	subwfb	??___ftge+1,w,c
  4599  001C58  6E02               	movwf	___ftge@ff1+1,c
  4600  001C5A  5003               	movf	___ftge@ff1+2,w,c
  4601  001C5C  5809               	subwfb	??___ftge+2,w,c
  4602  001C5E  6E03               	movwf	___ftge@ff1+2,c
  4603  001C60                     l2658:
  4604  001C60  AE06               	btfss	___ftge@ff2+2,7,c
  4605  001C62  D00D               	goto	l2662
  4606  001C64  6A07               	clrf	??___ftge& (0+255),c
  4607  001C66  6A08               	clrf	(??___ftge+1)& (0+255),c
  4608  001C68  0E80               	movlw	128
  4609  001C6A  6E09               	movwf	(??___ftge+2)& (0+255),c
  4610  001C6C  5004               	movf	___ftge@ff2,w,c
  4611  001C6E  5C07               	subwf	??___ftge,w,c
  4612  001C70  6E04               	movwf	___ftge@ff2,c
  4613  001C72  5005               	movf	___ftge@ff2+1,w,c
  4614  001C74  5808               	subwfb	??___ftge+1,w,c
  4615  001C76  6E05               	movwf	___ftge@ff2+1,c
  4616  001C78  5006               	movf	___ftge@ff2+2,w,c
  4617  001C7A  5809               	subwfb	??___ftge+2,w,c
  4618  001C7C  6E06               	movwf	___ftge@ff2+2,c
  4619  001C7E                     l2662:
  4620  001C7E  0E80               	movlw	128
  4621  001C80  1A03               	xorwf	___ftge@ff1+2,f,c
  4622  001C82  1A06               	xorwf	___ftge@ff2+2,f,c
  4623  001C84  5004               	movf	___ftge@ff2,w,c
  4624  001C86  5C01               	subwf	___ftge@ff1,w,c
  4625  001C88  5005               	movf	___ftge@ff2+1,w,c
  4626  001C8A  5802               	subwfb	___ftge@ff1+1,w,c
  4627  001C8C  5006               	movf	___ftge@ff2+2,w,c
  4628  001C8E  5803               	subwfb	___ftge@ff1+2,w,c
  4629  001C90  E202               	bc	l2668
  4630  001C92  90D8               	bcf	status,0,c
  4631  001C94  0012               	return	
  4632  001C96                     l2668:
  4633  001C96  80D8               	bsf	status,0,c
  4634  001C98  0012               	return		;funcret
  4635  001C9A                     __end_of___ftge:
  4636                           	opt stack 0
  4637                           tblptru	equ	0xFF8
  4638                           tblptrh	equ	0xFF7
  4639                           tblptrl	equ	0xFF6
  4640                           tablat	equ	0xFF5
  4641                           prodh	equ	0xFF4
  4642                           prodl	equ	0xFF3
  4643                           indf0	equ	0xFEF
  4644                           fsr0h	equ	0xFEA
  4645                           fsr0l	equ	0xFE9
  4646                           wreg	equ	0xFE8
  4647                           indf2	equ	0xFDF
  4648                           postinc2	equ	0xFDE
  4649                           postdec2	equ	0xFDD
  4650                           fsr2h	equ	0xFDA
  4651                           fsr2l	equ	0xFD9
  4652                           status	equ	0xFD8
  4653                           
  4654 ;; *************** function _Lcd_Text *****************
  4655 ;; Defined at:
  4656 ;;		line 105 in file "hd44780.c"
  4657 ;; Parameters:    Size  Location     Type
  4658 ;;  y               1    wreg     unsigned char 
  4659 ;;  x               1    4[COMRAM] unsigned char 
  4660 ;;  buffer          2    5[COMRAM] PTR unsigned char 
  4661 ;;		 -> main@temp(10), STR_2(6), STR_1(12), 
  4662 ;; Auto vars:     Size  Location     Type
  4663 ;;  y               1    7[COMRAM] unsigned char 
  4664 ;;  data            1    8[COMRAM] unsigned char 
  4665 ;; Return value:  Size  Location     Type
  4666 ;;		None               void
  4667 ;; Registers used:
  4668 ;;		wreg, fsr0l, fsr0h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  4669 ;; Tracked objects:
  4670 ;;		On entry : 0/0
  4671 ;;		On exit  : 0/0
  4672 ;;		Unchanged: 0/0
  4673 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4674 ;;      Params:         3       0       0       0       0       0       0
  4675 ;;      Locals:         2       0       0       0       0       0       0
  4676 ;;      Temps:          0       0       0       0       0       0       0
  4677 ;;      Totals:         5       0       0       0       0       0       0
  4678 ;;Total ram usage:        5 bytes
  4679 ;; Hardware stack levels used:    1
  4680 ;; Hardware stack levels required when called:    2
  4681 ;; This function calls:
  4682 ;;		_Lcd_CharCP
  4683 ;;		_Lcd_Command
  4684 ;; This function is called by:
  4685 ;;		_main
  4686 ;; This function uses a non-reentrant model
  4687 ;;
  4688                           
  4689                           	psect	text21
  4690  001920                     __ptext21:
  4691                           	opt stack 0
  4692  001920                     _Lcd_Text:
  4693                           	opt stack 28
  4694                           
  4695                           ;incstack = 0
  4696                           ;Lcd_Text@y stored from wreg
  4697  001920  6E08               	movwf	Lcd_Text@y,c
  4698                           
  4699                           ;hd44780.c: 107: unsigned char data;
  4700                           ;hd44780.c: 109: switch(y)
  4701  001922  D00D               	goto	l2776
  4702  001924                     l2766:
  4703  001924  5005               	movf	Lcd_Text@x,w,c
  4704  001926  0F7F               	addlw	127
  4705  001928  D008               	goto	L5
  4706  00192A                     l2768:
  4707  00192A  5005               	movf	Lcd_Text@x,w,c
  4708  00192C  0FBF               	addlw	191
  4709  00192E  D005               	goto	L5
  4710  001930                     l2770:
  4711  001930  5005               	movf	Lcd_Text@x,w,c
  4712  001932  0F93               	addlw	147
  4713  001934  D002               	goto	L5
  4714  001936                     l2772:
  4715  001936  5005               	movf	Lcd_Text@x,w,c
  4716  001938  0FD3               	addlw	211
  4717  00193A                     L5:
  4718  00193A  6E09               	movwf	Lcd_Text@data,c
  4719                           
  4720                           ;hd44780.c: 118: break;
  4721  00193C  D009               	goto	l2778
  4722  00193E                     l2776:
  4723  00193E  5008               	movf	Lcd_Text@y,w,c
  4724                           
  4725                           ; Switch size 1, requested type "space"
  4726                           ; Number of cases is 4, Range of values is 1 to 4
  4727                           ; switch strategies available:
  4728                           ; Name         Instructions Cycles
  4729                           ; simple_byte           13     7 (average)
  4730                           ;	Chosen strategy is simple_byte
  4731  001940  0A01               	xorlw	1	; case 1
  4732  001942  E0F0               	bz	l2766
  4733  001944  0A03               	xorlw	3	; case 2
  4734  001946  E0F1               	bz	l2768
  4735  001948  0A01               	xorlw	1	; case 3
  4736  00194A  E0F2               	bz	l2770
  4737  00194C  0A07               	xorlw	7	; case 4
  4738  00194E  E0F3               	bz	l2772
  4739  001950                     l2778:
  4740                           
  4741                           ;hd44780.c: 123: Lcd_Command(data);
  4742  001950  5009               	movf	Lcd_Text@data,w,c
  4743  001952  ECA0  F009         	call	_Lcd_Command
  4744                           
  4745                           ;hd44780.c: 125: while(*buffer)
  4746  001956  D014               	goto	l2784
  4747  001958                     l2780:
  4748                           
  4749                           ;hd44780.c: 126: {
  4750                           ;hd44780.c: 127: Lcd_CharCP(*buffer);
  4751  001958  C006  FFF6         	movff	Lcd_Text@buffer,tblptrl
  4752  00195C  C007  FFF7         	movff	Lcd_Text@buffer+1,tblptrh
  4753  001960  6AF8               	clrf	tblptru,c
  4754  001962  0E05               	movlw	(high __ramtop+-1)
  4755  001964  64F7               	cpfsgt	tblptrh,c
  4756  001966  D003               	bra	u2757
  4757  001968  0008               	tblrd		*
  4758  00196A  50F5               	movf	tablat,w,c
  4759  00196C  D005               	bra	u2750
  4760  00196E                     u2757:
  4761  00196E  CFF6 FFE9          	movff	tblptrl,fsr0l
  4762  001972  CFF7 FFEA          	movff	tblptrh,fsr0h
  4763  001976  50EF               	movf	indf0,w,c
  4764  001978                     u2750:
  4765  001978  EC35  F009         	call	_Lcd_CharCP
  4766                           
  4767                           ;hd44780.c: 128: buffer ++;
  4768  00197C  4A06               	infsnz	Lcd_Text@buffer,f,c
  4769  00197E  2A07               	incf	Lcd_Text@buffer+1,f,c
  4770  001980                     l2784:
  4771  001980  C006  FFF6         	movff	Lcd_Text@buffer,tblptrl
  4772  001984  C007  FFF7         	movff	Lcd_Text@buffer+1,tblptrh
  4773  001988  6AF8               	clrf	tblptru,c
  4774  00198A  0E05               	movlw	(high __ramtop+-1)
  4775  00198C  64F7               	cpfsgt	tblptrh,c
  4776  00198E  D003               	bra	u2767
  4777  001990  0008               	tblrd		*
  4778  001992  50F5               	movf	tablat,w,c
  4779  001994  D005               	bra	u2760
  4780  001996                     u2767:
  4781  001996  CFF6 FFE9          	movff	tblptrl,fsr0l
  4782  00199A  CFF7 FFEA          	movff	tblptrh,fsr0h
  4783  00199E  50EF               	movf	indf0,w,c
  4784  0019A0                     u2760:
  4785  0019A0  0900               	iorlw	0
  4786  0019A2  B4D8               	btfsc	status,2,c
  4787  0019A4  0012               	return		;funcret
  4788  0019A6  D7D8               	goto	l2780
  4789  0019A8                     __end_of_Lcd_Text:
  4790                           	opt stack 0
  4791                           tblptru	equ	0xFF8
  4792                           tblptrh	equ	0xFF7
  4793                           tblptrl	equ	0xFF6
  4794                           tablat	equ	0xFF5
  4795                           prodh	equ	0xFF4
  4796                           prodl	equ	0xFF3
  4797                           indf0	equ	0xFEF
  4798                           fsr0h	equ	0xFEA
  4799                           fsr0l	equ	0xFE9
  4800                           wreg	equ	0xFE8
  4801                           indf2	equ	0xFDF
  4802                           postinc2	equ	0xFDE
  4803                           postdec2	equ	0xFDD
  4804                           fsr2h	equ	0xFDA
  4805                           fsr2l	equ	0xFD9
  4806                           status	equ	0xFD8
  4807                           
  4808 ;; *************** function _Lcd_CharCP *****************
  4809 ;; Defined at:
  4810 ;;		line 167 in file "hd44780.c"
  4811 ;; Parameters:    Size  Location     Type
  4812 ;;  c               1    wreg     unsigned char 
  4813 ;; Auto vars:     Size  Location     Type
  4814 ;;  c               1    3[COMRAM] unsigned char 
  4815 ;; Return value:  Size  Location     Type
  4816 ;;		None               void
  4817 ;; Registers used:
  4818 ;;		wreg, status,2, status,0, cstack
  4819 ;; Tracked objects:
  4820 ;;		On entry : 0/0
  4821 ;;		On exit  : 0/0
  4822 ;;		Unchanged: 0/0
  4823 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4824 ;;      Params:         0       0       0       0       0       0       0
  4825 ;;      Locals:         1       0       0       0       0       0       0
  4826 ;;      Temps:          2       0       0       0       0       0       0
  4827 ;;      Totals:         3       0       0       0       0       0       0
  4828 ;;Total ram usage:        3 bytes
  4829 ;; Hardware stack levels used:    1
  4830 ;; Hardware stack levels required when called:    1
  4831 ;; This function calls:
  4832 ;;		_Lcd_Delay5500us
  4833 ;;		_Lcd_Delay5us
  4834 ;; This function is called by:
  4835 ;;		_Lcd_Text
  4836 ;;		_main
  4837 ;; This function uses a non-reentrant model
  4838 ;;
  4839                           
  4840                           	psect	text22
  4841  00126A                     __ptext22:
  4842                           	opt stack 0
  4843  00126A                     _Lcd_CharCP:
  4844                           	opt stack 28
  4845                           
  4846                           ;incstack = 0
  4847                           ;Lcd_CharCP@c stored from wreg
  4848  00126A  6E04               	movwf	Lcd_CharCP@c,c
  4849                           
  4850                           ;hd44780.c: 169: LATBbits.LATB5 = 0;
  4851  00126C  9A8A               	bcf	3978,5,c	;volatile
  4852                           
  4853                           ;hd44780.c: 170: LATBbits.LATB4 = 1;
  4854  00126E  888A               	bsf	3978,4,c	;volatile
  4855                           
  4856                           ;hd44780.c: 172: LATBbits.LATB3 = (c & 0b10000000) >> 7;
  4857  001270  6A02               	clrf	??_Lcd_CharCP& (0+255),c
  4858  001272  AE04               	btfss	Lcd_CharCP@c,7,c
  4859  001274  D001               	bra	u635
  4860  001276  2A02               	incf	??_Lcd_CharCP& (0+255),f,c
  4861  001278                     u635:
  4862  001278  0E01               	movlw	1
  4863                           
  4864                           ;hd44780.c: 173: LATBbits.LATB2 = (c & 0b01000000) >> 6;
  4865  00127A  D837               	call	PL28	;call to abstracted procedure
  4866  00127C  0E06               	movlw	6
  4867  00127E  6E03               	movwf	(??_Lcd_CharCP+1)& (0+255),c
  4868  001280                     u645:
  4869  001280  90D8               	bcf	status,0,c
  4870  001282  3202               	rrcf	??_Lcd_CharCP,f,c
  4871  001284  2E03               	decfsz	(??_Lcd_CharCP+1)& (0+255),f,c
  4872  001286  D7FC               	goto	u645
  4873                           
  4874                           ;hd44780.c: 174: LATBbits.LATB1 = (c & 0b00100000) >> 5;
  4875  001288  D83C               	call	PL32	;call to abstracted procedure
  4876  00128A  0E05               	movlw	5
  4877  00128C  6E03               	movwf	(??_Lcd_CharCP+1)& (0+255),c
  4878  00128E                     u655:
  4879  00128E  90D8               	bcf	status,0,c
  4880  001290  3202               	rrcf	??_Lcd_CharCP,f,c
  4881  001292  2E03               	decfsz	(??_Lcd_CharCP+1)& (0+255),f,c
  4882  001294  D7FC               	goto	u655
  4883                           
  4884                           ;hd44780.c: 175: LATBbits.LATB0 = (c & 0b00010000) >> 4;
  4885  001296  D841               	call	PL36	;call to abstracted procedure
  4886  001298  3A02               	swapf	??_Lcd_CharCP,f,c
  4887  00129A  0E0F               	movlw	15
  4888  00129C  1602               	andwf	??_Lcd_CharCP,f,c
  4889                           
  4890                           ;hd44780.c: 177: _delay(10);
  4891  00129E  D848               	call	PL42	;call to abstracted procedure
  4892  0012A0                     u3237:
  4893  0012A0  2EE8               	decfsz	wreg,f,c
  4894  0012A2  D7FE               	goto	u3237
  4895  0012A4  F000               	nop	
  4896                           
  4897                           ;hd44780.c: 178: LATBbits.LATB5 = 1;
  4898  0012A6  8A8A               	bsf	3978,5,c	;volatile
  4899                           
  4900                           ;hd44780.c: 179: Lcd_Delay5us();
  4901  0012A8  EC90  F00F         	call	_Lcd_Delay5us	;wreg free
  4902                           
  4903                           ;hd44780.c: 180: LATBbits.LATB5 = 0;
  4904  0012AC  9A8A               	bcf	3978,5,c	;volatile
  4905                           
  4906                           ;hd44780.c: 182: LATBbits.LATB3 = (c & 0b00001000) >> 3;
  4907  0012AE  C004  F002         	movff	Lcd_CharCP@c,??_Lcd_CharCP
  4908  0012B2  90D8               	bcf	status,0,c
  4909  0012B4  3202               	rrcf	??_Lcd_CharCP,f,c
  4910  0012B6  90D8               	bcf	status,0,c
  4911  0012B8  3202               	rrcf	??_Lcd_CharCP,f,c
  4912  0012BA  90D8               	bcf	status,0,c
  4913  0012BC  3202               	rrcf	??_Lcd_CharCP,f,c
  4914  0012BE  0E01               	movlw	1
  4915                           
  4916                           ;hd44780.c: 183: LATBbits.LATB2 = (c & 0b00000100) >> 2;
  4917  0012C0  D814               	call	PL28	;call to abstracted procedure
  4918  0012C2  90D8               	bcf	status,0,c
  4919  0012C4  3202               	rrcf	??_Lcd_CharCP,f,c
  4920  0012C6  90D8               	bcf	status,0,c
  4921  0012C8  3202               	rrcf	??_Lcd_CharCP,f,c
  4922                           
  4923                           ;hd44780.c: 184: LATBbits.LATB1 = (c & 0b00000010) >> 1;
  4924  0012CA  D81B               	call	PL32	;call to abstracted procedure
  4925  0012CC  90D8               	bcf	status,0,c
  4926  0012CE  3202               	rrcf	??_Lcd_CharCP,f,c
  4927                           
  4928                           ;hd44780.c: 185: LATBbits.LATB0 = (c & 0b00000001);
  4929  0012D0  D824               	call	PL36	;call to abstracted procedure
  4930                           
  4931                           ;hd44780.c: 187: _delay(10);
  4932  0012D2  D82E               	call	PL42	;call to abstracted procedure
  4933  0012D4                     u3247:
  4934  0012D4  2EE8               	decfsz	wreg,f,c
  4935  0012D6  D7FE               	goto	u3247
  4936  0012D8  F000               	nop	
  4937                           
  4938                           ;hd44780.c: 188: LATBbits.LATB5 = 1;
  4939  0012DA  8A8A               	bsf	3978,5,c	;volatile
  4940                           
  4941                           ;hd44780.c: 189: Lcd_Delay5us();
  4942  0012DC  EC90  F00F         	call	_Lcd_Delay5us	;wreg free
  4943                           
  4944                           ;hd44780.c: 190: LATBbits.LATB5 = 0;
  4945  0012E0  9A8A               	bcf	3978,5,c	;volatile
  4946                           
  4947                           ;hd44780.c: 191: Lcd_Delay5us();
  4948  0012E2  EC90  F00F         	call	_Lcd_Delay5us	;wreg free
  4949                           
  4950                           ;hd44780.c: 192: Lcd_Delay5500us();
  4951  0012E6  EF99  F00F         	goto	_Lcd_Delay5500us	;wreg free
  4952  0012EA                     __end_of_Lcd_CharCP:
  4953                           	opt stack 0
  4954  0012EA                     PL28:
  4955                           	opt stack 28
  4956  0012EA  1602               	andwf	??_Lcd_CharCP,f,c
  4957  0012EC  4602               	rlncf	??_Lcd_CharCP,f,c
  4958  0012EE  4602               	rlncf	??_Lcd_CharCP,f,c
  4959  0012F0  4602               	rlncf	??_Lcd_CharCP,f,c
  4960  0012F2  508A               	movf	3978,w,c	;volatile
  4961  0012F4  1802               	xorwf	??_Lcd_CharCP,w,c
  4962  0012F6  0BF7               	andlw	-9
  4963  0012F8  1802               	xorwf	??_Lcd_CharCP,w,c
  4964  0012FA  6E8A               	movwf	3978,c	;volatile
  4965  0012FC  C004  F002         	movff	Lcd_CharCP@c,??_Lcd_CharCP
  4966  001300  0012               	return	
  4967  001302                     __end_ofPL28:
  4968                           	opt stack 0
  4969  001302                     PL32:
  4970                           	opt stack 28
  4971  001302  0E01               	movlw	1
  4972  001304  1602               	andwf	??_Lcd_CharCP,f,c
  4973  001306  4602               	rlncf	??_Lcd_CharCP,f,c
  4974  001308  4602               	rlncf	??_Lcd_CharCP,f,c
  4975  00130A  508A               	movf	3978,w,c	;volatile
  4976  00130C  1802               	xorwf	??_Lcd_CharCP,w,c
  4977  00130E  0BFB               	andlw	-5
  4978  001310  1802               	xorwf	??_Lcd_CharCP,w,c
  4979  001312  6E8A               	movwf	3978,c	;volatile
  4980  001314  C004  F002         	movff	Lcd_CharCP@c,??_Lcd_CharCP
  4981  001318  0012               	return	
  4982  00131A                     __end_ofPL32:
  4983                           	opt stack 0
  4984  00131A                     PL36:
  4985                           	opt stack 28
  4986  00131A  0E01               	movlw	1
  4987  00131C  1602               	andwf	??_Lcd_CharCP,f,c
  4988  00131E  4602               	rlncf	??_Lcd_CharCP,f,c
  4989  001320  508A               	movf	3978,w,c	;volatile
  4990  001322  1802               	xorwf	??_Lcd_CharCP,w,c
  4991  001324  0BFD               	andlw	-3
  4992  001326  1802               	xorwf	??_Lcd_CharCP,w,c
  4993  001328  6E8A               	movwf	3978,c	;volatile
  4994  00132A  C004  F002         	movff	Lcd_CharCP@c,??_Lcd_CharCP
  4995  00132E  0012               	return	
  4996  001330                     __end_ofPL36:
  4997                           	opt stack 0
  4998  001330                     PL42:
  4999                           	opt stack 28
  5000  001330  0E01               	movlw	1
  5001  001332  1602               	andwf	??_Lcd_CharCP,f,c
  5002  001334  508A               	movf	3978,w,c	;volatile
  5003  001336  1802               	xorwf	??_Lcd_CharCP,w,c
  5004  001338  0BFE               	andlw	-2
  5005  00133A  1802               	xorwf	??_Lcd_CharCP,w,c
  5006  00133C  6E8A               	movwf	3978,c	;volatile
  5007  00133E  0C03               	retlw	3
  5008  001340                     __end_ofPL42:
  5009                           	opt stack 0
  5010                           tblptru	equ	0xFF8
  5011                           tblptrh	equ	0xFF7
  5012                           tblptrl	equ	0xFF6
  5013                           tablat	equ	0xFF5
  5014                           prodh	equ	0xFF4
  5015                           prodl	equ	0xFF3
  5016                           indf0	equ	0xFEF
  5017                           fsr0h	equ	0xFEA
  5018                           fsr0l	equ	0xFE9
  5019                           wreg	equ	0xFE8
  5020                           indf2	equ	0xFDF
  5021                           postinc2	equ	0xFDE
  5022                           postdec2	equ	0xFDD
  5023                           fsr2h	equ	0xFDA
  5024                           fsr2l	equ	0xFD9
  5025                           status	equ	0xFD8
  5026                           
  5027 ;; *************** function _Lcd_Init *****************
  5028 ;; Defined at:
  5029 ;;		line 17 in file "hd44780.c"
  5030 ;; Parameters:    Size  Location     Type
  5031 ;;		None
  5032 ;; Auto vars:     Size  Location     Type
  5033 ;;  data            1    4[COMRAM] unsigned char 
  5034 ;; Return value:  Size  Location     Type
  5035 ;;		None               void
  5036 ;; Registers used:
  5037 ;;		wreg, status,2, status,0, cstack
  5038 ;; Tracked objects:
  5039 ;;		On entry : 0/0
  5040 ;;		On exit  : 0/0
  5041 ;;		Unchanged: 0/0
  5042 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5043 ;;      Params:         0       0       0       0       0       0       0
  5044 ;;      Locals:         1       0       0       0       0       0       0
  5045 ;;      Temps:          0       0       0       0       0       0       0
  5046 ;;      Totals:         1       0       0       0       0       0       0
  5047 ;;Total ram usage:        1 bytes
  5048 ;; Hardware stack levels used:    1
  5049 ;; Hardware stack levels required when called:    2
  5050 ;; This function calls:
  5051 ;;		_Lcd_Command
  5052 ;;		_Lcd_Delay5500us
  5053 ;;		_Lcd_Delay5us
  5054 ;; This function is called by:
  5055 ;;		_main
  5056 ;; This function uses a non-reentrant model
  5057 ;;
  5058                           
  5059                           	psect	text23
  5060  0017E2                     __ptext23:
  5061                           	opt stack 0
  5062  0017E2                     _Lcd_Init:
  5063                           	opt stack 28
  5064                           
  5065                           ;hd44780.c: 19: unsigned char data;
  5066                           ;hd44780.c: 21: TRISBbits.TRISB3 = 0; TRISBbits.TRISB2 = 0; TRISBbits.TRISB1 = 0; TRISBb
      +                          its.TRISB0 = 0; TRISBbits.TRISB5 = 0; TRISBbits.TRISB4 = 0;
  5067                           
  5068                           ;incstack = 0
  5069  0017E2  9693               	bcf	3987,3,c	;volatile
  5070  0017E4  9493               	bcf	3987,2,c	;volatile
  5071  0017E6  9293               	bcf	3987,1,c	;volatile
  5072  0017E8  9093               	bcf	3987,0,c	;volatile
  5073  0017EA  9A93               	bcf	3987,5,c	;volatile
  5074  0017EC  9893               	bcf	3987,4,c	;volatile
  5075                           
  5076                           ;hd44780.c: 22: LATBbits.LATB3 = 0; LATBbits.LATB2 = 0; LATBbits.LATB1 = 0; LATBbits.LAT
      +                          B0 = 0; LATBbits.LATB5 = 0; LATBbits.LATB4 = 0;
  5077  0017EE  968A               	bcf	3978,3,c	;volatile
  5078  0017F0  948A               	bcf	3978,2,c	;volatile
  5079  0017F2  928A               	bcf	3978,1,c	;volatile
  5080  0017F4  908A               	bcf	3978,0,c	;volatile
  5081  0017F6  9A8A               	bcf	3978,5,c	;volatile
  5082  0017F8  988A               	bcf	3978,4,c	;volatile
  5083                           
  5084                           ;hd44780.c: 24: Lcd_Delay5500us(); Lcd_Delay5500us(); Lcd_Delay5500us(); Lcd_Delay5500us
      +                          ();
  5085  0017FA  EC99  F00F         	call	_Lcd_Delay5500us	;wreg free
  5086  0017FE  EC99  F00F         	call	_Lcd_Delay5500us	;wreg free
  5087  001802  EC99  F00F         	call	_Lcd_Delay5500us	;wreg free
  5088  001806  EC99  F00F         	call	_Lcd_Delay5500us	;wreg free
  5089                           
  5090                           ;hd44780.c: 25: Lcd_Delay5500us(); Lcd_Delay5500us();
  5091  00180A  EC99  F00F         	call	_Lcd_Delay5500us	;wreg free
  5092  00180E  EC99  F00F         	call	_Lcd_Delay5500us	;wreg free
  5093                           
  5094                           ;hd44780.c: 27: for(data = 1; data < 4; data ++)
  5095  001812  0E01               	movlw	1
  5096  001814  6E05               	movwf	Lcd_Init@data,c
  5097  001816                     l17:
  5098                           
  5099                           ;hd44780.c: 28: {
  5100                           ;hd44780.c: 29: LATBbits.LATB3 = 0; LATBbits.LATB2 = 0; LATBbits.LATB1 = 1; LATBbits.LAT
      +                          B0 = 1; LATBbits.LATB5 = 0;
  5101                           
  5102                           ;hd44780.c: 30: LATBbits.LATB4 = 0;
  5103  001816  D82E               	call	PL56	;call to abstracted procedure
  5104                           
  5105                           ;hd44780.c: 31: LATBbits.LATB3 = 0; LATBbits.LATB2 = 0; LATBbits.LATB1 = 1; LATBbits.LAT
      +                          B0 = 1; LATBbits.LATB5 = 1;
  5106  001818  968A               	bcf	3978,3,c	;volatile
  5107  00181A  948A               	bcf	3978,2,c	;volatile
  5108  00181C  828A               	bsf	3978,1,c	;volatile
  5109  00181E  808A               	bsf	3978,0,c	;volatile
  5110  001820  8A8A               	bsf	3978,5,c	;volatile
  5111                           
  5112                           ;hd44780.c: 32: LATBbits.LATB4 = 0;
  5113  001822  988A               	bcf	3978,4,c	;volatile
  5114                           
  5115                           ;hd44780.c: 34: Lcd_Delay5us();
  5116  001824  EC90  F00F         	call	_Lcd_Delay5us	;wreg free
  5117                           
  5118                           ;hd44780.c: 36: LATBbits.LATB3 = 0; LATBbits.LATB2 = 0; LATBbits.LATB1 = 1; LATBbits.LAT
      +                          B0 = 1; LATBbits.LATB5 = 0;
  5119                           
  5120                           ;hd44780.c: 37: LATBbits.LATB4 = 0;
  5121  001828  D825               	call	PL56	;call to abstracted procedure
  5122                           
  5123                           ;hd44780.c: 39: Lcd_Delay5500us();
  5124  00182A  EC99  F00F         	call	_Lcd_Delay5500us	;wreg free
  5125  00182E  2A05               	incf	Lcd_Init@data,f,c
  5126  001830  0E03               	movlw	3
  5127  001832  6405               	cpfsgt	Lcd_Init@data,c
  5128  001834  D7F0               	goto	l17
  5129                           
  5130                           ;hd44780.c: 40: }
  5131                           ;hd44780.c: 42: LATBbits.LATB3 = 0; LATBbits.LATB2 = 0; LATBbits.LATB1 = 1; LATBbits.LAT
      +                          B0 = 0; LATBbits.LATB5 = 0; LATBbits.LATB4 = 0;
  5132  001836  D817               	call	PL52	;call to abstracted procedure
  5133                           
  5134                           ;hd44780.c: 43: LATBbits.LATB3 = 0; LATBbits.LATB2 = 0; LATBbits.LATB1 = 1; LATBbits.LAT
      +                          B0 = 0; LATBbits.LATB5 = 1; LATBbits.LATB4 = 0;
  5135  001838  968A               	bcf	3978,3,c	;volatile
  5136  00183A  948A               	bcf	3978,2,c	;volatile
  5137  00183C  828A               	bsf	3978,1,c	;volatile
  5138  00183E  908A               	bcf	3978,0,c	;volatile
  5139  001840  8A8A               	bsf	3978,5,c	;volatile
  5140  001842  988A               	bcf	3978,4,c	;volatile
  5141                           
  5142                           ;hd44780.c: 45: Lcd_Delay5us();
  5143  001844  EC90  F00F         	call	_Lcd_Delay5us	;wreg free
  5144                           
  5145                           ;hd44780.c: 47: LATBbits.LATB3 = 0; LATBbits.LATB2 = 0; LATBbits.LATB1 = 1; LATBbits.LAT
      +                          B0 = 0; LATBbits.LATB5 = 0; LATBbits.LATB4 = 0;
  5146  001848  D80E               	call	PL52	;call to abstracted procedure
  5147                           
  5148                           ;hd44780.c: 49: Lcd_Delay5500us();
  5149  00184A  EC99  F00F         	call	_Lcd_Delay5500us	;wreg free
  5150                           
  5151                           ;hd44780.c: 52: Lcd_Command(40);
  5152  00184E  0E28               	movlw	40
  5153  001850  ECA0  F009         	call	_Lcd_Command
  5154                           
  5155                           ;hd44780.c: 55: Lcd_Command(16);
  5156  001854  0E10               	movlw	16
  5157  001856  ECA0  F009         	call	_Lcd_Command
  5158                           
  5159                           ;hd44780.c: 58: Lcd_Command(1);
  5160  00185A  0E01               	movlw	1
  5161  00185C  ECA0  F009         	call	_Lcd_Command
  5162                           
  5163                           ;hd44780.c: 61: Lcd_Command(15);
  5164  001860  0E0F               	movlw	15
  5165  001862  EFA0  F009         	goto	_Lcd_Command
  5166  001866                     __end_of_Lcd_Init:
  5167                           	opt stack 0
  5168  001866                     PL52:
  5169                           	opt stack 28
  5170  001866  968A               	bcf	3978,3,c	;volatile
  5171  001868  948A               	bcf	3978,2,c	;volatile
  5172  00186A  828A               	bsf	3978,1,c	;volatile
  5173  00186C  908A               	bcf	3978,0,c	;volatile
  5174  00186E  9A8A               	bcf	3978,5,c	;volatile
  5175  001870  988A               	bcf	3978,4,c	;volatile
  5176  001872  0012               	return	
  5177  001874                     __end_ofPL52:
  5178                           	opt stack 0
  5179  001874                     PL56:
  5180                           	opt stack 28
  5181  001874  968A               	bcf	3978,3,c	;volatile
  5182  001876  948A               	bcf	3978,2,c	;volatile
  5183  001878  828A               	bsf	3978,1,c	;volatile
  5184  00187A  808A               	bsf	3978,0,c	;volatile
  5185  00187C  9A8A               	bcf	3978,5,c	;volatile
  5186  00187E  988A               	bcf	3978,4,c	;volatile
  5187  001880  0012               	return	
  5188  001882                     __end_ofPL56:
  5189                           	opt stack 0
  5190                           tblptru	equ	0xFF8
  5191                           tblptrh	equ	0xFF7
  5192                           tblptrl	equ	0xFF6
  5193                           tablat	equ	0xFF5
  5194                           prodh	equ	0xFF4
  5195                           prodl	equ	0xFF3
  5196                           indf0	equ	0xFEF
  5197                           fsr0h	equ	0xFEA
  5198                           fsr0l	equ	0xFE9
  5199                           wreg	equ	0xFE8
  5200                           indf2	equ	0xFDF
  5201                           postinc2	equ	0xFDE
  5202                           postdec2	equ	0xFDD
  5203                           fsr2h	equ	0xFDA
  5204                           fsr2l	equ	0xFD9
  5205                           status	equ	0xFD8
  5206                           
  5207 ;; *************** function _Lcd_Command *****************
  5208 ;; Defined at:
  5209 ;;		line 200 in file "hd44780.c"
  5210 ;; Parameters:    Size  Location     Type
  5211 ;;  command         1    wreg     unsigned char 
  5212 ;; Auto vars:     Size  Location     Type
  5213 ;;  command         1    3[COMRAM] unsigned char 
  5214 ;; Return value:  Size  Location     Type
  5215 ;;		None               void
  5216 ;; Registers used:
  5217 ;;		wreg, status,2, status,0, cstack
  5218 ;; Tracked objects:
  5219 ;;		On entry : 0/0
  5220 ;;		On exit  : 0/0
  5221 ;;		Unchanged: 0/0
  5222 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5223 ;;      Params:         0       0       0       0       0       0       0
  5224 ;;      Locals:         1       0       0       0       0       0       0
  5225 ;;      Temps:          2       0       0       0       0       0       0
  5226 ;;      Totals:         3       0       0       0       0       0       0
  5227 ;;Total ram usage:        3 bytes
  5228 ;; Hardware stack levels used:    1
  5229 ;; Hardware stack levels required when called:    1
  5230 ;; This function calls:
  5231 ;;		_Lcd_Delay5500us
  5232 ;;		_Lcd_Delay5us
  5233 ;; This function is called by:
  5234 ;;		_Lcd_Init
  5235 ;;		_Lcd_Text
  5236 ;;		_main
  5237 ;; This function uses a non-reentrant model
  5238 ;;
  5239                           
  5240                           	psect	text24
  5241  001340                     __ptext24:
  5242                           	opt stack 0
  5243  001340                     _Lcd_Command:
  5244                           	opt stack 28
  5245                           
  5246                           ;incstack = 0
  5247                           ;Lcd_Command@command stored from wreg
  5248  001340  6E04               	movwf	Lcd_Command@command,c
  5249                           
  5250                           ;hd44780.c: 202: LATBbits.LATB5 = 0;
  5251  001342  9A8A               	bcf	3978,5,c	;volatile
  5252                           
  5253                           ;hd44780.c: 203: LATBbits.LATB4 = 0;
  5254  001344  988A               	bcf	3978,4,c	;volatile
  5255                           
  5256                           ;hd44780.c: 205: LATBbits.LATB3 = (command & 0b10000000) >> 7;
  5257  001346  6A02               	clrf	??_Lcd_Command& (0+255),c
  5258  001348  AE04               	btfss	Lcd_Command@command,7,c
  5259  00134A  D001               	bra	u605
  5260  00134C  2A02               	incf	??_Lcd_Command& (0+255),f,c
  5261  00134E                     u605:
  5262  00134E  0E01               	movlw	1
  5263                           
  5264                           ;hd44780.c: 206: LATBbits.LATB2 = (command & 0b01000000) >> 6;
  5265  001350  D837               	call	PL30	;call to abstracted procedure
  5266  001352  0E06               	movlw	6
  5267  001354  6E03               	movwf	(??_Lcd_Command+1)& (0+255),c
  5268  001356                     u615:
  5269  001356  90D8               	bcf	status,0,c
  5270  001358  3202               	rrcf	??_Lcd_Command,f,c
  5271  00135A  2E03               	decfsz	(??_Lcd_Command+1)& (0+255),f,c
  5272  00135C  D7FC               	goto	u615
  5273                           
  5274                           ;hd44780.c: 207: LATBbits.LATB1 = (command & 0b00100000) >> 5;
  5275  00135E  D83C               	call	PL34	;call to abstracted procedure
  5276  001360  0E05               	movlw	5
  5277  001362  6E03               	movwf	(??_Lcd_Command+1)& (0+255),c
  5278  001364                     u625:
  5279  001364  90D8               	bcf	status,0,c
  5280  001366  3202               	rrcf	??_Lcd_Command,f,c
  5281  001368  2E03               	decfsz	(??_Lcd_Command+1)& (0+255),f,c
  5282  00136A  D7FC               	goto	u625
  5283                           
  5284                           ;hd44780.c: 208: LATBbits.LATB0 = (command & 0b00010000) >> 4;
  5285  00136C  D841               	call	PL40	;call to abstracted procedure
  5286  00136E  3A02               	swapf	??_Lcd_Command,f,c
  5287  001370  0E0F               	movlw	15
  5288  001372  1602               	andwf	??_Lcd_Command,f,c
  5289                           
  5290                           ;hd44780.c: 210: _delay(10);
  5291  001374  D848               	call	PL44	;call to abstracted procedure
  5292  001376                     u3257:
  5293  001376  2EE8               	decfsz	wreg,f,c
  5294  001378  D7FE               	goto	u3257
  5295  00137A  F000               	nop	
  5296                           
  5297                           ;hd44780.c: 211: LATBbits.LATB5 = 1;
  5298  00137C  8A8A               	bsf	3978,5,c	;volatile
  5299                           
  5300                           ;hd44780.c: 212: Lcd_Delay5us();
  5301  00137E  EC90  F00F         	call	_Lcd_Delay5us	;wreg free
  5302                           
  5303                           ;hd44780.c: 213: LATBbits.LATB5 = 0;
  5304  001382  9A8A               	bcf	3978,5,c	;volatile
  5305                           
  5306                           ;hd44780.c: 215: LATBbits.LATB3 = (command & 0b00001000) >> 3;
  5307  001384  C004  F002         	movff	Lcd_Command@command,??_Lcd_Command
  5308  001388  90D8               	bcf	status,0,c
  5309  00138A  3202               	rrcf	??_Lcd_Command,f,c
  5310  00138C  90D8               	bcf	status,0,c
  5311  00138E  3202               	rrcf	??_Lcd_Command,f,c
  5312  001390  90D8               	bcf	status,0,c
  5313  001392  3202               	rrcf	??_Lcd_Command,f,c
  5314  001394  0E01               	movlw	1
  5315                           
  5316                           ;hd44780.c: 216: LATBbits.LATB2 = (command & 0b00000100) >> 2;
  5317  001396  D814               	call	PL30	;call to abstracted procedure
  5318  001398  90D8               	bcf	status,0,c
  5319  00139A  3202               	rrcf	??_Lcd_Command,f,c
  5320  00139C  90D8               	bcf	status,0,c
  5321  00139E  3202               	rrcf	??_Lcd_Command,f,c
  5322                           
  5323                           ;hd44780.c: 217: LATBbits.LATB1 = (command & 0b00000010) >> 1;
  5324  0013A0  D81B               	call	PL34	;call to abstracted procedure
  5325  0013A2  90D8               	bcf	status,0,c
  5326  0013A4  3202               	rrcf	??_Lcd_Command,f,c
  5327                           
  5328                           ;hd44780.c: 218: LATBbits.LATB0 = (command & 0b00000001);
  5329  0013A6  D824               	call	PL40	;call to abstracted procedure
  5330                           
  5331                           ;hd44780.c: 220: _delay(10);
  5332  0013A8  D82E               	call	PL44	;call to abstracted procedure
  5333  0013AA                     u3267:
  5334  0013AA  2EE8               	decfsz	wreg,f,c
  5335  0013AC  D7FE               	goto	u3267
  5336  0013AE  F000               	nop	
  5337                           
  5338                           ;hd44780.c: 221: LATBbits.LATB5 = 1;
  5339  0013B0  8A8A               	bsf	3978,5,c	;volatile
  5340                           
  5341                           ;hd44780.c: 222: Lcd_Delay5us();
  5342  0013B2  EC90  F00F         	call	_Lcd_Delay5us	;wreg free
  5343                           
  5344                           ;hd44780.c: 223: LATBbits.LATB5 = 0;
  5345  0013B6  9A8A               	bcf	3978,5,c	;volatile
  5346                           
  5347                           ;hd44780.c: 225: Lcd_Delay5500us();
  5348  0013B8  EC99  F00F         	call	_Lcd_Delay5500us	;wreg free
  5349                           
  5350                           ;hd44780.c: 226: Lcd_Delay5us();
  5351  0013BC  EF90  F00F         	goto	_Lcd_Delay5us	;wreg free
  5352  0013C0                     __end_of_Lcd_Command:
  5353                           	opt stack 0
  5354  0013C0                     PL30:
  5355                           	opt stack 28
  5356  0013C0  1602               	andwf	??_Lcd_Command,f,c
  5357  0013C2  4602               	rlncf	??_Lcd_Command,f,c
  5358  0013C4  4602               	rlncf	??_Lcd_Command,f,c
  5359  0013C6  4602               	rlncf	??_Lcd_Command,f,c
  5360  0013C8  508A               	movf	3978,w,c	;volatile
  5361  0013CA  1802               	xorwf	??_Lcd_Command,w,c
  5362  0013CC  0BF7               	andlw	-9
  5363  0013CE  1802               	xorwf	??_Lcd_Command,w,c
  5364  0013D0  6E8A               	movwf	3978,c	;volatile
  5365  0013D2  C004  F002         	movff	Lcd_Command@command,??_Lcd_Command
  5366  0013D6  0012               	return	
  5367  0013D8                     __end_ofPL30:
  5368                           	opt stack 0
  5369  0013D8                     PL34:
  5370                           	opt stack 28
  5371  0013D8  0E01               	movlw	1
  5372  0013DA  1602               	andwf	??_Lcd_Command,f,c
  5373  0013DC  4602               	rlncf	??_Lcd_Command,f,c
  5374  0013DE  4602               	rlncf	??_Lcd_Command,f,c
  5375  0013E0  508A               	movf	3978,w,c	;volatile
  5376  0013E2  1802               	xorwf	??_Lcd_Command,w,c
  5377  0013E4  0BFB               	andlw	-5
  5378  0013E6  1802               	xorwf	??_Lcd_Command,w,c
  5379  0013E8  6E8A               	movwf	3978,c	;volatile
  5380  0013EA  C004  F002         	movff	Lcd_Command@command,??_Lcd_Command
  5381  0013EE  0012               	return	
  5382  0013F0                     __end_ofPL34:
  5383                           	opt stack 0
  5384  0013F0                     PL40:
  5385                           	opt stack 28
  5386  0013F0  0E01               	movlw	1
  5387  0013F2  1602               	andwf	??_Lcd_Command,f,c
  5388  0013F4  4602               	rlncf	??_Lcd_Command,f,c
  5389  0013F6  508A               	movf	3978,w,c	;volatile
  5390  0013F8  1802               	xorwf	??_Lcd_Command,w,c
  5391  0013FA  0BFD               	andlw	-3
  5392  0013FC  1802               	xorwf	??_Lcd_Command,w,c
  5393  0013FE  6E8A               	movwf	3978,c	;volatile
  5394  001400  C004  F002         	movff	Lcd_Command@command,??_Lcd_Command
  5395  001404  0012               	return	
  5396  001406                     __end_ofPL40:
  5397                           	opt stack 0
  5398  001406                     PL44:
  5399                           	opt stack 28
  5400  001406  0E01               	movlw	1
  5401  001408  1602               	andwf	??_Lcd_Command,f,c
  5402  00140A  508A               	movf	3978,w,c	;volatile
  5403  00140C  1802               	xorwf	??_Lcd_Command,w,c
  5404  00140E  0BFE               	andlw	-2
  5405  001410  1802               	xorwf	??_Lcd_Command,w,c
  5406  001412  6E8A               	movwf	3978,c	;volatile
  5407  001414  0C03               	retlw	3
  5408  001416                     __end_ofPL44:
  5409                           	opt stack 0
  5410                           tblptru	equ	0xFF8
  5411                           tblptrh	equ	0xFF7
  5412                           tblptrl	equ	0xFF6
  5413                           tablat	equ	0xFF5
  5414                           prodh	equ	0xFF4
  5415                           prodl	equ	0xFF3
  5416                           indf0	equ	0xFEF
  5417                           fsr0h	equ	0xFEA
  5418                           fsr0l	equ	0xFE9
  5419                           wreg	equ	0xFE8
  5420                           indf2	equ	0xFDF
  5421                           postinc2	equ	0xFDE
  5422                           postdec2	equ	0xFDD
  5423                           fsr2h	equ	0xFDA
  5424                           fsr2l	equ	0xFD9
  5425                           status	equ	0xFD8
  5426                           
  5427 ;; *************** function _Lcd_Delay5us *****************
  5428 ;; Defined at:
  5429 ;;		line 232 in file "hd44780.c"
  5430 ;; Parameters:    Size  Location     Type
  5431 ;;		None
  5432 ;; Auto vars:     Size  Location     Type
  5433 ;;		None
  5434 ;; Return value:  Size  Location     Type
  5435 ;;		None               void
  5436 ;; Registers used:
  5437 ;;		wreg
  5438 ;; Tracked objects:
  5439 ;;		On entry : 0/0
  5440 ;;		On exit  : 0/0
  5441 ;;		Unchanged: 0/0
  5442 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5443 ;;      Params:         0       0       0       0       0       0       0
  5444 ;;      Locals:         0       0       0       0       0       0       0
  5445 ;;      Temps:          0       0       0       0       0       0       0
  5446 ;;      Totals:         0       0       0       0       0       0       0
  5447 ;;Total ram usage:        0 bytes
  5448 ;; Hardware stack levels used:    1
  5449 ;; This function calls:
  5450 ;;		Nothing
  5451 ;; This function is called by:
  5452 ;;		_Lcd_Init
  5453 ;;		_Lcd_CharCP
  5454 ;;		_Lcd_Command
  5455 ;; This function uses a non-reentrant model
  5456 ;;
  5457                           
  5458                           	psect	text25
  5459  001F20                     __ptext25:
  5460                           	opt stack 0
  5461  001F20                     _Lcd_Delay5us:
  5462                           	opt stack 28
  5463                           
  5464                           ;hd44780.c: 234: _delay((unsigned long)((5)*(20000000/4000000.0)));
  5465                           
  5466                           ;incstack = 0
  5467  001F20  0E08               	movlw	8
  5468  001F22                     u3277:
  5469  001F22  2EE8               	decfsz	wreg,f,c
  5470  001F24  D7FE               	goto	u3277
  5471  001F26  F000               	nop	
  5472                           
  5473                           ;hd44780.c: 235: _delay((unsigned long)((5)*(20000000/4000000.0)));
  5474  001F28  0E08               	movlw	8
  5475  001F2A                     u3287:
  5476  001F2A  2EE8               	decfsz	wreg,f,c
  5477  001F2C  D7FE               	goto	u3287
  5478  001F2E  F000               	nop	
  5479  001F30  0012               	return		;funcret
  5480  001F32                     __end_of_Lcd_Delay5us:
  5481                           	opt stack 0
  5482                           tblptru	equ	0xFF8
  5483                           tblptrh	equ	0xFF7
  5484                           tblptrl	equ	0xFF6
  5485                           tablat	equ	0xFF5
  5486                           prodh	equ	0xFF4
  5487                           prodl	equ	0xFF3
  5488                           indf0	equ	0xFEF
  5489                           fsr0h	equ	0xFEA
  5490                           fsr0l	equ	0xFE9
  5491                           wreg	equ	0xFE8
  5492                           indf2	equ	0xFDF
  5493                           postinc2	equ	0xFDE
  5494                           postdec2	equ	0xFDD
  5495                           fsr2h	equ	0xFDA
  5496                           fsr2l	equ	0xFD9
  5497                           status	equ	0xFD8
  5498                           
  5499 ;; *************** function _Lcd_Delay5500us *****************
  5500 ;; Defined at:
  5501 ;;		line 238 in file "hd44780.c"
  5502 ;; Parameters:    Size  Location     Type
  5503 ;;		None
  5504 ;; Auto vars:     Size  Location     Type
  5505 ;;		None
  5506 ;; Return value:  Size  Location     Type
  5507 ;;		None               void
  5508 ;; Registers used:
  5509 ;;		wreg
  5510 ;; Tracked objects:
  5511 ;;		On entry : 0/0
  5512 ;;		On exit  : 0/0
  5513 ;;		Unchanged: 0/0
  5514 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5515 ;;      Params:         0       0       0       0       0       0       0
  5516 ;;      Locals:         0       0       0       0       0       0       0
  5517 ;;      Temps:          1       0       0       0       0       0       0
  5518 ;;      Totals:         1       0       0       0       0       0       0
  5519 ;;Total ram usage:        1 bytes
  5520 ;; Hardware stack levels used:    1
  5521 ;; This function calls:
  5522 ;;		Nothing
  5523 ;; This function is called by:
  5524 ;;		_Lcd_Init
  5525 ;;		_Lcd_CharCP
  5526 ;;		_Lcd_Command
  5527 ;; This function uses a non-reentrant model
  5528 ;;
  5529                           
  5530                           	psect	text26
  5531  001F32                     __ptext26:
  5532                           	opt stack 0
  5533  001F32                     _Lcd_Delay5500us:
  5534                           	opt stack 28
  5535                           
  5536                           ;hd44780.c: 240: _delay((unsigned long)((5500)*(20000000/4000000.0)));
  5537                           
  5538                           ;incstack = 0
  5539  001F32  0E24               	movlw	36
  5540  001F34  6E01               	movwf	??_Lcd_Delay5500us& (0+255),c
  5541  001F36  0EB6               	movlw	182
  5542  001F38                     u3297:
  5543  001F38  2EE8               	decfsz	wreg,f,c
  5544  001F3A  D7FE               	goto	u3297
  5545  001F3C  2E01               	decfsz	??_Lcd_Delay5500us& (0+255),f,c
  5546  001F3E  D7FC               	goto	u3297
  5547  001F40  0012               	return		;funcret
  5548  001F42                     __end_of_Lcd_Delay5500us:
  5549                           	opt stack 0
  5550                           tblptru	equ	0xFF8
  5551                           tblptrh	equ	0xFF7
  5552                           tblptrl	equ	0xFF6
  5553                           tablat	equ	0xFF5
  5554                           prodh	equ	0xFF4
  5555                           prodl	equ	0xFF3
  5556                           indf0	equ	0xFEF
  5557                           fsr0h	equ	0xFEA
  5558                           fsr0l	equ	0xFE9
  5559                           wreg	equ	0xFE8
  5560                           indf2	equ	0xFDF
  5561                           postinc2	equ	0xFDE
  5562                           postdec2	equ	0xFDD
  5563                           fsr2h	equ	0xFDA
  5564                           fsr2l	equ	0xFD9
  5565                           status	equ	0xFD8
  5566                           
  5567 ;; *************** function _LM75_Read_Temp *****************
  5568 ;; Defined at:
  5569 ;;		line 75 in file "lm75.c"
  5570 ;; Parameters:    Size  Location     Type
  5571 ;;		None
  5572 ;; Auto vars:     Size  Location     Type
  5573 ;;  word0           2   38[COMRAM] int 
  5574 ;;  MSB             1   41[COMRAM] unsigned char 
  5575 ;;  LSB             1   40[COMRAM] unsigned char 
  5576 ;; Return value:  Size  Location     Type
  5577 ;;                  3   33[COMRAM] float 
  5578 ;; Registers used:
  5579 ;;		wreg, status,2, status,0, cstack
  5580 ;; Tracked objects:
  5581 ;;		On entry : 0/0
  5582 ;;		On exit  : 0/0
  5583 ;;		Unchanged: 0/0
  5584 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5585 ;;      Params:         3       0       0       0       0       0       0
  5586 ;;      Locals:         4       0       0       0       0       0       0
  5587 ;;      Temps:          2       0       0       0       0       0       0
  5588 ;;      Totals:         9       0       0       0       0       0       0
  5589 ;;Total ram usage:        9 bytes
  5590 ;; Hardware stack levels used:    1
  5591 ;; Hardware stack levels required when called:    3
  5592 ;; This function calls:
  5593 ;;		_I2C_ReadByte
  5594 ;;		_I2C_RepeatedStart
  5595 ;;		_I2C_Start
  5596 ;;		_I2C_Stop
  5597 ;;		_I2C_WriteByte
  5598 ;;		_LM75_regdata2float
  5599 ;; This function is called by:
  5600 ;;		_main
  5601 ;; This function uses a non-reentrant model
  5602 ;;
  5603                           
  5604                           	psect	text27
  5605  001BE8                     __ptext27:
  5606                           	opt stack 0
  5607  001BE8                     _LM75_Read_Temp:
  5608                           	opt stack 27
  5609                           
  5610                           ;lm75.c: 78: unsigned char MSB = 0;
  5611                           
  5612                           ;incstack = 0
  5613  001BE8  6A2A               	clrf	LM75_Read_Temp@MSB,c
  5614                           
  5615                           ;lm75.c: 79: int word0 = 0;
  5616  001BEA  6A27               	clrf	LM75_Read_Temp@word0,c
  5617  001BEC  6A28               	clrf	LM75_Read_Temp@word0+1,c
  5618                           
  5619                           ;lm75.c: 81: I2C_Start();
  5620  001BEE  ECA7  F00F         	call	_I2C_Start	;wreg free
  5621                           
  5622                           ;lm75.c: 82: I2C_WriteByte(0b10010000);
  5623  001BF2  0E90               	movlw	144
  5624  001BF4  EC0D  F00F         	call	_I2C_WriteByte
  5625                           
  5626                           ;lm75.c: 83: I2C_WriteByte(0x00);
  5627  001BF8  0E00               	movlw	0
  5628  001BFA  EC0D  F00F         	call	_I2C_WriteByte
  5629                           
  5630                           ;lm75.c: 84: I2C_RepeatedStart();
  5631  001BFE  ECAD  F00F         	call	_I2C_RepeatedStart	;wreg free
  5632                           
  5633                           ;lm75.c: 85: I2C_WriteByte(0b10010000 + 1);
  5634  001C02  0E91               	movlw	145
  5635  001C04  EC0D  F00F         	call	_I2C_WriteByte
  5636                           
  5637                           ;lm75.c: 86: MSB = I2C_ReadByte(1);
  5638  001C08  0E01               	movlw	1
  5639  001C0A  EC9E  F00E         	call	_I2C_ReadByte
  5640  001C0E  6E2A               	movwf	LM75_Read_Temp@MSB,c
  5641                           
  5642                           ;lm75.c: 87: LSB = I2C_ReadByte(0);
  5643  001C10  0E00               	movlw	0
  5644  001C12  EC9E  F00E         	call	_I2C_ReadByte
  5645  001C16  6E29               	movwf	LM75_Read_Temp@LSB,c
  5646                           
  5647                           ;lm75.c: 88: I2C_Stop();
  5648  001C18  ECA1  F00F         	call	_I2C_Stop	;wreg free
  5649                           
  5650                           ;lm75.c: 90: word0 = (((unsigned int)MSB << 8) | (LSB));
  5651  001C1C  502A               	movf	LM75_Read_Temp@MSB,w,c
  5652  001C1E  6E25               	movwf	??_LM75_Read_Temp& (0+255),c
  5653  001C20  5029               	movf	LM75_Read_Temp@LSB,w,c
  5654  001C22  6E27               	movwf	LM75_Read_Temp@word0,c
  5655  001C24  C025  F028         	movff	??_LM75_Read_Temp,LM75_Read_Temp@word0+1
  5656                           
  5657                           ;lm75.c: 92: return LM75_regdata2float(word0);
  5658  001C28  C027  F01C         	movff	LM75_Read_Temp@word0,LM75_regdata2float@regdata
  5659  001C2C  C028  F01D         	movff	LM75_Read_Temp@word0+1,LM75_regdata2float@regdata+1
  5660  001C30  EC4D  F00E         	call	_LM75_regdata2float	;wreg free
  5661  001C34  C01C  F022         	movff	?_LM75_regdata2float,?_LM75_Read_Temp
  5662  001C38  C01D  F023         	movff	?_LM75_regdata2float+1,?_LM75_Read_Temp+1
  5663  001C3C  C01E  F024         	movff	?_LM75_regdata2float+2,?_LM75_Read_Temp+2
  5664  001C40  0012               	return		;funcret
  5665  001C42                     __end_of_LM75_Read_Temp:
  5666                           	opt stack 0
  5667                           tblptru	equ	0xFF8
  5668                           tblptrh	equ	0xFF7
  5669                           tblptrl	equ	0xFF6
  5670                           tablat	equ	0xFF5
  5671                           prodh	equ	0xFF4
  5672                           prodl	equ	0xFF3
  5673                           indf0	equ	0xFEF
  5674                           fsr0h	equ	0xFEA
  5675                           fsr0l	equ	0xFE9
  5676                           wreg	equ	0xFE8
  5677                           indf2	equ	0xFDF
  5678                           postinc2	equ	0xFDE
  5679                           postdec2	equ	0xFDD
  5680                           fsr2h	equ	0xFDA
  5681                           fsr2l	equ	0xFD9
  5682                           status	equ	0xFD8
  5683                           
  5684 ;; *************** function _LM75_regdata2float *****************
  5685 ;; Defined at:
  5686 ;;		line 193 in file "lm75.c"
  5687 ;; Parameters:    Size  Location     Type
  5688 ;;  regdata         2   27[COMRAM] int 
  5689 ;; Auto vars:     Size  Location     Type
  5690 ;;		None
  5691 ;; Return value:  Size  Location     Type
  5692 ;;                  3   27[COMRAM] float 
  5693 ;; Registers used:
  5694 ;;		wreg, status,2, status,0, cstack
  5695 ;; Tracked objects:
  5696 ;;		On entry : 0/0
  5697 ;;		On exit  : 0/0
  5698 ;;		Unchanged: 0/0
  5699 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5700 ;;      Params:         3       0       0       0       0       0       0
  5701 ;;      Locals:         3       0       0       0       0       0       0
  5702 ;;      Temps:          0       0       0       0       0       0       0
  5703 ;;      Totals:         6       0       0       0       0       0       0
  5704 ;;Total ram usage:        6 bytes
  5705 ;; Hardware stack levels used:    1
  5706 ;; Hardware stack levels required when called:    2
  5707 ;; This function calls:
  5708 ;;		___awtoft
  5709 ;;		___ftdiv
  5710 ;; This function is called by:
  5711 ;;		_LM75_Read_Temp
  5712 ;; This function uses a non-reentrant model
  5713 ;;
  5714                           
  5715                           	psect	text28
  5716  001C9A                     __ptext28:
  5717                           	opt stack 0
  5718  001C9A                     _LM75_regdata2float:
  5719                           	opt stack 27
  5720                           
  5721                           ;lm75.c: 195: return ((float)(int)regdata / 32) / 8;
  5722                           
  5723                           ;incstack = 0
  5724  001C9A  6A10               	clrf	___ftdiv@f2,c
  5725  001C9C  6A11               	clrf	___ftdiv@f2+1,c
  5726  001C9E  0E42               	movlw	66
  5727  001CA0  6E12               	movwf	___ftdiv@f2+2,c
  5728  001CA2  C01C  F009         	movff	LM75_regdata2float@regdata,___awtoft@c
  5729  001CA6  C01D  F00A         	movff	LM75_regdata2float@regdata+1,___awtoft@c+1
  5730  001CAA  ECD8  F00E         	call	___awtoft	;wreg free
  5731  001CAE  C009  F00D         	movff	?___awtoft,___ftdiv@f1
  5732  001CB2  C00A  F00E         	movff	?___awtoft+1,___ftdiv@f1+1
  5733  001CB6  C00B  F00F         	movff	?___awtoft+2,___ftdiv@f1+2
  5734  001CBA  EC38  F00B         	call	___ftdiv	;wreg free
  5735  001CBE  C00D  F01F         	movff	?___ftdiv,_LM75_regdata2float$1236
  5736  001CC2  C00E  F020         	movff	?___ftdiv+1,_LM75_regdata2float$1236+1
  5737  001CC6  C00F  F021         	movff	?___ftdiv+2,_LM75_regdata2float$1236+2
  5738                           
  5739                           ;lm75.c: 195: return ((float)(int)regdata / 32) / 8;
  5740  001CCA  C01F  F00D         	movff	_LM75_regdata2float$1236,___ftdiv@f1
  5741  001CCE  C020  F00E         	movff	_LM75_regdata2float$1236+1,___ftdiv@f1+1
  5742  001CD2  C021  F00F         	movff	_LM75_regdata2float$1236+2,___ftdiv@f1+2
  5743  001CD6  6A10               	clrf	___ftdiv@f2,c
  5744  001CD8  6A11               	clrf	___ftdiv@f2+1,c
  5745  001CDA  0E41               	movlw	65
  5746  001CDC  6E12               	movwf	___ftdiv@f2+2,c
  5747  001CDE  EC38  F00B         	call	___ftdiv	;wreg free
  5748  001CE2  C00D  F01C         	movff	?___ftdiv,?_LM75_regdata2float
  5749  001CE6  C00E  F01D         	movff	?___ftdiv+1,?_LM75_regdata2float+1
  5750  001CEA  C00F  F01E         	movff	?___ftdiv+2,?_LM75_regdata2float+2
  5751  001CEE  0012               	return		;funcret
  5752  001CF0                     __end_of_LM75_regdata2float:
  5753                           	opt stack 0
  5754                           tblptru	equ	0xFF8
  5755                           tblptrh	equ	0xFF7
  5756                           tblptrl	equ	0xFF6
  5757                           tablat	equ	0xFF5
  5758                           prodh	equ	0xFF4
  5759                           prodl	equ	0xFF3
  5760                           indf0	equ	0xFEF
  5761                           fsr0h	equ	0xFEA
  5762                           fsr0l	equ	0xFE9
  5763                           wreg	equ	0xFE8
  5764                           indf2	equ	0xFDF
  5765                           postinc2	equ	0xFDE
  5766                           postdec2	equ	0xFDD
  5767                           fsr2h	equ	0xFDA
  5768                           fsr2l	equ	0xFD9
  5769                           status	equ	0xFD8
  5770                           
  5771 ;; *************** function ___ftdiv *****************
  5772 ;; Defined at:
  5773 ;;		line 54 in file "D:\Arquivos de Programas\Microchip\xc8\v1.34\sources\common\ftdiv.c"
  5774 ;; Parameters:    Size  Location     Type
  5775 ;;  f1              3   12[COMRAM] float 
  5776 ;;  f2              3   15[COMRAM] float 
  5777 ;; Auto vars:     Size  Location     Type
  5778 ;;  f3              3   22[COMRAM] float 
  5779 ;;  sign            1   26[COMRAM] unsigned char 
  5780 ;;  exp             1   25[COMRAM] unsigned char 
  5781 ;;  cntr            1   21[COMRAM] unsigned char 
  5782 ;; Return value:  Size  Location     Type
  5783 ;;                  3   12[COMRAM] float 
  5784 ;; Registers used:
  5785 ;;		wreg, status,2, status,0, cstack
  5786 ;; Tracked objects:
  5787 ;;		On entry : 0/0
  5788 ;;		On exit  : 0/0
  5789 ;;		Unchanged: 0/0
  5790 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5791 ;;      Params:         6       0       0       0       0       0       0
  5792 ;;      Locals:         6       0       0       0       0       0       0
  5793 ;;      Temps:          3       0       0       0       0       0       0
  5794 ;;      Totals:        15       0       0       0       0       0       0
  5795 ;;Total ram usage:       15 bytes
  5796 ;; Hardware stack levels used:    1
  5797 ;; Hardware stack levels required when called:    1
  5798 ;; This function calls:
  5799 ;;		___ftpack
  5800 ;; This function is called by:
  5801 ;;		_LM75_regdata2float
  5802 ;; This function uses a non-reentrant model
  5803 ;;
  5804                           
  5805                           	psect	text29
  5806  001670                     __ptext29:
  5807                           	opt stack 0
  5808  001670                     ___ftdiv:
  5809                           	opt stack 27
  5810                           
  5811                           ;incstack = 0
  5812  001670  C00F  F013         	movff	___ftdiv@f1+2,??___ftdiv
  5813  001674  6A14               	clrf	(??___ftdiv+1)& (0+255),c
  5814  001676  6A15               	clrf	(??___ftdiv+2)& (0+255),c
  5815  001678  340E               	rlcf	___ftdiv@f1+1,w,c
  5816  00167A  3613               	rlcf	??___ftdiv& (0+255),f,c
  5817  00167C  E301               	bnc	u2021
  5818  00167E  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
  5819  001680                     u2021:
  5820  001680  5013               	movf	??___ftdiv,w,c
  5821  001682  6E1A               	movwf	___ftdiv@exp,c
  5822  001684  501A               	movf	___ftdiv@exp,w,c
  5823  001686  E104               	bnz	l2254
  5824  001688  6A0D               	clrf	?___ftdiv,c
  5825  00168A  6A0E               	clrf	?___ftdiv+1,c
  5826  00168C  6A0F               	clrf	?___ftdiv+2,c
  5827  00168E  0012               	return	
  5828  001690                     l2254:
  5829  001690  C012  F013         	movff	___ftdiv@f2+2,??___ftdiv
  5830  001694  6A14               	clrf	(??___ftdiv+1)& (0+255),c
  5831  001696  6A15               	clrf	(??___ftdiv+2)& (0+255),c
  5832  001698  3411               	rlcf	___ftdiv@f2+1,w,c
  5833  00169A  3613               	rlcf	??___ftdiv& (0+255),f,c
  5834  00169C  E301               	bnc	u2041
  5835  00169E  8014               	bsf	(??___ftdiv+1)& (0+255),0,c
  5836  0016A0                     u2041:
  5837  0016A0  5013               	movf	??___ftdiv,w,c
  5838  0016A2  6E1B               	movwf	___ftdiv@sign,c
  5839  0016A4  501B               	movf	___ftdiv@sign,w,c
  5840  0016A6  E104               	bnz	l766
  5841  0016A8  6A0D               	clrf	?___ftdiv,c
  5842  0016AA  6A0E               	clrf	?___ftdiv+1,c
  5843  0016AC  6A0F               	clrf	?___ftdiv+2,c
  5844  0016AE  0012               	return	
  5845  0016B0                     l766:
  5846  0016B0  6A17               	clrf	___ftdiv@f3,c
  5847  0016B2  6A18               	clrf	___ftdiv@f3+1,c
  5848  0016B4  6A19               	clrf	___ftdiv@f3+2,c
  5849  0016B6  501B               	movf	___ftdiv@sign,w,c
  5850  0016B8  0F89               	addlw	137
  5851  0016BA  5E1A               	subwf	___ftdiv@exp,f,c
  5852  0016BC  C00F  F01B         	movff	___ftdiv@f1+2,___ftdiv@sign
  5853  0016C0  5012               	movf	___ftdiv@f2+2,w,c
  5854  0016C2  1A1B               	xorwf	___ftdiv@sign,f,c
  5855  0016C4  0E80               	movlw	128
  5856  0016C6  161B               	andwf	___ftdiv@sign,f,c
  5857  0016C8  8E0E               	bsf	___ftdiv@f1+1,7,c
  5858  0016CA  6A0F               	clrf	___ftdiv@f1+2,c
  5859  0016CC  8E11               	bsf	___ftdiv@f2+1,7,c
  5860  0016CE  6A12               	clrf	___ftdiv@f2+2,c
  5861  0016D0  0E18               	movlw	24
  5862  0016D2  6E16               	movwf	___ftdiv@cntr,c
  5863  0016D4                     l2272:
  5864  0016D4  90D8               	bcf	status,0,c
  5865  0016D6  3617               	rlcf	___ftdiv@f3,f,c
  5866  0016D8  3618               	rlcf	___ftdiv@f3+1,f,c
  5867  0016DA  3619               	rlcf	___ftdiv@f3+2,f,c
  5868  0016DC  5010               	movf	___ftdiv@f2,w,c
  5869  0016DE  5C0D               	subwf	___ftdiv@f1,w,c
  5870  0016E0  5011               	movf	___ftdiv@f2+1,w,c
  5871  0016E2  580E               	subwfb	___ftdiv@f1+1,w,c
  5872  0016E4  5012               	movf	___ftdiv@f2+2,w,c
  5873  0016E6  580F               	subwfb	___ftdiv@f1+2,w,c
  5874  0016E8  E307               	bnc	l768
  5875  0016EA  5010               	movf	___ftdiv@f2,w,c
  5876  0016EC  5E0D               	subwf	___ftdiv@f1,f,c
  5877  0016EE  5011               	movf	___ftdiv@f2+1,w,c
  5878  0016F0  5A0E               	subwfb	___ftdiv@f1+1,f,c
  5879  0016F2  5012               	movf	___ftdiv@f2+2,w,c
  5880  0016F4  5A0F               	subwfb	___ftdiv@f1+2,f,c
  5881  0016F6  8017               	bsf	___ftdiv@f3,0,c
  5882  0016F8                     l768:
  5883  0016F8  90D8               	bcf	status,0,c
  5884  0016FA  360D               	rlcf	___ftdiv@f1,f,c
  5885  0016FC  360E               	rlcf	___ftdiv@f1+1,f,c
  5886  0016FE  360F               	rlcf	___ftdiv@f1+2,f,c
  5887  001700  2E16               	decfsz	___ftdiv@cntr,f,c
  5888  001702  D7E8               	goto	l2272
  5889  001704  C017  F001         	movff	___ftdiv@f3,___ftpack@arg
  5890  001708  C018  F002         	movff	___ftdiv@f3+1,___ftpack@arg+1
  5891  00170C  C019  F003         	movff	___ftdiv@f3+2,___ftpack@arg+2
  5892  001710  C01A  F004         	movff	___ftdiv@exp,___ftpack@exp
  5893  001714  C01B  F005         	movff	___ftdiv@sign,___ftpack@sign
  5894  001718  ECD4  F00C         	call	___ftpack	;wreg free
  5895  00171C  C001  F00D         	movff	?___ftpack,?___ftdiv
  5896  001720  C002  F00E         	movff	?___ftpack+1,?___ftdiv+1
  5897  001724  C003  F00F         	movff	?___ftpack+2,?___ftdiv+2
  5898  001728  0012               	return		;funcret
  5899  00172A                     __end_of___ftdiv:
  5900                           	opt stack 0
  5901                           tblptru	equ	0xFF8
  5902                           tblptrh	equ	0xFF7
  5903                           tblptrl	equ	0xFF6
  5904                           tablat	equ	0xFF5
  5905                           prodh	equ	0xFF4
  5906                           prodl	equ	0xFF3
  5907                           indf0	equ	0xFEF
  5908                           fsr0h	equ	0xFEA
  5909                           fsr0l	equ	0xFE9
  5910                           wreg	equ	0xFE8
  5911                           indf2	equ	0xFDF
  5912                           postinc2	equ	0xFDE
  5913                           postdec2	equ	0xFDD
  5914                           fsr2h	equ	0xFDA
  5915                           fsr2l	equ	0xFD9
  5916                           status	equ	0xFD8
  5917                           
  5918 ;; *************** function ___awtoft *****************
  5919 ;; Defined at:
  5920 ;;		line 32 in file "D:\Arquivos de Programas\Microchip\xc8\v1.34\sources\common\awtoft.c"
  5921 ;; Parameters:    Size  Location     Type
  5922 ;;  c               2    8[COMRAM] int 
  5923 ;; Auto vars:     Size  Location     Type
  5924 ;;  sign            1   11[COMRAM] unsigned char 
  5925 ;; Return value:  Size  Location     Type
  5926 ;;                  3    8[COMRAM] float 
  5927 ;; Registers used:
  5928 ;;		wreg, status,2, status,0, cstack
  5929 ;; Tracked objects:
  5930 ;;		On entry : 0/0
  5931 ;;		On exit  : 0/0
  5932 ;;		Unchanged: 0/0
  5933 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  5934 ;;      Params:         3       0       0       0       0       0       0
  5935 ;;      Locals:         1       0       0       0       0       0       0
  5936 ;;      Temps:          0       0       0       0       0       0       0
  5937 ;;      Totals:         4       0       0       0       0       0       0
  5938 ;;Total ram usage:        4 bytes
  5939 ;; Hardware stack levels used:    1
  5940 ;; Hardware stack levels required when called:    1
  5941 ;; This function calls:
  5942 ;;		___ftpack
  5943 ;; This function is called by:
  5944 ;;		_LM75_regdata2float
  5945 ;; This function uses a non-reentrant model
  5946 ;;
  5947                           
  5948                           	psect	text30
  5949  001DB0                     __ptext30:
  5950                           	opt stack 0
  5951  001DB0                     ___awtoft:
  5952                           	opt stack 27
  5953                           
  5954                           ;incstack = 0
  5955  001DB0  6A0C               	clrf	___awtoft@sign,c
  5956  001DB2  AE0A               	btfss	___awtoft@c+1,7,c
  5957  001DB4  D006               	goto	l2418
  5958  001DB6  6C09               	negf	___awtoft@c,c
  5959  001DB8  1E0A               	comf	___awtoft@c+1,f,c
  5960  001DBA  B0D8               	btfsc	status,0,c
  5961  001DBC  2A0A               	incf	___awtoft@c+1,f,c
  5962  001DBE  0E01               	movlw	1
  5963  001DC0  6E0C               	movwf	___awtoft@sign,c
  5964  001DC2                     l2418:
  5965  001DC2  C009  F001         	movff	___awtoft@c,___ftpack@arg
  5966  001DC6  C00A  F002         	movff	___awtoft@c+1,___ftpack@arg+1
  5967  001DCA  6A03               	clrf	___ftpack@arg+2,c
  5968  001DCC  0E8E               	movlw	142
  5969  001DCE  6E04               	movwf	___ftpack@exp,c
  5970  001DD0  C00C  F005         	movff	___awtoft@sign,___ftpack@sign
  5971  001DD4  ECD4  F00C         	call	___ftpack	;wreg free
  5972  001DD8  C001  F009         	movff	?___ftpack,?___awtoft
  5973  001DDC  C002  F00A         	movff	?___ftpack+1,?___awtoft+1
  5974  001DE0  C003  F00B         	movff	?___ftpack+2,?___awtoft+2
  5975  001DE4  0012               	return		;funcret
  5976  001DE6                     __end_of___awtoft:
  5977                           	opt stack 0
  5978                           tblptru	equ	0xFF8
  5979                           tblptrh	equ	0xFF7
  5980                           tblptrl	equ	0xFF6
  5981                           tablat	equ	0xFF5
  5982                           prodh	equ	0xFF4
  5983                           prodl	equ	0xFF3
  5984                           indf0	equ	0xFEF
  5985                           fsr0h	equ	0xFEA
  5986                           fsr0l	equ	0xFE9
  5987                           wreg	equ	0xFE8
  5988                           indf2	equ	0xFDF
  5989                           postinc2	equ	0xFDE
  5990                           postdec2	equ	0xFDD
  5991                           fsr2h	equ	0xFDA
  5992                           fsr2l	equ	0xFD9
  5993                           status	equ	0xFD8
  5994                           
  5995 ;; *************** function ___ftpack *****************
  5996 ;; Defined at:
  5997 ;;		line 62 in file "D:\Arquivos de Programas\Microchip\xc8\v1.34\sources\common\float.c"
  5998 ;; Parameters:    Size  Location     Type
  5999 ;;  arg             3    0[COMRAM] unsigned um
  6000 ;;  exp             1    3[COMRAM] unsigned char 
  6001 ;;  sign            1    4[COMRAM] unsigned char 
  6002 ;; Auto vars:     Size  Location     Type
  6003 ;;		None
  6004 ;; Return value:  Size  Location     Type
  6005 ;;                  3    0[COMRAM] float 
  6006 ;; Registers used:
  6007 ;;		wreg, status,2, status,0
  6008 ;; Tracked objects:
  6009 ;;		On entry : 0/0
  6010 ;;		On exit  : 0/0
  6011 ;;		Unchanged: 0/0
  6012 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6013 ;;      Params:         5       0       0       0       0       0       0
  6014 ;;      Locals:         0       0       0       0       0       0       0
  6015 ;;      Temps:          3       0       0       0       0       0       0
  6016 ;;      Totals:         8       0       0       0       0       0       0
  6017 ;;Total ram usage:        8 bytes
  6018 ;; Hardware stack levels used:    1
  6019 ;; This function calls:
  6020 ;;		Nothing
  6021 ;; This function is called by:
  6022 ;;		___awtoft
  6023 ;;		___ftadd
  6024 ;;		___ftdiv
  6025 ;;		___ftmul
  6026 ;;		___lltoft
  6027 ;; This function uses a non-reentrant model
  6028 ;;
  6029                           
  6030                           	psect	text31
  6031  0019A8                     __ptext31:
  6032                           	opt stack 0
  6033  0019A8                     ___ftpack:
  6034                           	opt stack 27
  6035                           
  6036                           ;incstack = 0
  6037  0019A8  5004               	movf	___ftpack@exp,w,c
  6038  0019AA  E004               	bz	l692
  6039  0019AC  5001               	movf	___ftpack@arg,w,c
  6040  0019AE  1002               	iorwf	___ftpack@arg+1,w,c
  6041  0019B0  1003               	iorwf	___ftpack@arg+2,w,c
  6042  0019B2  E106               	bnz	l2158
  6043  0019B4                     l692:
  6044  0019B4  6A01               	clrf	?___ftpack,c
  6045  0019B6  6A02               	clrf	?___ftpack+1,c
  6046  0019B8  6A03               	clrf	?___ftpack+2,c
  6047  0019BA  0012               	return	
  6048  0019BC                     l2156:
  6049  0019BC  2A04               	incf	___ftpack@exp,f,c
  6050  0019BE  D833               	call	PL62	;call to abstracted procedure
  6051  0019C0                     l2158:
  6052  0019C0  6A06               	clrf	??___ftpack& (0+255),c
  6053  0019C2  6A07               	clrf	(??___ftpack+1)& (0+255),c
  6054  0019C4  0EFE               	movlw	254
  6055  0019C6  1403               	andwf	___ftpack@arg+2,w,c
  6056  0019C8  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6057  0019CA  5006               	movf	??___ftpack,w,c
  6058  0019CC  1007               	iorwf	??___ftpack+1,w,c
  6059  0019CE  1008               	iorwf	??___ftpack+2,w,c
  6060  0019D0  E007               	bz	l2164
  6061  0019D2  D7F4               	goto	l2156
  6062  0019D4                     l2160:
  6063  0019D4  2A04               	incf	___ftpack@exp,f,c
  6064  0019D6  2A01               	incf	___ftpack@arg,f,c
  6065  0019D8  0E00               	movlw	0
  6066  0019DA  2202               	addwfc	___ftpack@arg+1,f,c
  6067  0019DC  2203               	addwfc	___ftpack@arg+2,f,c
  6068  0019DE  D823               	call	PL62	;call to abstracted procedure
  6069  0019E0                     l2164:
  6070  0019E0  6A06               	clrf	??___ftpack& (0+255),c
  6071  0019E2  6A07               	clrf	(??___ftpack+1)& (0+255),c
  6072  0019E4  5003               	movf	___ftpack@arg+2,w,c
  6073  0019E6  6E08               	movwf	(??___ftpack+2)& (0+255),c
  6074  0019E8  5006               	movf	??___ftpack,w,c
  6075  0019EA  1007               	iorwf	??___ftpack+1,w,c
  6076  0019EC  1008               	iorwf	??___ftpack+2,w,c
  6077  0019EE  E006               	bz	l2168
  6078  0019F0  D7F1               	goto	l2160
  6079  0019F2                     l2166:
  6080  0019F2  0604               	decf	___ftpack@exp,f,c
  6081  0019F4  90D8               	bcf	status,0,c
  6082  0019F6  3601               	rlcf	___ftpack@arg,f,c
  6083  0019F8  3602               	rlcf	___ftpack@arg+1,f,c
  6084  0019FA  3603               	rlcf	___ftpack@arg+2,f,c
  6085  0019FC                     l2168:
  6086  0019FC  BE02               	btfsc	___ftpack@arg+1,7,c
  6087  0019FE  D003               	goto	l704
  6088  001A00  0E02               	movlw	2
  6089  001A02  6004               	cpfslt	___ftpack@exp,c
  6090  001A04  D7F6               	goto	l2166
  6091  001A06                     l704:
  6092  001A06  A004               	btfss	___ftpack@exp,0,c
  6093  001A08  9E02               	bcf	___ftpack@arg+1,7,c
  6094  001A0A  90D8               	bcf	status,0,c
  6095  001A0C  3204               	rrcf	___ftpack@exp,f,c
  6096  001A0E  5004               	movf	___ftpack@exp,w,c
  6097  001A10  1203               	iorwf	___ftpack@arg+2,f,c
  6098  001A12  5005               	movf	___ftpack@sign,w,c
  6099  001A14  A4D8               	btfss	status,2,c
  6100  001A16  8E03               	bsf	___ftpack@arg+2,7,c
  6101  001A18  C001  F001         	movff	___ftpack@arg,?___ftpack
  6102  001A1C  C002  F002         	movff	___ftpack@arg+1,?___ftpack+1
  6103  001A20  C003  F003         	movff	___ftpack@arg+2,?___ftpack+2
  6104  001A24  0012               	return		;funcret
  6105  001A26                     __end_of___ftpack:
  6106                           	opt stack 0
  6107  001A26                     PL62:
  6108                           	opt stack 27
  6109  001A26  90D8               	bcf	status,0,c
  6110  001A28  3203               	rrcf	___ftpack@arg+2,f,c
  6111  001A2A  3202               	rrcf	___ftpack@arg+1,f,c
  6112  001A2C  3201               	rrcf	___ftpack@arg,f,c
  6113  001A2E  0012               	return	
  6114  001A30                     __end_ofPL62:
  6115                           	opt stack 0
  6116                           tblptru	equ	0xFF8
  6117                           tblptrh	equ	0xFF7
  6118                           tblptrl	equ	0xFF6
  6119                           tablat	equ	0xFF5
  6120                           prodh	equ	0xFF4
  6121                           prodl	equ	0xFF3
  6122                           indf0	equ	0xFEF
  6123                           fsr0h	equ	0xFEA
  6124                           fsr0l	equ	0xFE9
  6125                           wreg	equ	0xFE8
  6126                           indf2	equ	0xFDF
  6127                           postinc2	equ	0xFDE
  6128                           postdec2	equ	0xFDD
  6129                           fsr2h	equ	0xFDA
  6130                           fsr2l	equ	0xFD9
  6131                           status	equ	0xFD8
  6132                           
  6133 ;; *************** function _I2C_WriteByte *****************
  6134 ;; Defined at:
  6135 ;;		line 102 in file "my_i2c.c"
  6136 ;; Parameters:    Size  Location     Type
  6137 ;;  data_out        1    wreg     unsigned char 
  6138 ;; Auto vars:     Size  Location     Type
  6139 ;;  data_out        1    1[COMRAM] unsigned char 
  6140 ;; Return value:  Size  Location     Type
  6141 ;;                  1    wreg      unsigned char 
  6142 ;; Registers used:
  6143 ;;		wreg, status,2, status,0, cstack
  6144 ;; Tracked objects:
  6145 ;;		On entry : 0/0
  6146 ;;		On exit  : 0/0
  6147 ;;		Unchanged: 0/0
  6148 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6149 ;;      Params:         0       0       0       0       0       0       0
  6150 ;;      Locals:         1       0       0       0       0       0       0
  6151 ;;      Temps:          0       0       0       0       0       0       0
  6152 ;;      Totals:         1       0       0       0       0       0       0
  6153 ;;Total ram usage:        1 bytes
  6154 ;; Hardware stack levels used:    1
  6155 ;; Hardware stack levels required when called:    1
  6156 ;; This function calls:
  6157 ;;		_I2C_Idle
  6158 ;; This function is called by:
  6159 ;;		_LM75_Read_Temp
  6160 ;; This function uses a non-reentrant model
  6161 ;;
  6162                           
  6163                           	psect	text32
  6164  001E1A                     __ptext32:
  6165                           	opt stack 0
  6166  001E1A                     _I2C_WriteByte:
  6167                           	opt stack 28
  6168                           
  6169                           ;incstack = 0
  6170                           ;I2C_WriteByte@data_out stored from wreg
  6171  001E1A  6E02               	movwf	I2C_WriteByte@data_out,c
  6172                           
  6173                           ;my_i2c.c: 104: I2C_Idle();
  6174  001E1C  EC84  F00F         	call	_I2C_Idle	;wreg free
  6175                           
  6176                           ;my_i2c.c: 106: SSPBUF = data_out;
  6177  001E20  C002  FFC9         	movff	I2C_WriteByte@data_out,4041	;volatile
  6178                           
  6179                           ;my_i2c.c: 108: if(SSPCON1bits.WCOL)
  6180  001E24  BEC6               	btfsc	4038,7,c	;volatile
  6181  001E26  0012               	return	
  6182                           
  6183                           ;my_i2c.c: 112: else
  6184                           ;my_i2c.c: 113: {
  6185                           ;my_i2c.c: 114: if(((SSPCON1 & 0x0F) == 0x08) || ((SSPCON1 & 0x0F) == 0x0B))
  6186  001E28  50C6               	movf	4038,w,c	;volatile
  6187  001E2A  0B0F               	andlw	15
  6188  001E2C  0A08               	xorlw	8
  6189  001E2E  E005               	bz	l196
  6190  001E30  50C6               	movf	4038,w,c	;volatile
  6191  001E32  0B0F               	andlw	15
  6192  001E34  0A0B               	xorlw	11
  6193  001E36  A4D8               	btfss	status,2,c
  6194  001E38  0012               	return	
  6195  001E3A                     l196:
  6196  001E3A  B0C7               	btfsc	4039,0,c	;volatile
  6197  001E3C  D7FE               	goto	l196
  6198                           
  6199                           ;my_i2c.c: 118: I2C_Idle();
  6200  001E3E  EC84  F00F         	call	_I2C_Idle	;wreg free
  6201                           
  6202                           ;my_i2c.c: 120: if(SSPCON2bits.ACKSTAT)
  6203  001E42  50C5               	movf	4037,w,c	;volatile
  6204  001E44  0012               	return		;funcret
  6205  001E46                     __end_of_I2C_WriteByte:
  6206                           	opt stack 0
  6207                           tblptru	equ	0xFF8
  6208                           tblptrh	equ	0xFF7
  6209                           tblptrl	equ	0xFF6
  6210                           tablat	equ	0xFF5
  6211                           prodh	equ	0xFF4
  6212                           prodl	equ	0xFF3
  6213                           indf0	equ	0xFEF
  6214                           fsr0h	equ	0xFEA
  6215                           fsr0l	equ	0xFE9
  6216                           wreg	equ	0xFE8
  6217                           indf2	equ	0xFDF
  6218                           postinc2	equ	0xFDE
  6219                           postdec2	equ	0xFDD
  6220                           fsr2h	equ	0xFDA
  6221                           fsr2l	equ	0xFD9
  6222                           status	equ	0xFD8
  6223                           
  6224 ;; *************** function _I2C_Stop *****************
  6225 ;; Defined at:
  6226 ;;		line 49 in file "my_i2c.c"
  6227 ;; Parameters:    Size  Location     Type
  6228 ;;		None
  6229 ;; Auto vars:     Size  Location     Type
  6230 ;;		None
  6231 ;; Return value:  Size  Location     Type
  6232 ;;		None               void
  6233 ;; Registers used:
  6234 ;;		wreg, status,2, status,0, cstack
  6235 ;; Tracked objects:
  6236 ;;		On entry : 0/0
  6237 ;;		On exit  : 0/0
  6238 ;;		Unchanged: 0/0
  6239 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6240 ;;      Params:         0       0       0       0       0       0       0
  6241 ;;      Locals:         0       0       0       0       0       0       0
  6242 ;;      Temps:          0       0       0       0       0       0       0
  6243 ;;      Totals:         0       0       0       0       0       0       0
  6244 ;;Total ram usage:        0 bytes
  6245 ;; Hardware stack levels used:    1
  6246 ;; Hardware stack levels required when called:    1
  6247 ;; This function calls:
  6248 ;;		_I2C_Idle
  6249 ;; This function is called by:
  6250 ;;		_LM75_Read_Temp
  6251 ;; This function uses a non-reentrant model
  6252 ;;
  6253                           
  6254                           	psect	text33
  6255  001F42                     __ptext33:
  6256                           	opt stack 0
  6257  001F42                     _I2C_Stop:
  6258                           	opt stack 28
  6259                           
  6260                           ;my_i2c.c: 51: I2C_Idle();
  6261                           
  6262                           ;incstack = 0
  6263  001F42  EC84  F00F         	call	_I2C_Idle	;wreg free
  6264                           
  6265                           ;my_i2c.c: 52: SSPCON2bits.PEN = 1;
  6266  001F46  84C5               	bsf	4037,2,c	;volatile
  6267  001F48                     l158:
  6268  001F48  A4C5               	btfss	4037,2,c	;volatile
  6269  001F4A  0012               	return		;funcret
  6270  001F4C  D7FD               	goto	l158
  6271  001F4E                     __end_of_I2C_Stop:
  6272                           	opt stack 0
  6273                           tblptru	equ	0xFF8
  6274                           tblptrh	equ	0xFF7
  6275                           tblptrl	equ	0xFF6
  6276                           tablat	equ	0xFF5
  6277                           prodh	equ	0xFF4
  6278                           prodl	equ	0xFF3
  6279                           indf0	equ	0xFEF
  6280                           fsr0h	equ	0xFEA
  6281                           fsr0l	equ	0xFE9
  6282                           wreg	equ	0xFE8
  6283                           indf2	equ	0xFDF
  6284                           postinc2	equ	0xFDE
  6285                           postdec2	equ	0xFDD
  6286                           fsr2h	equ	0xFDA
  6287                           fsr2l	equ	0xFD9
  6288                           status	equ	0xFD8
  6289                           
  6290 ;; *************** function _I2C_Start *****************
  6291 ;; Defined at:
  6292 ;;		line 25 in file "my_i2c.c"
  6293 ;; Parameters:    Size  Location     Type
  6294 ;;		None
  6295 ;; Auto vars:     Size  Location     Type
  6296 ;;		None
  6297 ;; Return value:  Size  Location     Type
  6298 ;;		None               void
  6299 ;; Registers used:
  6300 ;;		wreg, status,2, status,0, cstack
  6301 ;; Tracked objects:
  6302 ;;		On entry : 0/0
  6303 ;;		On exit  : 0/0
  6304 ;;		Unchanged: 0/0
  6305 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6306 ;;      Params:         0       0       0       0       0       0       0
  6307 ;;      Locals:         0       0       0       0       0       0       0
  6308 ;;      Temps:          0       0       0       0       0       0       0
  6309 ;;      Totals:         0       0       0       0       0       0       0
  6310 ;;Total ram usage:        0 bytes
  6311 ;; Hardware stack levels used:    1
  6312 ;; Hardware stack levels required when called:    1
  6313 ;; This function calls:
  6314 ;;		_I2C_Idle
  6315 ;; This function is called by:
  6316 ;;		_LM75_Read_Temp
  6317 ;; This function uses a non-reentrant model
  6318 ;;
  6319                           
  6320                           	psect	text34
  6321  001F4E                     __ptext34:
  6322                           	opt stack 0
  6323  001F4E                     _I2C_Start:
  6324                           	opt stack 28
  6325                           
  6326                           ;my_i2c.c: 27: I2C_Idle();
  6327                           
  6328                           ;incstack = 0
  6329  001F4E  EC84  F00F         	call	_I2C_Idle	;wreg free
  6330                           
  6331                           ;my_i2c.c: 29: SSPCON2bits.SEN = 1;
  6332  001F52  80C5               	bsf	4037,0,c	;volatile
  6333  001F54                     l143:
  6334  001F54  A0C5               	btfss	4037,0,c	;volatile
  6335  001F56  0012               	return		;funcret
  6336  001F58  D7FD               	goto	l143
  6337  001F5A                     __end_of_I2C_Start:
  6338                           	opt stack 0
  6339                           tblptru	equ	0xFF8
  6340                           tblptrh	equ	0xFF7
  6341                           tblptrl	equ	0xFF6
  6342                           tablat	equ	0xFF5
  6343                           prodh	equ	0xFF4
  6344                           prodl	equ	0xFF3
  6345                           indf0	equ	0xFEF
  6346                           fsr0h	equ	0xFEA
  6347                           fsr0l	equ	0xFE9
  6348                           wreg	equ	0xFE8
  6349                           indf2	equ	0xFDF
  6350                           postinc2	equ	0xFDE
  6351                           postdec2	equ	0xFDD
  6352                           fsr2h	equ	0xFDA
  6353                           fsr2l	equ	0xFD9
  6354                           status	equ	0xFD8
  6355                           
  6356 ;; *************** function _I2C_RepeatedStart *****************
  6357 ;; Defined at:
  6358 ;;		line 34 in file "my_i2c.c"
  6359 ;; Parameters:    Size  Location     Type
  6360 ;;		None
  6361 ;; Auto vars:     Size  Location     Type
  6362 ;;		None
  6363 ;; Return value:  Size  Location     Type
  6364 ;;		None               void
  6365 ;; Registers used:
  6366 ;;		wreg, status,2, status,0, cstack
  6367 ;; Tracked objects:
  6368 ;;		On entry : 0/0
  6369 ;;		On exit  : 0/0
  6370 ;;		Unchanged: 0/0
  6371 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6372 ;;      Params:         0       0       0       0       0       0       0
  6373 ;;      Locals:         0       0       0       0       0       0       0
  6374 ;;      Temps:          0       0       0       0       0       0       0
  6375 ;;      Totals:         0       0       0       0       0       0       0
  6376 ;;Total ram usage:        0 bytes
  6377 ;; Hardware stack levels used:    1
  6378 ;; Hardware stack levels required when called:    1
  6379 ;; This function calls:
  6380 ;;		_I2C_Idle
  6381 ;; This function is called by:
  6382 ;;		_LM75_Read_Temp
  6383 ;; This function uses a non-reentrant model
  6384 ;;
  6385                           
  6386                           	psect	text35
  6387  001F5A                     __ptext35:
  6388                           	opt stack 0
  6389  001F5A                     _I2C_RepeatedStart:
  6390                           	opt stack 28
  6391                           
  6392                           ;my_i2c.c: 36: I2C_Idle();
  6393                           
  6394                           ;incstack = 0
  6395  001F5A  EC84  F00F         	call	_I2C_Idle	;wreg free
  6396                           
  6397                           ;my_i2c.c: 38: SSPCON2bits.RSEN = 1;
  6398  001F5E  82C5               	bsf	4037,1,c	;volatile
  6399  001F60                     l149:
  6400  001F60  A2C5               	btfss	4037,1,c	;volatile
  6401  001F62  0012               	return		;funcret
  6402  001F64  D7FD               	goto	l149
  6403  001F66                     __end_of_I2C_RepeatedStart:
  6404                           	opt stack 0
  6405                           tblptru	equ	0xFF8
  6406                           tblptrh	equ	0xFF7
  6407                           tblptrl	equ	0xFF6
  6408                           tablat	equ	0xFF5
  6409                           prodh	equ	0xFF4
  6410                           prodl	equ	0xFF3
  6411                           indf0	equ	0xFEF
  6412                           fsr0h	equ	0xFEA
  6413                           fsr0l	equ	0xFE9
  6414                           wreg	equ	0xFE8
  6415                           indf2	equ	0xFDF
  6416                           postinc2	equ	0xFDE
  6417                           postdec2	equ	0xFDD
  6418                           fsr2h	equ	0xFDA
  6419                           fsr2l	equ	0xFD9
  6420                           status	equ	0xFD8
  6421                           
  6422 ;; *************** function _I2C_ReadByte *****************
  6423 ;; Defined at:
  6424 ;;		line 67 in file "my_i2c.c"
  6425 ;; Parameters:    Size  Location     Type
  6426 ;;  acknowledge     1    wreg     unsigned char 
  6427 ;; Auto vars:     Size  Location     Type
  6428 ;;  acknowledge     1    1[COMRAM] unsigned char 
  6429 ;;  buffer_I2C      1    2[COMRAM] unsigned char 
  6430 ;; Return value:  Size  Location     Type
  6431 ;;                  1    wreg      unsigned char 
  6432 ;; Registers used:
  6433 ;;		wreg, status,2, status,0, cstack
  6434 ;; Tracked objects:
  6435 ;;		On entry : 0/0
  6436 ;;		On exit  : 0/0
  6437 ;;		Unchanged: 0/0
  6438 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6439 ;;      Params:         0       0       0       0       0       0       0
  6440 ;;      Locals:         2       0       0       0       0       0       0
  6441 ;;      Temps:          0       0       0       0       0       0       0
  6442 ;;      Totals:         2       0       0       0       0       0       0
  6443 ;;Total ram usage:        2 bytes
  6444 ;; Hardware stack levels used:    1
  6445 ;; Hardware stack levels required when called:    1
  6446 ;; This function calls:
  6447 ;;		_I2C_Idle
  6448 ;; This function is called by:
  6449 ;;		_LM75_Read_Temp
  6450 ;; This function uses a non-reentrant model
  6451 ;;
  6452                           
  6453                           	psect	text36
  6454  001D3C                     __ptext36:
  6455                           	opt stack 0
  6456  001D3C                     _I2C_ReadByte:
  6457                           	opt stack 28
  6458                           
  6459                           ;incstack = 0
  6460                           ;I2C_ReadByte@acknowledge stored from wreg
  6461  001D3C  6E02               	movwf	I2C_ReadByte@acknowledge,c
  6462                           
  6463                           ;my_i2c.c: 71: I2C_Idle();
  6464  001D3E  EC84  F00F         	call	_I2C_Idle	;wreg free
  6465                           
  6466                           ;my_i2c.c: 73: if(((SSPCON1 & 0x0F) == 0x08) || ((SSPCON1 & 0x0F) == 0x0B))
  6467  001D42  50C6               	movf	4038,w,c	;volatile
  6468  001D44  0B0F               	andlw	15
  6469  001D46  0A08               	xorlw	8
  6470  001D48  E004               	bz	l175
  6471  001D4A  50C6               	movf	4038,w,c	;volatile
  6472  001D4C  0B0F               	andlw	15
  6473  001D4E  0A0B               	xorlw	11
  6474  001D50  B4D8               	btfsc	status,2,c
  6475  001D52                     l175:
  6476                           
  6477                           ;my_i2c.c: 74: {
  6478                           ;my_i2c.c: 75: SSPCON2bits.RCEN = 1;
  6479  001D52  86C5               	bsf	4037,3,c	;volatile
  6480  001D54                     l176:
  6481  001D54  A0C7               	btfss	4039,0,c	;volatile
  6482  001D56  D7FE               	goto	l176
  6483                           
  6484                           ;my_i2c.c: 80: buffer_I2C = SSPBUF;
  6485  001D58  CFC9 F003          	movff	4041,I2C_ReadByte@buffer_I2C	;volatile
  6486                           
  6487                           ;my_i2c.c: 82: I2C_Idle();
  6488  001D5C  EC84  F00F         	call	_I2C_Idle	;wreg free
  6489                           
  6490                           ;my_i2c.c: 84: if(acknowledge == 1)
  6491  001D60  0402               	decf	I2C_ReadByte@acknowledge,w,c
  6492  001D62  E105               	bnz	l179
  6493                           
  6494                           ;my_i2c.c: 85: {
  6495                           ;my_i2c.c: 86: SSPCON2bits.ACKDT = 0;
  6496  001D64  9AC5               	bcf	4037,5,c	;volatile
  6497                           
  6498                           ;my_i2c.c: 87: SSPCON2bits.ACKEN = 1;
  6499  001D66  88C5               	bsf	4037,4,c	;volatile
  6500  001D68                     l180:
  6501  001D68  A8C5               	btfss	4037,4,c	;volatile
  6502  001D6A  D005               	goto	l1430
  6503  001D6C  D7FD               	goto	l180
  6504  001D6E                     l179:
  6505                           
  6506                           ;my_i2c.c: 91: else
  6507                           ;my_i2c.c: 92: {
  6508                           ;my_i2c.c: 93: SSPCON2bits.ACKDT = 1;
  6509  001D6E  8AC5               	bsf	4037,5,c	;volatile
  6510                           
  6511                           ;my_i2c.c: 94: SSPCON2bits.ACKEN = 1;
  6512  001D70  88C5               	bsf	4037,4,c	;volatile
  6513  001D72                     l184:
  6514  001D72  B8C5               	btfsc	4037,4,c	;volatile
  6515  001D74  D7FE               	goto	l184
  6516  001D76                     l1430:
  6517                           
  6518                           ;my_i2c.c: 97: }
  6519                           ;my_i2c.c: 99: return (buffer_I2C);
  6520  001D76  5003               	movf	I2C_ReadByte@buffer_I2C,w,c
  6521  001D78  0012               	return		;funcret
  6522  001D7A                     __end_of_I2C_ReadByte:
  6523                           	opt stack 0
  6524                           tblptru	equ	0xFF8
  6525                           tblptrh	equ	0xFF7
  6526                           tblptrl	equ	0xFF6
  6527                           tablat	equ	0xFF5
  6528                           prodh	equ	0xFF4
  6529                           prodl	equ	0xFF3
  6530                           indf0	equ	0xFEF
  6531                           fsr0h	equ	0xFEA
  6532                           fsr0l	equ	0xFE9
  6533                           wreg	equ	0xFE8
  6534                           indf2	equ	0xFDF
  6535                           postinc2	equ	0xFDE
  6536                           postdec2	equ	0xFDD
  6537                           fsr2h	equ	0xFDA
  6538                           fsr2l	equ	0xFD9
  6539                           status	equ	0xFD8
  6540                           
  6541 ;; *************** function _I2C_Idle *****************
  6542 ;; Defined at:
  6543 ;;		line 56 in file "my_i2c.c"
  6544 ;; Parameters:    Size  Location     Type
  6545 ;;		None
  6546 ;; Auto vars:     Size  Location     Type
  6547 ;;		None
  6548 ;; Return value:  Size  Location     Type
  6549 ;;		None               void
  6550 ;; Registers used:
  6551 ;;		wreg, status,2, status,0
  6552 ;; Tracked objects:
  6553 ;;		On entry : 0/0
  6554 ;;		On exit  : 0/0
  6555 ;;		Unchanged: 0/0
  6556 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6557 ;;      Params:         0       0       0       0       0       0       0
  6558 ;;      Locals:         0       0       0       0       0       0       0
  6559 ;;      Temps:          1       0       0       0       0       0       0
  6560 ;;      Totals:         1       0       0       0       0       0       0
  6561 ;;Total ram usage:        1 bytes
  6562 ;; Hardware stack levels used:    1
  6563 ;; This function calls:
  6564 ;;		Nothing
  6565 ;; This function is called by:
  6566 ;;		_I2C_Start
  6567 ;;		_I2C_RepeatedStart
  6568 ;;		_I2C_Stop
  6569 ;;		_I2C_ReadByte
  6570 ;;		_I2C_WriteByte
  6571 ;; This function uses a non-reentrant model
  6572 ;;
  6573                           
  6574                           	psect	text37
  6575  001F08                     __ptext37:
  6576                           	opt stack 0
  6577  001F08                     _I2C_Idle:
  6578                           	opt stack 28
  6579  001F08                     l1058:
  6580  001F08  A4C7               	btfss	4039,2,c	;volatile
  6581  001F0A  D003               	goto	u90
  6582  001F0C  6A01               	clrf	??_I2C_Idle& (0+255),c
  6583  001F0E  2A01               	incf	??_I2C_Idle& (0+255),f,c
  6584  001F10  D001               	goto	u98
  6585  001F12                     u90:
  6586  001F12  6A01               	clrf	??_I2C_Idle& (0+255),c
  6587  001F14                     u98:
  6588  001F14  50C5               	movf	4037,w,c	;volatile
  6589  001F16  0B1F               	andlw	31
  6590  001F18  1001               	iorwf	??_I2C_Idle,w,c
  6591  001F1A  B4D8               	btfsc	status,2,c
  6592  001F1C  0012               	return		;funcret
  6593  001F1E  D7F4               	goto	l1058
  6594  001F20                     __end_of_I2C_Idle:
  6595                           	opt stack 0
  6596                           tblptru	equ	0xFF8
  6597                           tblptrh	equ	0xFF7
  6598                           tblptrl	equ	0xFF6
  6599                           tablat	equ	0xFF5
  6600                           prodh	equ	0xFF4
  6601                           prodl	equ	0xFF3
  6602                           indf0	equ	0xFEF
  6603                           fsr0h	equ	0xFEA
  6604                           fsr0l	equ	0xFE9
  6605                           wreg	equ	0xFE8
  6606                           indf2	equ	0xFDF
  6607                           postinc2	equ	0xFDE
  6608                           postdec2	equ	0xFDD
  6609                           fsr2h	equ	0xFDA
  6610                           fsr2l	equ	0xFD9
  6611                           status	equ	0xFD8
  6612                           
  6613 ;; *************** function _I2C_Init *****************
  6614 ;; Defined at:
  6615 ;;		line 9 in file "my_i2c.c"
  6616 ;; Parameters:    Size  Location     Type
  6617 ;;  clock_output    1    wreg     unsigned char 
  6618 ;; Auto vars:     Size  Location     Type
  6619 ;;  clock_output    1    0[COMRAM] unsigned char 
  6620 ;; Return value:  Size  Location     Type
  6621 ;;		None               void
  6622 ;; Registers used:
  6623 ;;		wreg, status,2, status,0
  6624 ;; Tracked objects:
  6625 ;;		On entry : 0/0
  6626 ;;		On exit  : 0/0
  6627 ;;		Unchanged: 0/0
  6628 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6629 ;;      Params:         0       0       0       0       0       0       0
  6630 ;;      Locals:         1       0       0       0       0       0       0
  6631 ;;      Temps:          0       0       0       0       0       0       0
  6632 ;;      Totals:         1       0       0       0       0       0       0
  6633 ;;Total ram usage:        1 bytes
  6634 ;; Hardware stack levels used:    1
  6635 ;; This function calls:
  6636 ;;		Nothing
  6637 ;; This function is called by:
  6638 ;;		_main
  6639 ;; This function uses a non-reentrant model
  6640 ;;
  6641                           
  6642                           	psect	text38
  6643  001EEE                     __ptext38:
  6644                           	opt stack 0
  6645  001EEE                     _I2C_Init:
  6646                           	opt stack 30
  6647                           
  6648                           ;incstack = 0
  6649                           ;I2C_Init@clock_output stored from wreg
  6650  001EEE  6E01               	movwf	I2C_Init@clock_output,c
  6651                           
  6652                           ;my_i2c.c: 11: SSPSTAT &= 0x3F;
  6653  001EF0  0E3F               	movlw	63
  6654  001EF2  16C7               	andwf	4039,f,c	;volatile
  6655                           
  6656                           ;my_i2c.c: 12: SSPCON1 = 0x00;
  6657  001EF4  6AC6               	clrf	4038,c	;volatile
  6658                           
  6659                           ;my_i2c.c: 13: SSPCON2 = 0x00;
  6660  001EF6  6AC5               	clrf	4037,c	;volatile
  6661                           
  6662                           ;my_i2c.c: 14: SSPCON1 |= 0b00001000;
  6663  001EF8  86C6               	bsf	4038,3,c	;volatile
  6664                           
  6665                           ;my_i2c.c: 15: SSPSTAT |= 0b10000000;
  6666  001EFA  8EC7               	bsf	4039,7,c	;volatile
  6667                           
  6668                           ;my_i2c.c: 17: TRISCbits.TRISC3 = 1;
  6669  001EFC  8694               	bsf	3988,3,c	;volatile
  6670                           
  6671                           ;my_i2c.c: 18: TRISCbits.TRISC4 = 1;
  6672  001EFE  8894               	bsf	3988,4,c	;volatile
  6673                           
  6674                           ;my_i2c.c: 20: SSPCON1 |= 0b00100000;
  6675  001F00  8AC6               	bsf	4038,5,c	;volatile
  6676                           
  6677                           ;my_i2c.c: 22: SSPADD = clock_output;
  6678  001F02  C001  FFC8         	movff	I2C_Init@clock_output,4040	;volatile
  6679  001F06  0012               	return		;funcret
  6680  001F08                     __end_of_I2C_Init:
  6681                           	opt stack 0
  6682                           tblptru	equ	0xFF8
  6683                           tblptrh	equ	0xFF7
  6684                           tblptrl	equ	0xFF6
  6685                           tablat	equ	0xFF5
  6686                           prodh	equ	0xFF4
  6687                           prodl	equ	0xFF3
  6688                           indf0	equ	0xFEF
  6689                           fsr0h	equ	0xFEA
  6690                           fsr0l	equ	0xFE9
  6691                           wreg	equ	0xFE8
  6692                           indf2	equ	0xFDF
  6693                           postinc2	equ	0xFDE
  6694                           postdec2	equ	0xFDD
  6695                           fsr2h	equ	0xFDA
  6696                           fsr2l	equ	0xFD9
  6697                           status	equ	0xFD8
  6698                           
  6699 ;; *************** function _I2C_Close *****************
  6700 ;; Defined at:
  6701 ;;		line 62 in file "my_i2c.c"
  6702 ;; Parameters:    Size  Location     Type
  6703 ;;		None
  6704 ;; Auto vars:     Size  Location     Type
  6705 ;;		None
  6706 ;; Return value:  Size  Location     Type
  6707 ;;		None               void
  6708 ;; Registers used:
  6709 ;;		status,2, status,0
  6710 ;; Tracked objects:
  6711 ;;		On entry : 0/0
  6712 ;;		On exit  : 0/0
  6713 ;;		Unchanged: 0/0
  6714 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6715 ;;      Params:         0       0       0       0       0       0       0
  6716 ;;      Locals:         0       0       0       0       0       0       0
  6717 ;;      Temps:          0       0       0       0       0       0       0
  6718 ;;      Totals:         0       0       0       0       0       0       0
  6719 ;;Total ram usage:        0 bytes
  6720 ;; Hardware stack levels used:    1
  6721 ;; This function calls:
  6722 ;;		Nothing
  6723 ;; This function is called by:
  6724 ;;		_main
  6725 ;; This function uses a non-reentrant model
  6726 ;;
  6727                           
  6728                           	psect	text39
  6729  001F70                     __ptext39:
  6730                           	opt stack 0
  6731  001F70                     _I2C_Close:
  6732                           	opt stack 30
  6733                           
  6734                           ;my_i2c.c: 64: SSPCON1 &= 0xDF;
  6735                           
  6736                           ;incstack = 0
  6737  001F70  9AC6               	bcf	4038,5,c	;volatile
  6738  001F72  0012               	return		;funcret
  6739  001F74                     __end_of_I2C_Close:
  6740                           	opt stack 0
  6741                           tblptru	equ	0xFF8
  6742                           tblptrh	equ	0xFF7
  6743                           tblptrl	equ	0xFF6
  6744                           tablat	equ	0xFF5
  6745                           prodh	equ	0xFF4
  6746                           prodl	equ	0xFF3
  6747                           indf0	equ	0xFEF
  6748                           fsr0h	equ	0xFEA
  6749                           fsr0l	equ	0xFE9
  6750                           wreg	equ	0xFE8
  6751                           indf2	equ	0xFDF
  6752                           postinc2	equ	0xFDE
  6753                           postdec2	equ	0xFDD
  6754                           fsr2h	equ	0xFDA
  6755                           fsr2l	equ	0xFD9
  6756                           status	equ	0xFD8
  6757                           
  6758 ;; *************** function _Delay_ms *****************
  6759 ;; Defined at:
  6760 ;;		line 11 in file "my_delays.c"
  6761 ;; Parameters:    Size  Location     Type
  6762 ;;  count           2    0[COMRAM] unsigned int 
  6763 ;; Auto vars:     Size  Location     Type
  6764 ;;  i               2    3[COMRAM] unsigned int 
  6765 ;; Return value:  Size  Location     Type
  6766 ;;		None               void
  6767 ;; Registers used:
  6768 ;;		wreg, status,2, status,0
  6769 ;; Tracked objects:
  6770 ;;		On entry : 0/0
  6771 ;;		On exit  : 0/0
  6772 ;;		Unchanged: 0/0
  6773 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  6774 ;;      Params:         2       0       0       0       0       0       0
  6775 ;;      Locals:         2       0       0       0       0       0       0
  6776 ;;      Temps:          1       0       0       0       0       0       0
  6777 ;;      Totals:         5       0       0       0       0       0       0
  6778 ;;Total ram usage:        5 bytes
  6779 ;; Hardware stack levels used:    1
  6780 ;; This function calls:
  6781 ;;		Nothing
  6782 ;; This function is called by:
  6783 ;;		_main
  6784 ;; This function uses a non-reentrant model
  6785 ;;
  6786                           
  6787                           	psect	text40
  6788  001E92                     __ptext40:
  6789                           	opt stack 0
  6790  001E92                     _Delay_ms:
  6791                           	opt stack 30
  6792                           
  6793                           ;my_delays.c: 13: unsigned int i;
  6794                           ;my_delays.c: 15: for(i = 0; i < count; i ++)
  6795                           
  6796                           ;incstack = 0
  6797  001E92  6A04               	clrf	Delay_ms@i,c
  6798  001E94  6A05               	clrf	Delay_ms@i+1,c
  6799  001E96  D009               	goto	l108
  6800  001E98                     l3052:
  6801                           
  6802                           ;my_delays.c: 16: {
  6803                           ;my_delays.c: 17: _delay((unsigned long)((1)*(8000000/4000.0)));
  6804  001E98  0E03               	movlw	3
  6805  001E9A  6E03               	movwf	??_Delay_ms& (0+255),c
  6806  001E9C  0E98               	movlw	152
  6807  001E9E                     u3307:
  6808  001E9E  2EE8               	decfsz	wreg,f,c
  6809  001EA0  D7FE               	goto	u3307
  6810  001EA2  2E03               	decfsz	??_Delay_ms& (0+255),f,c
  6811  001EA4  D7FC               	goto	u3307
  6812  001EA6  4A04               	infsnz	Delay_ms@i,f,c
  6813  001EA8  2A05               	incf	Delay_ms@i+1,f,c
  6814  001EAA                     l108:
  6815  001EAA  5001               	movf	Delay_ms@count,w,c
  6816  001EAC  5C04               	subwf	Delay_ms@i,w,c
  6817  001EAE  5002               	movf	Delay_ms@count+1,w,c
  6818  001EB0  5805               	subwfb	Delay_ms@i+1,w,c
  6819  001EB2  B0D8               	btfsc	status,0,c
  6820  001EB4  0012               	return		;funcret
  6821  001EB6  D7F0               	goto	l3052
  6822  001EB8                     __end_of_Delay_ms:
  6823                           	opt stack 0
  6824                           tblptru	equ	0xFF8
  6825                           tblptrh	equ	0xFF7
  6826                           tblptrl	equ	0xFF6
  6827                           tablat	equ	0xFF5
  6828                           prodh	equ	0xFF4
  6829                           prodl	equ	0xFF3
  6830                           indf0	equ	0xFEF
  6831                           fsr0h	equ	0xFEA
  6832                           fsr0l	equ	0xFE9
  6833                           wreg	equ	0xFE8
  6834                           indf2	equ	0xFDF
  6835                           postinc2	equ	0xFDE
  6836                           postdec2	equ	0xFDD
  6837                           fsr2h	equ	0xFDA
  6838                           fsr2l	equ	0xFD9
  6839                           status	equ	0xFD8
  6840                           tblptru	equ	0xFF8
  6841                           tblptrh	equ	0xFF7
  6842                           tblptrl	equ	0xFF6
  6843                           tablat	equ	0xFF5
  6844                           prodh	equ	0xFF4
  6845                           prodl	equ	0xFF3
  6846                           indf0	equ	0xFEF
  6847                           fsr0h	equ	0xFEA
  6848                           fsr0l	equ	0xFE9
  6849                           wreg	equ	0xFE8
  6850                           indf2	equ	0xFDF
  6851                           postinc2	equ	0xFDE
  6852                           postdec2	equ	0xFDD
  6853                           fsr2h	equ	0xFDA
  6854                           fsr2l	equ	0xFD9
  6855                           status	equ	0xFD8
  6856                           
  6857                           	psect	rparam
  6858  0000                     tblptru	equ	0xFF8
  6859                           tblptrh	equ	0xFF7
  6860                           tblptrl	equ	0xFF6
  6861                           tablat	equ	0xFF5
  6862                           prodh	equ	0xFF4
  6863                           prodl	equ	0xFF3
  6864                           indf0	equ	0xFEF
  6865                           fsr0h	equ	0xFEA
  6866                           fsr0l	equ	0xFE9
  6867                           wreg	equ	0xFE8
  6868                           indf2	equ	0xFDF
  6869                           postinc2	equ	0xFDE
  6870                           postdec2	equ	0xFDD
  6871                           fsr2h	equ	0xFDA
  6872                           fsr2l	equ	0xFD9
  6873                           status	equ	0xFD8
  6874                           tblptru	equ	0xFF8
  6875                           tblptrh	equ	0xFF7
  6876                           tblptrl	equ	0xFF6
  6877                           tablat	equ	0xFF5
  6878                           prodh	equ	0xFF4
  6879                           prodl	equ	0xFF3
  6880                           indf0	equ	0xFEF
  6881                           fsr0h	equ	0xFEA
  6882                           fsr0l	equ	0xFE9
  6883                           wreg	equ	0xFE8
  6884                           indf2	equ	0xFDF
  6885                           postinc2	equ	0xFDE
  6886                           postdec2	equ	0xFDD
  6887                           fsr2h	equ	0xFDA
  6888                           fsr2l	equ	0xFD9
  6889                           status	equ	0xFD8


Data Sizes:
    Strings     24
    Constant    118
    Data        0
    BSS         0
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127    106     106
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    sprintf@f	PTR const unsigned char  size(1) Largest target is 6
		 -> STR_4(CODE[6]), STR_3(CODE[6]), 

    sprintf@sp	PTR unsigned char  size(1) Largest target is 10
		 -> main@temp(COMRAM[10]), 

    sprintf@ap	PTR void [1] size(1) Largest target is 2
		 -> ?_sprintf(COMRAM[2]), 

    Lcd_Text@buffer	PTR unsigned char  size(2) Largest target is 12
		 -> main@temp(COMRAM[10]), STR_2(CODE[6]), STR_1(CODE[12]), 


Critical Paths under _main in COMRAM

    _main->_sprintf
    _sprintf->___ftsub
    _scale->___ftmul
    ___awdiv->___awmod
    _fround->___ftmul
    ___lbdiv->___lbmod
    ___ftmul->___awdiv
    ___lltoft->___ftpack
    ___fttol->_scale
    ___ftsub->___ftadd
    ___ftadd->_fround
    _Lcd_Text->_Lcd_CharCP
    _Lcd_Text->_Lcd_Command
    _Lcd_CharCP->_Lcd_Delay5500us
    _Lcd_Init->_Lcd_Command
    _Lcd_Command->_Lcd_Delay5500us
    _LM75_Read_Temp->_LM75_regdata2float
    _LM75_regdata2float->___ftdiv
    ___ftdiv->___awtoft
    ___awtoft->___ftpack
    _I2C_WriteByte->_I2C_Idle
    _I2C_Stop->_I2C_Idle
    _I2C_Start->_I2C_Idle
    _I2C_RepeatedStart->_I2C_Idle
    _I2C_ReadByte->_I2C_Idle

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                10    10      0   41448
                                             96 COMRAM    10    10      0
                           _Delay_ms
                          _I2C_Close
                           _I2C_Init
                     _LM75_Read_Temp
                         _Lcd_CharCP
                        _Lcd_Command
                           _Lcd_Init
                           _Lcd_Text
                            _sprintf
 ---------------------------------------------------------------------------------
 (1) _sprintf                                             41    37      4   34668
                                             61 COMRAM    35    31      4
                     _LM75_Read_Temp (ARG)
                            ___awdiv
                            ___ftadd
                             ___ftge
                            ___ftmul
                            ___ftneg
                            ___ftsub
                            ___fttol
                            ___lldiv
                            ___llmod
                           ___lltoft
                             ___wmul
                         __div_to_l_
                        __tdiv_to_l_
                             _fround
                            _isdigit
                              _scale
 ---------------------------------------------------------------------------------
 (2) _scale                                               14    11      3    7182
                                             29 COMRAM    11     8      3
                            ___awdiv
                            ___awmod
                            ___ftmul
 ---------------------------------------------------------------------------------
 (3) ___awmod                                              6     2      4    1064
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (3) ___awdiv                                              8     4      4    1196
                                              6 COMRAM     8     4      4
                            ___awmod (ARG)
 ---------------------------------------------------------------------------------
 (2) _isdigit                                              3     3      0      68
                                              0 COMRAM     3     3      0
 ---------------------------------------------------------------------------------
 (2) _fround                                              17    14      3    5429
                                             29 COMRAM    14    11      3
                            ___ftmul
                            ___lbdiv
                            ___lbmod
 ---------------------------------------------------------------------------------
 (3) ___lbmod                                              4     3      1     351
                                              0 COMRAM     4     3      1
 ---------------------------------------------------------------------------------
 (3) ___lbdiv                                              4     3      1     354
                                              4 COMRAM     4     3      1
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftmul                                             15     9      6    4433
                                             14 COMRAM    15     9      6
                            ___awdiv (ARG)
                            ___awmod (ARG)
                           ___ftpack
                            ___lbdiv (ARG)
                            ___lbmod (ARG)
 ---------------------------------------------------------------------------------
 (2) __tdiv_to_l_                                         15     9      6     431
                                              0 COMRAM    15     9      6
 ---------------------------------------------------------------------------------
 (2) __div_to_l_                                          12     6      6     574
                                              0 COMRAM    12     6      6
 ---------------------------------------------------------------------------------
 (2) ___wmul                                               6     2      4    1531
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (2) ___lltoft                                             9     5      4    2242
                                              8 COMRAM     9     5      4
                           ___ftpack
 ---------------------------------------------------------------------------------
 (2) ___llmod                                              9     1      8     543
                                              0 COMRAM     9     1      8
 ---------------------------------------------------------------------------------
 (2) ___lldiv                                             13     5      8     418
                                              0 COMRAM    13     5      8
 ---------------------------------------------------------------------------------
 (2) ___fttol                                             15    11      4     495
                                             40 COMRAM    15    11      4
                            ___ftmul (ARG)
                              _scale (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftsub                                              6     0      6    3604
                                             55 COMRAM     6     0      6
                            ___ftadd
                           ___lltoft (ARG)
 ---------------------------------------------------------------------------------
 (3) ___ftadd                                             12     6      6    3307
                                             43 COMRAM    12     6      6
                           ___ftpack
                             _fround (ARG)
 ---------------------------------------------------------------------------------
 (2) ___ftneg                                              3     0      3     109
                                              0 COMRAM     3     0      3
 ---------------------------------------------------------------------------------
 (2) ___ftge                                               9     3      6     520
                                              0 COMRAM     9     3      6
 ---------------------------------------------------------------------------------
 (1) _Lcd_Text                                             5     2      3     805
                                              4 COMRAM     5     2      3
                         _Lcd_CharCP
                        _Lcd_Command
 ---------------------------------------------------------------------------------
 (2) _Lcd_CharCP                                           3     3      0     120
                                              1 COMRAM     3     3      0
                    _Lcd_Delay5500us
                       _Lcd_Delay5us
 ---------------------------------------------------------------------------------
 (1) _Lcd_Init                                             1     1      0     150
                                              4 COMRAM     1     1      0
                        _Lcd_Command
                    _Lcd_Delay5500us
                       _Lcd_Delay5us
 ---------------------------------------------------------------------------------
 (2) _Lcd_Command                                          3     3      0     120
                                              1 COMRAM     3     3      0
                    _Lcd_Delay5500us
                       _Lcd_Delay5us
 ---------------------------------------------------------------------------------
 (3) _Lcd_Delay5us                                         0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _Lcd_Delay5500us                                      1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _LM75_Read_Temp                                       9     6      3    5392
                                             33 COMRAM     9     6      3
                       _I2C_ReadByte
                  _I2C_RepeatedStart
                          _I2C_Start
                           _I2C_Stop
                      _I2C_WriteByte
                 _LM75_regdata2float
 ---------------------------------------------------------------------------------
 (2) _LM75_regdata2float                                   6     3      3    5275
                                             27 COMRAM     6     3      3
                           ___awtoft
                            ___ftdiv
 ---------------------------------------------------------------------------------
 (3) ___ftdiv                                             15     9      6    2749
                                             12 COMRAM    15     9      6
                           ___awtoft (ARG)
                           ___ftpack
 ---------------------------------------------------------------------------------
 (3) ___awtoft                                             4     1      3    2264
                                              8 COMRAM     4     1      3
                           ___ftpack
 ---------------------------------------------------------------------------------
 (4) ___ftpack                                             8     3      5    2109
                                              0 COMRAM     8     3      5
 ---------------------------------------------------------------------------------
 (2) _I2C_WriteByte                                        1     1      0      15
                                              1 COMRAM     1     1      0
                           _I2C_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_Stop                                             0     0      0       0
                           _I2C_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_Start                                            0     0      0       0
                           _I2C_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_RepeatedStart                                    0     0      0       0
                           _I2C_Idle
 ---------------------------------------------------------------------------------
 (2) _I2C_ReadByte                                         2     2      0      30
                                              1 COMRAM     2     2      0
                           _I2C_Idle
 ---------------------------------------------------------------------------------
 (3) _I2C_Idle                                             1     1      0       0
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Init                                             1     1      0      15
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _I2C_Close                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _Delay_ms                                             5     3      2     110
                                              0 COMRAM     5     3      2
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 4
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _Delay_ms
   _I2C_Close
   _I2C_Init
   _LM75_Read_Temp
     _I2C_ReadByte
       _I2C_Idle
     _I2C_RepeatedStart
       _I2C_Idle
     _I2C_Start
       _I2C_Idle
     _I2C_Stop
       _I2C_Idle
     _I2C_WriteByte
       _I2C_Idle
     _LM75_regdata2float
       ___awtoft
         ___ftpack
       ___ftdiv
         ___awtoft (ARG)
           ___ftpack
         ___ftpack (ARG)
   _Lcd_CharCP
     _Lcd_Delay5500us
     _Lcd_Delay5us
   _Lcd_Command
     _Lcd_Delay5500us
     _Lcd_Delay5us
   _Lcd_Init
     _Lcd_Command
       _Lcd_Delay5500us
       _Lcd_Delay5us
     _Lcd_Delay5500us
     _Lcd_Delay5us
   _Lcd_Text
     _Lcd_CharCP
       _Lcd_Delay5500us
       _Lcd_Delay5us
     _Lcd_Command
       _Lcd_Delay5500us
       _Lcd_Delay5us
   _sprintf
     _LM75_Read_Temp (ARG)
       _I2C_ReadByte
         _I2C_Idle
       _I2C_RepeatedStart
         _I2C_Idle
       _I2C_Start
         _I2C_Idle
       _I2C_Stop
         _I2C_Idle
       _I2C_WriteByte
         _I2C_Idle
       _LM75_regdata2float
         ___awtoft
           ___ftpack
         ___ftdiv
           ___awtoft (ARG)
             ___ftpack
           ___ftpack (ARG)
     ___awdiv (ARG)
       ___awmod (ARG)
     ___ftadd (ARG)
       ___ftpack
       _fround (ARG)
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
         ___lbdiv
           ___lbmod (ARG)
         ___lbmod
     ___ftge (ARG)
     ___ftmul (ARG)
       ___awdiv (ARG)
         ___awmod (ARG)
       ___awmod (ARG)
       ___ftpack (ARG)
       ___lbdiv (ARG)
         ___lbmod (ARG)
       ___lbmod (ARG)
     ___ftneg (ARG)
     ___ftsub (ARG)
       ___ftadd
         ___ftpack
         _fround (ARG)
           ___ftmul
             ___awdiv (ARG)
               ___awmod (ARG)
             ___awmod (ARG)
             ___ftpack (ARG)
             ___lbdiv (ARG)
               ___lbmod (ARG)
             ___lbmod (ARG)
           ___lbdiv
             ___lbmod (ARG)
           ___lbmod
       ___lltoft (ARG)
         ___ftpack
     ___fttol (ARG)
       ___ftmul (ARG)
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
       _scale (ARG)
         ___awdiv
           ___awmod (ARG)
         ___awmod
         ___ftmul
           ___awdiv (ARG)
             ___awmod (ARG)
           ___awmod (ARG)
           ___ftpack (ARG)
           ___lbdiv (ARG)
             ___lbmod (ARG)
           ___lbmod (ARG)
     ___lldiv (ARG)
     ___llmod (ARG)
     ___lltoft (ARG)
       ___ftpack
     ___wmul (ARG)
     __div_to_l_ (ARG)
     __tdiv_to_l_ (ARG)
     _fround (ARG)
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)
       ___lbdiv
         ___lbmod (ARG)
       ___lbmod
     _isdigit (ARG)
     _scale (ARG)
       ___awdiv
         ___awmod (ARG)
       ___awmod
       ___ftmul
         ___awdiv (ARG)
           ___awmod (ARG)
         ___awmod (ARG)
         ___ftpack (ARG)
         ___lbdiv (ARG)
           ___lbmod (ARG)
         ___lbmod (ARG)

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BITCOMRAM           7F      0       0       0        0.0%
EEDATA             100      0       0       0        0.0%
NULL                 0      0       0       0        0.0%
CODE                 0      0       0       0        0.0%
COMRAM              7F     6A      6A       1       83.5%
STACK                0      0       0       2        0.0%
DATA                 0      0       0       3        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BANK5              100      0       0      14        0.0%
ABS                  0      0       0      15        0.0%
BITBANK5           100      0       0      16        0.0%
BIGRAM             5FF      0       0      17        0.0%
BITSFR               0      0       0      40        0.0%
SFR                  0      0       0      40        0.0%


Microchip Technology PIC18 Macro Assembler V1.34 build -361300703 
Symbol Table                                                                                   Sun Mar 26 20:21:43 2017

         __size_of_I2C_Close 0004           __size_of_I2C_Start 000C                           PL2 0F10  
                         PL4 0F28                           PL6 0C84                           PL8 0CC0  
                _SSPSTATbits 000FC7                           l17 1816                           u90 1F12  
                         u98 1F14                 ___awdiv@sign 000C          ___wmul@multiplicand 0003  
                __CFG_BORV$3 000000                 __CFG_CP0$OFF 000000                 __CFG_CP1$OFF 000000  
               __CFG_CP2$OFF 000000                 __CFG_CP3$OFF 000000                  __CFG_OSC$HS 000000  
               ___ftadd@exp1 0037                 ___ftadd@exp2 0036                          PL10 0CD6  
                        PL20 0D10                          PL12 0D02                          PL30 13C0  
                        PL22 0F76                          PL14 0F40                          PL40 13F0  
                        PL32 1302                          PL24 0F94                          PL16 0F66  
                        PL50 0FBC                          PL42 1330                          PL34 13D8  
                        PL26 0D24                          PL18 110A                          PL60 0D4E  
                        PL52 1866                          PL44 1406                          PL36 131A  
                        PL28 12EA                          PL62 1A26                          PL54 0D40  
                        PL46 125A                          PL38 0FA2                          PL56 1874  
                        PL48 0FAC                          PL58 15A4                 ___ftadd@sign 0035  
                        l108 1EAA                          l143 1F54                          l180 1D68  
                        l149 1F60                          l341 0AC4                          l158 1F48  
                        l175 1D52                          l184 1D72                          l176 1D54  
                        l179 1D6E                          l196 1E3A                          l356 0C1C  
                        l292 06AC                          l358 0C42                          l704 1A06  
                        l296 0742                          l733 1156                          l661 165E  
                        l807 1EE0                          l737 117A                          l692 19B4  
                        l748 1206                          l757 1218                          l766 16B0  
                        l862 1B0C                          l782 14D4                          l768 16F8  
                        l872 1BD6                          l776 1494                 __CFG_CPB$OFF 000000  
               __CFG_CPD$OFF 000000                          u605 134E                          u615 1356  
                        u625 1364                          u635 1278                          u645 1280  
                        u655 128E                 ___awmod@sign 0006                          wreg 000FE8  
        __end_of_Lcd_Command 13C0         I2C_Init@clock_output 0001                 __CFG_LVP$OFF 000000  
               ___ftdiv@cntr 0016                 ___ftdiv@sign 001B                 __CFG_WDT$OFF 000000  
                       l2200 1188                         l3000 0B9A                         l1058 1F08  
                       l3010 0BC8                         l3020 0BFC                         l1430 1D76  
                       l2222 11C0                         l3030 0C46                         l3014 0BE6  
                       l3006 0BAE                         l2160 19D4                         l2224 11CA  
                       l2216 11A2                         l3032 0C4C                         l2234 11F6  
                       l2226 11D2                         l2402 1B70                         l3026 0C20  
                       l3052 1E98                         l2164 19E0                         l2156 19BC  
                       l2236 1200                         l2228 11D8                         l2308 154A  
                       l3044 0C70                         l2166 19F2                         l2158 19C0  
                       l2254 1690                         l2246 1234                         l2318 1566  
                       l2350 1A62                         l2406 1B7C                         l2502 0DE2  
                       l3038 0C5A                         l3046 0C7A                         l2168 19FC  
                       l2272 16D4                         l2440 1E0E                         l2432 1DFA  
                       l2352 1A6A                         l2344 1A52                         l2520 0EB8  
                       l2512 0E3A                         l2418 1DC2                         l2194 1164  
                       l2610 15EE                         l2290 1506                         l2434 1DFE  
                       l2370 1A9E                         l2362 1A88                         l2354 1A6E  
                       l2338 1A42                         l2700 17A4                         l2428 1DF4  
                       l2444 1E16                         l2460 1E64                         l2452 1E4E  
                       l2508 0E30                         l2294 1526                         l2366 1A92  
                       l2390 1B48                         l2382 1B30                         l2526 0F06  
                       l3078 18DE                         l2712 17D0                         l2704 17AC  
                       l2632 1646                         l2544 142E                         l2480 107C  
                       l2392 1B50                         l2650 1D86                         l2706 17B8  
                       l2722 1AC0                         l2618 161C                         l2546 1438  
                       l2538 1ECC                         l2394 1B54                         l2386 1B3C  
                       l2802 06A8                         l2708 17BC                         l2724 1ACC  
                       l2636 164E                         l2628 1636                         l2580 14AC  
                       l2564 146E                         l2662 1C7E                         l2734 1AFE  
                       l2726 1AD0                         l2750 1BC8                         l2742 1B96  
                       l2638 165A                         l2590 14D0                         l2398 1B66  
                       l2910 09F6                         l2830 074A                         l2822 0710  
                       l2680 174C                         l2744 1BA2                         l2584 14BC  
                       l2488 10E8                         l2808 06C0                         l2816 0700  
                       l2770 1930                         l2658 1C60                         l2746 1BA6  
                       l2594 15BC                         l2930 0A54                         l2906 0996  
                       l2842 0770                         l2834 074E                         l2826 0738  
                       l2780 1958                         l2772 1936                         l2668 1C96  
                       l2756 1CF6                         l2596 15C6                         l2588 14C4  
                       l2940 0A6C                         l2932 0A5C                         l2924 0A1C  
                       l2916 09FA                         l2852 07AA                         l2836 075E  
                       l2766 1924                         l2678 1742                         l2758 1D02  
                       l2784 1980                         l2768 192A                         l2776 193E  
                       l2696 1794                         l2928 0A4A                         l2880 08AE  
                       l2778 1950                         l2962 0AA4                         l2946 0A84  
                       l2954 0A94                         l2938 0A60                         l2882 08BC  
                       l2980 0B34                         l2964 0AB0                         l2956 0A9C  
                       l2892 0928                         l2884 08EA                         l2876 088E  
                       l2868 082E                         l2990 0B82                         l2886 08F8  
                       l2798 0698                         l2992 0B8A                         l2976 0AE4  
                       l2968 0AC8                         l2998 0B92                         STR_1 0677  
                       STR_2 0683                         STR_3 0689                         u2021 1680  
                       u2041 16A0                         u2071 14F6                         u3050 0ABE  
                       u2411 1448                         u2091 1516                         u2601 173A  
                       u3307 1E9E                         u1811 1128                         u2620 176A  
                       u3237 12A0                         u1821 113C                         u3247 12D4  
                       u2391 1426                         u3257 1376                         u2625 1762  
                       u3267 13AA                         u3277 1F22                         u2750 1978  
                       u3287 1F2A                         u2760 19A0                         u3297 1F38  
                       u2757 196E                         u2950 0928                         u2870 07DA  
                       u2767 1996                         u2875 07D0                 __CFG_PWRT$ON 000000  
          ??_Lcd_Delay5500us 0001        __size_of_I2C_ReadByte 003E                         _main 1882  
               ___ftpack@arg 0001             __end_of_I2C_Idle 1F20                 ___ftpack@exp 0004  
           __end_of_I2C_Init 1F08                         fsr0h 000FEA                         indf0 000FEF  
                       fsr0l 000FE9                         fsr2h 000FDA                         indf2 000FDF  
       __end_of_Lcd_Delay5us 1F32                         fsr2l 000FD9             __end_of_I2C_Stop 1F4E  
 __end_of_LM75_regdata2float 1CF0                         prodh 000FF4                         prodl 000FF3  
                       start 0000                __CFG_IESO$OFF 000000                 _sprintf$1240 0048  
              __CFG_MCLRE$ON 000000                 ___ftmul@cntr 001C                 ___param_bank 000010  
               ___ftmul@sign 001D                   _Lcd_CharCP 126A                 ___fttol@exp1 0037  
               ___fttol@lval 0033                        ?_main 0001              __end_of___awdiv 1AA8  
            __end_of___lbdiv 1E1A              __end_of___ftadd 125A              __end_of___awmod 1B86  
            __end_of___lbmod 1E6C              __end_of___ftdiv 172A                        _CMCON 000FB4  
            __end_of___ftneg 1EEE              __end_of___lldiv 1B1E              __end_of___ftmul 15A4  
            ___awdiv@divisor 0009              __end_of___llmod 1BE8              __end_of___ftsub 1DB0  
            __end_of___fttol 17E2              ___awdiv@counter 000B                        _PORTA 000F80  
                      _PORTB 000F81                        _PORTC 000F82                        _TRISA 000F92  
              __CFG_WRT0$OFF 000000                __CFG_WRT1$OFF 000000                __CFG_WRT2$OFF 000000  
              __CFG_WRT3$OFF 000000                 ___lltoft@exp 0011               __CFG_EBTR0$OFF 000000  
             __CFG_FCMEN$OFF 000000               __CFG_EBTR1$OFF 000000               __CFG_EBTR2$OFF 000000  
             __CFG_EBTR3$OFF 000000                 _I2C_ReadByte 1D3C                __CFG_WRTB$OFF 000000  
              __CFG_WRTC$OFF 000000                __CFG_WRTD$OFF 000000               __CFG_EBTRB$OFF 000000  
              ___awtoft@sign 000C              __end_of_dpowers 0677            __end_of_I2C_Close 1F74  
                      _scale 0D5C              __end_of_isdigit 1ED4                ___ftpack@sign 0005  
          __end_of_I2C_Start 1F5A               __CFG_BOREN$OFF 000000                        tablat 000FF5  
                      status 000FD8              __end_of_sprintf 0C84              ___lbdiv@divisor 0005  
            ___lbdiv@counter 0007             __end_of_Delay_ms 1EB8             __end_of_Lcd_Init 1866  
           __end_of_Lcd_Text 19A8              __initialization 1F66                 __end_of_main 1920  
                _Lcd_Command 1340                       ??_main 0061                ___fttol@sign1 0032  
              __activetblptr 000002         __size_of__tdiv_to_l_ 00D0      _LM75_regdata2float$1236 001F  
                     _ADCON1 000FC1       __size_of_I2C_WriteByte 002C             ___llmod@dividend 0001  
                     ?_scale 001E             ___awdiv@dividend 0007             __end_of___awtoft 1DE6  
           __end_of___ftpack 1A26             __end_of___lltoft 1D3C               Lcd_Text@buffer 0006  
                     _SSPADD 000FC8                       _SSPBUF 000FC9               __CFG_XINST$OFF 000000  
           __end_of__powers_ 064F                       ___ftge 1C42                  ?_Lcd_CharCP 0001  
                     ___wmul 1E6C                    ??___awdiv 000B                    ??___lbdiv 0006  
                  ??___ftadd 0032                    ??___awmod 0005                    ??___lbmod 0002  
                  ??___ftdiv 0013                    ??___ftneg 0004                    ??___lldiv 0009  
                  ??___ftmul 0015                    ??___llmod 0009                    ??___ftsub 003E  
                  ??___fttol 002D                Delay_ms@count 0001                       _fround 0FC6  
           ___awdiv@quotient 000D              ___awmod@divisor 0003              ___awmod@counter 0005  
      ___ftmul@f3_as_product 0019                    ?_I2C_Idle 0001                    ??_isdigit 0001  
                  ?_I2C_Init 0001                    ?_I2C_Stop 0001                 __mediumconst 0000  
                     tblptrh 000FF7                       tblptrl 000FF6                       tblptru 000FF8  
                  ??_sprintf 0042        __size_of_Lcd_Delay5us 0012             ___lbdiv@dividend 0006  
         Lcd_Command@command 0004              ___lbmod@divisor 0001                   __accesstop 0080  
    __end_of__initialization 1F66              ___lbmod@counter 0003              __CFG_PBADEN$OFF 000000  
                 ___ftadd@f1 002C                   ___ftadd@f2 002F                   ___ftge@ff1 0001  
                 ___ftge@ff2 0004                ___rparam_used 000001                   ___ftdiv@f1 000D  
                 ___ftdiv@f2 0010                   ___ftdiv@f3 0017                   ___ftneg@f1 0001  
                 ___awtoft@c 0009                   ___ftmul@f1 000F                   ___ftmul@f2 0012  
                 ___ftsub@f1 0038                   ___ftsub@f2 003B                   ___fttol@f1 0029  
             __pcstackCOMRAM 0001                _I2C_WriteByte 1E1A                   ___lltoft@c 0009  
              __end_of_scale 0F10                   __end_ofPL2 0F28                   __end_ofPL4 0F40  
                 __end_ofPL6 0CC0                   __end_ofPL8 0CD6             ___lbdiv@quotient 0008  
               _Lcd_Delay5us 1F20                   __div_to_l_ 15B2                   ??_I2C_Idle 0001  
            _Lcd_Delay5500us 1F32                   ??_I2C_Init 0001                   ??_I2C_Stop 0002  
                  ?_Delay_ms 0001                    ?_Lcd_Init 0001                    ?_Lcd_Text 0005  
            __div_to_l_@exp1 000C              __div_to_l_@cntr 000B                      ??_scale 0021  
            __div_to_l_@quot 0007          __size_of_Lcd_CharCP 0080                 sprintf@width 0052  
              __div_to_l_@f1 0001                __div_to_l_@f2 0004               ?_I2C_WriteByte 0001  
                    ?___ftge 0001                      ?___wmul 0001                      ?_fround 001E  
                  ?___awtoft 0009                    ?___ftpack 0001           _LM75_regdata2float 1C9A  
                  ?___lltoft 0009            LM75_Read_Temp@LSB 0029            LM75_Read_Temp@MSB 002A  
                 ??_Delay_ms 0003          ?_LM75_regdata2float 001C      __size_of_LM75_Read_Temp 005A  
                 ??_Lcd_Init 0005                   ??_Lcd_Text 0008                      _SSPCON1 000FC6  
                    _SSPCON2 000FC5                      _SSPSTAT 000FC7                    _I2C_Close 1F70  
                  _I2C_Start 1F4E    LM75_regdata2float@regdata 001C            __end_of__npowers_ 0628  
                    __Hparam 0000                   _scale$1239 0025         ??_LM75_regdata2float 001F  
                    __Lparam 0000       I2C_ReadByte@buffer_I2C 0003              __size_of___ftge 0058  
                    ___awdiv 1A30                      ___lbdiv 1DE6                      ___ftadd 1118  
                    ___awmod 1B1E                      ___lbmod 1E46                      ___ftdiv 1670  
                    ___ftneg 1ED4                      ___lldiv 1AA8              __size_of___wmul 0026  
                    ___ftmul 14E6                      ___llmod 1B86                      ___ftsub 1D7A  
                    ___fttol 172A      __end_of_Lcd_Delay5500us 1F42                 __psmallconst 0600  
            __CFG_STVREN$OFF 000000                      __pcinit 1F66                   ??___awtoft 000C  
                 ??___ftpack 0006              __size_of_fround 0144                      __ramtop 0600  
               ?_Lcd_Command 0001                   ??___lltoft 000D                      __ptext0 1882  
                    __ptext1 0690                      __ptext2 0D5C                      __ptext3 1B1E  
                    __ptext4 1A30                      __ptext5 1EB8                      __ptext6 0FC6  
                    __ptext7 1E46                      __ptext8 1DE6                      __ptext9 14E6  
                ?__div_to_l_ 0001                      _dpowers 064F                      _isdigit 1EB8  
           ___awmod@dividend 0001          LM75_Read_Temp@word0 0027                      _sprintf 0690  
       end_of_initialization 1F66                    Delay_ms@i 0004                __Lmediumconst 0000  
                 ?_I2C_Close 0001                   ?_I2C_Start 0001              ??_I2C_WriteByte 0002  
            ___lldiv@divisor 0005              ___lldiv@counter 000D                 ??_Lcd_CharCP 0002  
                    postdec2 000FDD                      postinc2 000FDE                    Lcd_Text@x 0005  
                  Lcd_Text@y 0008               __tdiv_to_l_@f1 0001               __tdiv_to_l_@f2 0004  
              ??__tdiv_to_l_ 0007             ___lbmod@dividend 0002                    _TRISBbits 000F93  
                  _TRISCbits 000F94            __size_of_I2C_Idle 0018            __size_of_I2C_Init 001A  
          __size_of_I2C_Stop 000C           __end_of_Lcd_CharCP 12EA                  ___lbmod@rem 0004  
                ___ftdiv@exp 001A          __size_of__div_to_l_ 00BE                  ___ftmul@exp 0018  
             __end_of___ftge 1C9A             ?_Lcd_Delay5500us 0001               __end_of___wmul 1E92  
             __end_of_fround 110A                  __end_ofPL10 0D02                  __end_ofPL20 0D24  
                __end_ofPL12 0D10                  __end_ofPL30 13D8                  __end_ofPL22 0F94  
                __end_ofPL14 0F66                  __end_ofPL40 1406                  __end_ofPL32 131A  
                __end_ofPL24 0FA2                  __end_ofPL16 0F76                  __end_ofPL50 0FC6  
                __end_ofPL42 1340                  __end_ofPL34 13F0                  __end_ofPL26 0D40  
                __end_ofPL18 1118                  __end_ofPL60 0D5C                  __end_ofPL52 1874  
                __end_ofPL44 1416                  __end_ofPL36 1330                  __end_ofPL28 1302  
                __end_ofPL62 1A30                  __end_ofPL54 0D4E                  __end_ofPL46 126A  
                __end_ofPL38 0FAC                  __end_ofPL56 1882                  __end_ofPL48 0FBC  
                __end_ofPL58 15B2          start_initialization 1F66               _LM75_Read_Temp 1BE8  
        __end_of__tdiv_to_l_ 14E6            __size_of_Delay_ms 0026            __size_of_Lcd_Init 0084  
          __size_of_Lcd_Text 0088                  ??_I2C_Close 0001              ___llmod@divisor 0005  
                ??_I2C_Start 0002              ___llmod@counter 0009                     ??___ftge 0007  
                   ??___wmul 0005            _I2C_RepeatedStart 1F5A             __CFG_LPT1OSC$OFF 000000  
                   ??_fround 0021           ?_I2C_RepeatedStart 0001                sprintf@tmpval 0054  
     __end_of_LM75_Read_Temp 1C42                   fround@prec 002B            __size_of___awtoft 0036  
          __size_of___ftpack 007E         __size_of_Lcd_Command 0080            __size_of___lltoft 004C  
              ?_I2C_ReadByte 0001          ??_I2C_RepeatedStart 0002                  sprintf@flag 0050  
                sprintf@fval 005A                  sprintf@prec 005E            __CFG_CCP2MX$PORTC 000000  
  __end_of_I2C_RepeatedStart 1F66                     ?___awdiv 0007                     ?___lbdiv 0005  
                   ?___ftadd 002C                     ?___awmod 0001                     ?___lbmod 0001  
                   ?___ftdiv 000D                     ?___ftneg 0001                     ?___lldiv 0001  
                   ?___ftmul 000F                     ?___llmod 0001                     ?___ftsub 0038  
                  __npowers_ 0601                     ?___fttol 0029                  __tdiv_to_l_ 1416  
               ??__div_to_l_ 0007              ?_LM75_Read_Temp 0022                  __smallconst 0600  
                   _I2C_Idle 1F08                     ?_isdigit 0001                     _I2C_Init 1EEE  
    I2C_ReadByte@acknowledge 0002                     _I2C_Stop 1F42               ??_I2C_ReadByte 0002  
                   ?_sprintf 003E               __size_of_scale 01B4               ___wmul@product 0005  
                   _LATBbits 000F8A           __end_of__div_to_l_ 1670  __size_of_LM75_regdata2float 0056  
           __CFG_WDTPS$32768 000000                 Lcd_Init@data 0005            ___wmul@multiplier 0001  
                   _Delay_ms 1E92                     _Lcd_Init 17E2                     _Lcd_Text 1920  
               Lcd_Text@data 0009                     __Hrparam 0000                     __Lrparam 0000  
      __end_of_I2C_WriteByte 1E46   __size_of_I2C_RepeatedStart 000C             __size_of___awdiv 0078  
           __size_of___lbdiv 0034             __size_of___ftadd 0142             __size_of___awmod 0068  
           __size_of___lbmod 0026             __size_of___ftdiv 00BA             __size_of___ftneg 001A  
           __size_of___lldiv 0076             __size_of___ftmul 00BE             __size_of___llmod 0062  
           __size_of___ftsub 0036             __size_of___fttol 00B8                     ___awtoft 1DB0  
                   ___ftpack 19A8                  _fround$1237 0028                  _fround$1238 0025  
                   ___lltoft 1CF0                  _isdigit$956 0002                ?_Lcd_Delay5us 0001  
                 sprintf@exp 0058                   sprintf@val 004C             __size_of_isdigit 001C  
                   __ptext10 1416                     __ptext11 15B2                     __ptext20 1C42  
                   __ptext12 1E6C                     __ptext21 1920                     __ptext13 1CF0  
                   __ptext30 1DB0                     __ptext22 126A                     __ptext14 1B86  
                   __ptext31 19A8                     __ptext23 17E2                     __ptext15 1AA8  
                   __ptext40 1E92                     __ptext32 1E1A                     __ptext24 1340  
                   __ptext16 172A                     __ptext33 1F42                     __ptext25 1F20  
                   __ptext17 1D7A                     __ptext34 1F4E                     __ptext26 1F32  
                   __ptext18 1118                     __ptext35 1F5A                     __ptext27 1BE8  
                   __ptext19 1ED4                     __ptext36 1D3C                     __ptext28 1C9A  
                   __ptext37 1F08                     __ptext29 1670                     __ptext38 1EEE  
                   __ptext39 1F70                     __powers_ 0628             __size_of_sprintf 05F4  
                Lcd_CharCP@c 0004                __size_of_main 009E        I2C_WriteByte@data_out 0002  
       __end_of_I2C_ReadByte 1D7A                     main@temp 0061               ??_Lcd_Delay5us 0001  
   __size_of_Lcd_Delay5500us 0010                     isdigit@c 0003                     scale@scl 0028  
                  sprintf@ap 004B             __tdiv_to_l_@exp1 000F                    sprintf@sp 005D  
           __tdiv_to_l_@cntr 000E             __tdiv_to_l_@quot 000A             ___lldiv@dividend 0001  
           ??_LM75_Read_Temp 0025                ??_Lcd_Command 0002                 ?__tdiv_to_l_ 0001  
                   sprintf@c 0060                     sprintf@f 003E             ___lldiv@quotient 0009  
                _SSPCON1bits 000FC6                  _SSPCON2bits 000FC5  
